[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar makeInstaller, meteorInstall;\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/modules-runtime/.npm/package/node_modules/install/install.js   //\n// This file is in bare mode and is not in its own closure.                //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nmakeInstaller = function (options) {                                       // 1\n  options = options || {};                                                 // 2\n                                                                           // 3\n  // These file extensions will be appended to required module identifiers\n  // if they do not exactly match an installed module.                     // 5\n  var defaultExtensions = options.extensions || [\".js\", \".json\"];          // 6\n                                                                           // 7\n  // If defined, the options.onInstall function will be called any time    // 8\n  // new modules are installed.                                            // 9\n  var onInstall = options.onInstall;                                       // 10\n                                                                           // 11\n  // If defined, the options.override function will be called before       // 12\n  // looking up any top-level package identifiers in node_modules          // 13\n  // directories. It can either return a string to provide an alternate    // 14\n  // package identifier, or a non-string value to prevent the lookup from  // 15\n  // proceeding.                                                           // 16\n  var override = options.override;                                         // 17\n                                                                           // 18\n  // If defined, the options.fallback function will be called when no      // 19\n  // installed module is found for a required module identifier. Often     // 20\n  // options.fallback will be implemented in terms of the native Node      // 21\n  // require function, which has the ability to load binary modules.       // 22\n  var fallback = options.fallback;                                         // 23\n                                                                           // 24\n  // Nothing special about MISSING.hasOwnProperty, except that it's fewer  // 25\n  // characters than Object.prototype.hasOwnProperty after minification.   // 26\n  var hasOwn = {}.hasOwnProperty;                                          // 27\n                                                                           // 28\n  // The file object representing the root directory of the installed      // 29\n  // module tree.                                                          // 30\n  var root = new File(\"/\", new File(\"/..\"));                               // 31\n  var rootRequire = makeRequire(root);                                     // 32\n                                                                           // 33\n  // Merges the given tree of directories and module factory functions     // 34\n  // into the tree of installed modules and returns a require function     // 35\n  // that behaves as if called from a module in the root directory.        // 36\n  function install(tree, options) {                                        // 37\n    if (isObject(tree)) {                                                  // 38\n      fileMergeContents(root, tree, options);                              // 39\n      if (isFunction(onInstall)) {                                         // 40\n        onInstall(rootRequire);                                            // 41\n      }                                                                    // 42\n    }                                                                      // 43\n    return rootRequire;                                                    // 44\n  }                                                                        // 45\n                                                                           // 46\n  // This constructor will be used to instantiate the module objects       // 47\n  // passed to module factory functions (i.e. the third argument after     // 48\n  // require and exports), and is exposed as install.Module in case the    // 49\n  // caller of makeInstaller wishes to modify Module.prototype.            // 50\n  function Module(id) {                                                    // 51\n    this.id = id;                                                          // 52\n    this.children = [];                                                    // 53\n  }                                                                        // 54\n                                                                           // 55\n  Module.prototype.resolve = function (id) {                               // 56\n    return this.require.resolve(id);                                       // 57\n  };                                                                       // 58\n                                                                           // 59\n  install.Module = Module;                                                 // 60\n                                                                           // 61\n  function getOwn(obj, key) {                                              // 62\n    return hasOwn.call(obj, key) && obj[key];                              // 63\n  }                                                                        // 64\n                                                                           // 65\n  function isObject(value) {                                               // 66\n    return value && typeof value === \"object\";                             // 67\n  }                                                                        // 68\n                                                                           // 69\n  function isFunction(value) {                                             // 70\n    return typeof value === \"function\";                                    // 71\n  }                                                                        // 72\n                                                                           // 73\n  function isString(value) {                                               // 74\n    return typeof value === \"string\";                                      // 75\n  }                                                                        // 76\n                                                                           // 77\n  function makeRequire(file) {                                             // 78\n    function require(id) {                                                 // 79\n      var result = fileResolve(file, id);                                  // 80\n      if (result) {                                                        // 81\n        return fileEvaluate(result, file.m);                               // 82\n      }                                                                    // 83\n                                                                           // 84\n      var error = new Error(\"Cannot find module '\" + id + \"'\");            // 85\n                                                                           // 86\n      if (isFunction(fallback)) {                                          // 87\n        return fallback(                                                   // 88\n          id, // The missing module identifier.                            // 89\n          file.m.id, // The path of the requiring file.                    // 90\n          error // The error we would have thrown.                         // 91\n        );                                                                 // 92\n      }                                                                    // 93\n                                                                           // 94\n      throw error;                                                         // 95\n    }                                                                      // 96\n                                                                           // 97\n    require.resolve = function (id) {                                      // 98\n      var f = fileResolve(file, id);                                       // 99\n      if (f) return f.m.id;                                                // 100\n      var error = new Error(\"Cannot find module '\" + id + \"'\");            // 101\n      if (fallback && isFunction(fallback.resolve)) {                      // 102\n        return fallback.resolve(id, file.m.id, error);                     // 103\n      }                                                                    // 104\n      throw error;                                                         // 105\n    };                                                                     // 106\n                                                                           // 107\n    return require;                                                        // 108\n  }                                                                        // 109\n                                                                           // 110\n  // File objects represent either directories or modules that have been   // 111\n  // installed. When a `File` respresents a directory, its `.c` (contents)\n  // property is an object containing the names of the files (or           // 113\n  // directories) that it contains. When a `File` represents a module, its\n  // `.c` property is a function that can be invoked with the appropriate  // 115\n  // `(require, exports, module)` arguments to evaluate the module. If the\n  // `.c` property is a string, that string will be resolved as a module   // 117\n  // identifier, and the exports of the resulting module will provide the  // 118\n  // exports of the original file. The `.p` (parent) property of a File is\n  // either a directory `File` or `null`. Note that a child may claim      // 120\n  // another `File` as its parent even if the parent does not have an      // 121\n  // entry for that child in its `.c` object.  This is important for       // 122\n  // implementing anonymous files, and preventing child modules from using\n  // `../relative/identifier` syntax to examine unrelated modules.         // 124\n  function File(name, parent) {                                            // 125\n    var file = this;                                                       // 126\n                                                                           // 127\n    // Link to the parent file.                                            // 128\n    file.p = parent = parent || null;                                      // 129\n                                                                           // 130\n    // The module object for this File, which will eventually boast an     // 131\n    // .exports property when/if the file is evaluated.                    // 132\n    file.m = new Module(name);                                             // 133\n  }                                                                        // 134\n                                                                           // 135\n  function fileEvaluate(file, parentModule) {                              // 136\n    var contents = file && file.c;                                         // 137\n    var module = file.m;                                                   // 138\n                                                                           // 139\n    if (! hasOwn.call(module, \"exports\")) {                                // 140\n      if (parentModule) {                                                  // 141\n        module.parent = parentModule;                                      // 142\n        var children = parentModule.children;                              // 143\n        if (Array.isArray(children)) {                                     // 144\n          children.push(module);                                           // 145\n        }                                                                  // 146\n      }                                                                    // 147\n                                                                           // 148\n      // If a Module.prototype.useNode method is defined, give it a chance\n      // to define module.exports based on module.id using Node.           // 150\n      if (! isFunction(module.useNode) ||                                  // 151\n          ! module.useNode()) {                                            // 152\n        contents(                                                          // 153\n          module.require = module.require || makeRequire(file),            // 154\n          module.exports = {},                                             // 155\n          module,                                                          // 156\n          file.m.id,                                                       // 157\n          file.p.m.id                                                      // 158\n        );                                                                 // 159\n      }                                                                    // 160\n                                                                           // 161\n      module.loaded = true;                                                // 162\n    }                                                                      // 163\n                                                                           // 164\n    if (isFunction(module.runModuleSetters)) {                             // 165\n      module.runModuleSetters();                                           // 166\n    }                                                                      // 167\n                                                                           // 168\n    return module.exports;                                                 // 169\n  }                                                                        // 170\n                                                                           // 171\n  function fileIsDirectory(file) {                                         // 172\n    return file && isObject(file.c);                                       // 173\n  }                                                                        // 174\n                                                                           // 175\n  function fileMergeContents(file, contents, options) {                    // 176\n    // If contents is an array of strings and functions, return the last   // 177\n    // function with a `.d` property containing all the strings.           // 178\n    if (Array.isArray(contents)) {                                         // 179\n      var deps = [];                                                       // 180\n                                                                           // 181\n      contents.forEach(function (item) {                                   // 182\n        if (isString(item)) {                                              // 183\n          deps.push(item);                                                 // 184\n        } else if (isFunction(item)) {                                     // 185\n          contents = item;                                                 // 186\n        }                                                                  // 187\n      });                                                                  // 188\n                                                                           // 189\n      if (isFunction(contents)) {                                          // 190\n        contents.d = deps;                                                 // 191\n      } else {                                                             // 192\n        // If the array did not contain a function, merge nothing.         // 193\n        contents = null;                                                   // 194\n      }                                                                    // 195\n                                                                           // 196\n    } else if (isFunction(contents)) {                                     // 197\n      // If contents is already a function, make sure it has `.d`.         // 198\n      contents.d = contents.d || [];                                       // 199\n                                                                           // 200\n    } else if (! isString(contents) &&                                     // 201\n               ! isObject(contents)) {                                     // 202\n      // If contents is neither an array nor a function nor a string nor   // 203\n      // an object, just give up and merge nothing.                        // 204\n      contents = null;                                                     // 205\n    }                                                                      // 206\n                                                                           // 207\n    if (contents) {                                                        // 208\n      file.c = file.c || (isObject(contents) ? {} : contents);             // 209\n      if (isObject(contents) && fileIsDirectory(file)) {                   // 210\n        Object.keys(contents).forEach(function (key) {                     // 211\n          if (key === \"..\") {                                              // 212\n            child = file.p;                                                // 213\n                                                                           // 214\n          } else {                                                         // 215\n            var child = getOwn(file.c, key);                               // 216\n            if (! child) {                                                 // 217\n              child = file.c[key] = new File(                              // 218\n                file.m.id.replace(/\\/*$/, \"/\") + key,                      // 219\n                file                                                       // 220\n              );                                                           // 221\n                                                                           // 222\n              child.o = options;                                           // 223\n            }                                                              // 224\n          }                                                                // 225\n                                                                           // 226\n          fileMergeContents(child, contents[key], options);                // 227\n        });                                                                // 228\n      }                                                                    // 229\n    }                                                                      // 230\n  }                                                                        // 231\n                                                                           // 232\n  function fileGetExtensions(file) {                                       // 233\n    return file.o && file.o.extensions || defaultExtensions;               // 234\n  }                                                                        // 235\n                                                                           // 236\n  function fileAppendIdPart(file, part, extensions) {                      // 237\n    // Always append relative to a directory.                              // 238\n    while (file && ! fileIsDirectory(file)) {                              // 239\n      file = file.p;                                                       // 240\n    }                                                                      // 241\n                                                                           // 242\n    if (! file || ! part || part === \".\") {                                // 243\n      return file;                                                         // 244\n    }                                                                      // 245\n                                                                           // 246\n    if (part === \"..\") {                                                   // 247\n      return file.p;                                                       // 248\n    }                                                                      // 249\n                                                                           // 250\n    var exactChild = getOwn(file.c, part);                                 // 251\n                                                                           // 252\n    // Only consider multiple file extensions if this part is the last     // 253\n    // part of a module identifier and not equal to `.` or `..`, and there\n    // was no exact match or the exact match was a directory.              // 255\n    if (extensions && (! exactChild || fileIsDirectory(exactChild))) {     // 256\n      for (var e = 0; e < extensions.length; ++e) {                        // 257\n        var child = getOwn(file.c, part + extensions[e]);                  // 258\n        if (child) {                                                       // 259\n          return child;                                                    // 260\n        }                                                                  // 261\n      }                                                                    // 262\n    }                                                                      // 263\n                                                                           // 264\n    return exactChild;                                                     // 265\n  }                                                                        // 266\n                                                                           // 267\n  function fileAppendId(file, id, extensions) {                            // 268\n    var parts = id.split(\"/\");                                             // 269\n                                                                           // 270\n    // Use `Array.prototype.every` to terminate iteration early if         // 271\n    // `fileAppendIdPart` returns a falsy value.                           // 272\n    parts.every(function (part, i) {                                       // 273\n      return file = i < parts.length - 1                                   // 274\n        ? fileAppendIdPart(file, part)                                     // 275\n        : fileAppendIdPart(file, part, extensions);                        // 276\n    });                                                                    // 277\n                                                                           // 278\n    return file;                                                           // 279\n  }                                                                        // 280\n                                                                           // 281\n  function fileResolve(file, id, seenDirFiles) {                           // 282\n    var extensions = fileGetExtensions(file);                              // 283\n                                                                           // 284\n    file =                                                                 // 285\n      // Absolute module identifiers (i.e. those that begin with a `/`     // 286\n      // character) are interpreted relative to the root directory, which  // 287\n      // is a slight deviation from Node, which has access to the entire   // 288\n      // file system.                                                      // 289\n      id.charAt(0) === \"/\" ? fileAppendId(root, id, extensions) :          // 290\n      // Relative module identifiers are interpreted relative to the       // 291\n      // current file, naturally.                                          // 292\n      id.charAt(0) === \".\" ? fileAppendId(file, id, extensions) :          // 293\n      // Top-level module identifiers are interpreted as referring to      // 294\n      // packages in `node_modules` directories.                           // 295\n      nodeModulesLookup(file, id, extensions);                             // 296\n                                                                           // 297\n    // If the identifier resolves to a directory, we use the same logic as\n    // Node to find an `index.js` or `package.json` file to evaluate.      // 299\n    while (fileIsDirectory(file)) {                                        // 300\n      seenDirFiles = seenDirFiles || [];                                   // 301\n                                                                           // 302\n      // If the \"main\" field of a `package.json` file resolves to a        // 303\n      // directory we've already considered, then we should not attempt to\n      // read the same `package.json` file again. Using an array as a set  // 305\n      // is acceptable here because the number of directories to consider  // 306\n      // is rarely greater than 1 or 2. Also, using indexOf allows us to   // 307\n      // store File objects instead of strings.                            // 308\n      if (seenDirFiles.indexOf(file) < 0) {                                // 309\n        seenDirFiles.push(file);                                           // 310\n                                                                           // 311\n        var pkgJsonFile = fileAppendIdPart(file, \"package.json\");          // 312\n        var main = pkgJsonFile && fileEvaluate(pkgJsonFile).main;          // 313\n        if (isString(main)) {                                              // 314\n          // The \"main\" field of package.json does not have to begin with  // 315\n          // ./ to be considered relative, so first we try simply          // 316\n          // appending it to the directory path before falling back to a   // 317\n          // full fileResolve, which might return a package from a         // 318\n          // node_modules directory.                                       // 319\n          file = fileAppendId(file, main, extensions) ||                   // 320\n            fileResolve(file, main, seenDirFiles);                         // 321\n                                                                           // 322\n          if (file) {                                                      // 323\n            // The fileAppendId call above may have returned a directory,  // 324\n            // so continue the loop to make sure we resolve it to a        // 325\n            // non-directory file.                                         // 326\n            continue;                                                      // 327\n          }                                                                // 328\n        }                                                                  // 329\n      }                                                                    // 330\n                                                                           // 331\n      // If we didn't find a `package.json` file, or it didn't have a      // 332\n      // resolvable `.main` property, the only possibility left to         // 333\n      // consider is that this directory contains an `index.js` module.    // 334\n      // This assignment almost always terminates the while loop, because  // 335\n      // there's very little chance `fileIsDirectory(file)` will be true   // 336\n      // for the result of `fileAppendIdPart(file, \"index.js\")`. However,  // 337\n      // in principle it is remotely possible that a file called           // 338\n      // `index.js` could be a directory instead of a file.                // 339\n      file = fileAppendIdPart(file, \"index.js\");                           // 340\n    }                                                                      // 341\n                                                                           // 342\n    if (file && isString(file.c)) {                                        // 343\n      file = fileResolve(file, file.c, seenDirFiles);                      // 344\n    }                                                                      // 345\n                                                                           // 346\n    return file;                                                           // 347\n  };                                                                       // 348\n                                                                           // 349\n  function nodeModulesLookup(file, id, extensions) {                       // 350\n    if (isFunction(override)) {                                            // 351\n      id = override(id, file.m.id);                                        // 352\n    }                                                                      // 353\n                                                                           // 354\n    if (isString(id)) {                                                    // 355\n      for (var resolved; file && ! resolved; file = file.p) {              // 356\n        resolved = fileIsDirectory(file) &&                                // 357\n          fileAppendId(file, \"node_modules/\" + id, extensions);            // 358\n      }                                                                    // 359\n                                                                           // 360\n      return resolved;                                                     // 361\n    }                                                                      // 362\n  }                                                                        // 363\n                                                                           // 364\n  return install;                                                          // 365\n};                                                                         // 366\n                                                                           // 367\nif (typeof exports === \"object\") {                                         // 368\n  exports.makeInstaller = makeInstaller;                                   // 369\n}                                                                          // 370\n                                                                           // 371\n/////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////\n//                                                                         //\n// packages/modules-runtime/modules-runtime.js                             //\n//                                                                         //\n/////////////////////////////////////////////////////////////////////////////\n                                                                           //\nvar options = {};                                                          // 1\nvar hasOwn = options.hasOwnProperty;                                       // 2\n                                                                           // 3\n// RegExp matching strings that don't start with a `.` or a `/`.           // 4\nvar topLevelIdPattern = /^[^./]/;                                          // 5\n                                                                           // 6\n// This function will be called whenever a module identifier that hasn't   // 7\n// been installed is required. For backwards compatibility, and so that we\n// can require binary dependencies on the server, we implement the         // 9\n// fallback in terms of Npm.require.                                       // 10\noptions.fallback = function (id, parentId, error) {                        // 11\n  // For simplicity, we honor only top-level module identifiers here.      // 12\n  // We could try to honor relative and absolute module identifiers by     // 13\n  // somehow combining `id` with `dir`, but we'd have to be really careful\n  // that the resulting modules were located in a known directory (not     // 15\n  // some arbitrary location on the file system), and we only really need  // 16\n  // the fallback for dependencies installed in node_modules directories.  // 17\n  if (topLevelIdPattern.test(id)) {                                        // 18\n    if (typeof Npm === \"object\" &&                                         // 19\n        typeof Npm.require === \"function\") {                               // 20\n      return Npm.require(id);                                              // 21\n    }                                                                      // 22\n  }                                                                        // 23\n                                                                           // 24\n  throw error;                                                             // 25\n};                                                                         // 26\n                                                                           // 27\noptions.fallback.resolve = function (id, parentId, error) {                // 28\n  if (Meteor.isServer &&                                                   // 29\n      topLevelIdPattern.test(id)) {                                        // 30\n    // Allow any top-level identifier to resolve to itself on the server,  // 31\n    // so that options.fallback can have a chance to handle it.            // 32\n    return id;                                                             // 33\n  }                                                                        // 34\n                                                                           // 35\n  throw error;                                                             // 36\n};                                                                         // 37\n                                                                           // 38\nmeteorInstall = makeInstaller(options);                                    // 39\nvar Mp = meteorInstall.Module.prototype;                                   // 40\n                                                                           // 41\nif (Meteor.isServer) {                                                     // 42\n  Mp.useNode = function () {                                               // 43\n    if (typeof npmRequire !== \"function\") {                                // 44\n      // Can't use Node if npmRequire is not defined.                      // 45\n      return false;                                                        // 46\n    }                                                                      // 47\n                                                                           // 48\n    var parts = this.id.split(\"/\");                                        // 49\n    var start = 0;                                                         // 50\n    if (parts[start] === \"\") ++start;                                      // 51\n    if (parts[start] === \"node_modules\" &&                                 // 52\n        parts[start + 1] === \"meteor\") {                                   // 53\n      start += 2;                                                          // 54\n    }                                                                      // 55\n                                                                           // 56\n    if (parts.indexOf(\"node_modules\", start) < 0) {                        // 57\n      // Don't try to use Node for modules that aren't in node_modules     // 58\n      // directories.                                                      // 59\n      return false;                                                        // 60\n    }                                                                      // 61\n                                                                           // 62\n    try {                                                                  // 63\n      npmRequire.resolve(this.id);                                         // 64\n    } catch (e) {                                                          // 65\n      return false;                                                        // 66\n    }                                                                      // 67\n                                                                           // 68\n    this.exports = npmRequire(this.id);                                    // 69\n                                                                           // 70\n    return true;                                                           // 71\n  };                                                                       // 72\n}                                                                          // 73\n                                                                           // 74\n/////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['modules-runtime'] = {}, {\n  meteorInstall: meteorInstall\n});\n\n})();\n","servePath":"/packages/modules-runtime.js","sourceMap":{"version":3,"sources":["/packages/modules-runtime/.npm/package/node_modules/install/install.js","/packages/modules-runtime/modules-runtime.js"],"names":[],"mappingsiF;;;;;;;;;;;;;;;;;AClXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gF","file":"/packages/modules-runtime.js","sourcesContent":["makeInstaller = function (options) {\n  options = options || {};\n\n  // These file extensions will be appended to required module identifiers\n  // if they do not exactly match an installed module.\n  var defaultExtensions = options.extensions || [\".js\", \".json\"];\n\n  // If defined, the options.onInstall function will be called any time\n  // new modules are installed.\n  var onInstall = options.onInstall;\n\n  // If defined, the options.override function will be called before\n  // looking up any top-level package identifiers in node_modules\n  // directories. It can either return a string to provide an alternate\n  // package identifier, or a non-string value to prevent the lookup from\n  // proceeding.\n  var override = options.override;\n\n  // If defined, the options.fallback function will be called when no\n  // installed module is found for a required module identifier. Often\n  // options.fallback will be implemented in terms of the native Node\n  // require function, which has the ability to load binary modules.\n  var fallback = options.fallback;\n\n  // Nothing special about MISSING.hasOwnProperty, except that it's fewer\n  // characters than Object.prototype.hasOwnProperty after minification.\n  var hasOwn = {}.hasOwnProperty;\n\n  // The file object representing the root directory of the installed\n  // module tree.\n  var root = new File(\"/\", new File(\"/..\"));\n  var rootRequire = makeRequire(root);\n\n  // Merges the given tree of directories and module factory functions\n  // into the tree of installed modules and returns a require function\n  // that behaves as if called from a module in the root directory.\n  function install(tree, options) {\n    if (isObject(tree)) {\n      fileMergeContents(root, tree, options);\n      if (isFunction(onInstall)) {\n        onInstall(rootRequire);\n      }\n    }\n    return rootRequire;\n  }\n\n  // This constructor will be used to instantiate the module objects\n  // passed to module factory functions (i.e. the third argument after\n  // require and exports), and is exposed as install.Module in case the\n  // caller of makeInstaller wishes to modify Module.prototype.\n  function Module(id) {\n    this.id = id;\n    this.children = [];\n  }\n\n  Module.prototype.resolve = function (id) {\n    return this.require.resolve(id);\n  };\n\n  install.Module = Module;\n\n  function getOwn(obj, key) {\n    return hasOwn.call(obj, key) && obj[key];\n  }\n\n  function isObject(value) {\n    return value && typeof value === \"object\";\n  }\n\n  function isFunction(value) {\n    return typeof value === \"function\";\n  }\n\n  function isString(value) {\n    return typeof value === \"string\";\n  }\n\n  function makeRequire(file) {\n    function require(id) {\n      var result = fileResolve(file, id);\n      if (result) {\n        return fileEvaluate(result, file.m);\n      }\n\n      var error = new Error(\"Cannot find module '\" + id + \"'\");\n\n      if (isFunction(fallback)) {\n        return fallback(\n          id, // The missing module identifier.\n          file.m.id, // The path of the requiring file.\n          error // The error we would have thrown.\n        );\n      }\n\n      throw error;\n    }\n\n    require.resolve = function (id) {\n      var f = fileResolve(file, id);\n      if (f) return f.m.id;\n      var error = new Error(\"Cannot find module '\" + id + \"'\");\n      if (fallback && isFunction(fallback.resolve)) {\n        return fallback.resolve(id, file.m.id, error);\n      }\n      throw error;\n    };\n\n    return require;\n  }\n\n  // File objects represent either directories or modules that have been\n  // installed. When a `File` respresents a directory, its `.c` (contents)\n  // property is an object containing the names of the files (or\n  // directories) that it contains. When a `File` represents a module, its\n  // `.c` property is a function that can be invoked with the appropriate\n  // `(require, exports, module)` arguments to evaluate the module. If the\n  // `.c` property is a string, that string will be resolved as a module\n  // identifier, and the exports of the resulting module will provide the\n  // exports of the original file. The `.p` (parent) property of a File is\n  // either a directory `File` or `null`. Note that a child may claim\n  // another `File` as its parent even if the parent does not have an\n  // entry for that child in its `.c` object.  This is important for\n  // implementing anonymous files, and preventing child modules from using\n  // `../relative/identifier` syntax to examine unrelated modules.\n  function File(name, parent) {\n    var file = this;\n\n    // Link to the parent file.\n    file.p = parent = parent || null;\n\n    // The module object for this File, which will eventually boast an\n    // .exports property when/if the file is evaluated.\n    file.m = new Module(name);\n  }\n\n  function fileEvaluate(file, parentModule) {\n    var contents = file && file.c;\n    var module = file.m;\n\n    if (! hasOwn.call(module, \"exports\")) {\n      if (parentModule) {\n        module.parent = parentModule;\n        var children = parentModule.children;\n        if (Array.isArray(children)) {\n          children.push(module);\n        }\n      }\n\n      // If a Module.prototype.useNode method is defined, give it a chance\n      // to define module.exports based on module.id using Node.\n      if (! isFunction(module.useNode) ||\n          ! module.useNode()) {\n        contents(\n          module.require = module.require || makeRequire(file),\n          module.exports = {},\n          module,\n          file.m.id,\n          file.p.m.id\n        );\n      }\n\n      module.loaded = true;\n    }\n\n    if (isFunction(module.runModuleSetters)) {\n      module.runModuleSetters();\n    }\n\n    return module.exports;\n  }\n\n  function fileIsDirectory(file) {\n    return file && isObject(file.c);\n  }\n\n  function fileMergeContents(file, contents, options) {\n    // If contents is an array of strings and functions, return the last\n    // function with a `.d` property containing all the strings.\n    if (Array.isArray(contents)) {\n      var deps = [];\n\n      contents.forEach(function (item) {\n        if (isString(item)) {\n          deps.push(item);\n        } else if (isFunction(item)) {\n          contents = item;\n        }\n      });\n\n      if (isFunction(contents)) {\n        contents.d = deps;\n      } else {\n        // If the array did not contain a function, merge nothing.\n        contents = null;\n      }\n\n    } else if (isFunction(contents)) {\n      // If contents is already a function, make sure it has `.d`.\n      contents.d = contents.d || [];\n\n    } else if (! isString(contents) &&\n               ! isObject(contents)) {\n      // If contents is neither an array nor a function nor a string nor\n      // an object, just give up and merge nothing.\n      contents = null;\n    }\n\n    if (contents) {\n      file.c = file.c || (isObject(contents) ? {} : contents);\n      if (isObject(contents) && fileIsDirectory(file)) {\n        Object.keys(contents).forEach(function (key) {\n          if (key === \"..\") {\n            child = file.p;\n\n          } else {\n            var child = getOwn(file.c, key);\n            if (! child) {\n              child = file.c[key] = new File(\n                file.m.id.replace(/\\/*$/, \"/\") + key,\n                file\n              );\n\n              child.o = options;\n            }\n          }\n\n          fileMergeContents(child, contents[key], options);\n        });\n      }\n    }\n  }\n\n  function fileGetExtensions(file) {\n    return file.o && file.o.extensions || defaultExtensions;\n  }\n\n  function fileAppendIdPart(file, part, extensions) {\n    // Always append relative to a directory.\n    while (file && ! fileIsDirectory(file)) {\n      file = file.p;\n    }\n\n    if (! file || ! part || part === \".\") {\n      return file;\n    }\n\n    if (part === \"..\") {\n      return file.p;\n    }\n\n    var exactChild = getOwn(file.c, part);\n\n    // Only consider multiple file extensions if this part is the last\n    // part of a module identifier and not equal to `.` or `..`, and there\n    // was no exact match or the exact match was a directory.\n    if (extensions && (! exactChild || fileIsDirectory(exactChild))) {\n      for (var e = 0; e < extensions.length; ++e) {\n        var child = getOwn(file.c, part + extensions[e]);\n        if (child) {\n          return child;\n        }\n      }\n    }\n\n    return exactChild;\n  }\n\n  function fileAppendId(file, id, extensions) {\n    var parts = id.split(\"/\");\n\n    // Use `Array.prototype.every` to terminate iteration early if\n    // `fileAppendIdPart` returns a falsy value.\n    parts.every(function (part, i) {\n      return file = i < parts.length - 1\n        ? fileAppendIdPart(file, part)\n        : fileAppendIdPart(file, part, extensions);\n    });\n\n    return file;\n  }\n\n  function fileResolve(file, id, seenDirFiles) {\n    var extensions = fileGetExtensions(file);\n\n    file =\n      // Absolute module identifiers (i.e. those that begin with a `/`\n      // character) are interpreted relative to the root directory, which\n      // is a slight deviation from Node, which has access to the entire\n      // file system.\n      id.charAt(0) === \"/\" ? fileAppendId(root, id, extensions) :\n      // Relative module identifiers are interpreted relative to the\n      // current file, naturally.\n      id.charAt(0) === \".\" ? fileAppendId(file, id, extensions) :\n      // Top-level module identifiers are interpreted as referring to\n      // packages in `node_modules` directories.\n      nodeModulesLookup(file, id, extensions);\n\n    // If the identifier resolves to a directory, we use the same logic as\n    // Node to find an `index.js` or `package.json` file to evaluate.\n    while (fileIsDirectory(file)) {\n      seenDirFiles = seenDirFiles || [];\n\n      // If the \"main\" field of a `package.json` file resolves to a\n      // directory we've already considered, then we should not attempt to\n      // read the same `package.json` file again. Using an array as a set\n      // is acceptable here because the number of directories to consider\n      // is rarely greater than 1 or 2. Also, using indexOf allows us to\n      // store File objects instead of strings.\n      if (seenDirFiles.indexOf(file) < 0) {\n        seenDirFiles.push(file);\n\n        var pkgJsonFile = fileAppendIdPart(file, \"package.json\");\n        var main = pkgJsonFile && fileEvaluate(pkgJsonFile).main;\n        if (isString(main)) {\n          // The \"main\" field of package.json does not have to begin with\n          // ./ to be considered relative, so first we try simply\n          // appending it to the directory path before falling back to a\n          // full fileResolve, which might return a package from a\n          // node_modules directory.\n          file = fileAppendId(file, main, extensions) ||\n            fileResolve(file, main, seenDirFiles);\n\n          if (file) {\n            // The fileAppendId call above may have returned a directory,\n            // so continue the loop to make sure we resolve it to a\n            // non-directory file.\n            continue;\n          }\n        }\n      }\n\n      // If we didn't find a `package.json` file, or it didn't have a\n      // resolvable `.main` property, the only possibility left to\n      // consider is that this directory contains an `index.js` module.\n      // This assignment almost always terminates the while loop, because\n      // there's very little chance `fileIsDirectory(file)` will be true\n      // for the result of `fileAppendIdPart(file, \"index.js\")`. However,\n      // in principle it is remotely possible that a file called\n      // `index.js` could be a directory instead of a file.\n      file = fileAppendIdPart(file, \"index.js\");\n    }\n\n    if (file && isString(file.c)) {\n      file = fileResolve(file, file.c, seenDirFiles);\n    }\n\n    return file;\n  };\n\n  function nodeModulesLookup(file, id, extensions) {\n    if (isFunction(override)) {\n      id = override(id, file.m.id);\n    }\n\n    if (isString(id)) {\n      for (var resolved; file && ! resolved; file = file.p) {\n        resolved = fileIsDirectory(file) &&\n          fileAppendId(file, \"node_modules/\" + id, extensions);\n      }\n\n      return resolved;\n    }\n  }\n\n  return install;\n};\n\nif (typeof exports === \"object\") {\n  exports.makeInstaller = makeInstaller;\n}\n","var options = {};\nvar hasOwn = options.hasOwnProperty;\n\n// RegExp matching strings that don't start with a `.` or a `/`.\nvar topLevelIdPattern = /^[^./]/;\n\n// This function will be called whenever a module identifier that hasn't\n// been installed is required. For backwards compatibility, and so that we\n// can require binary dependencies on the server, we implement the\n// fallback in terms of Npm.require.\noptions.fallback = function (id, parentId, error) {\n  // For simplicity, we honor only top-level module identifiers here.\n  // We could try to honor relative and absolute module identifiers by\n  // somehow combining `id` with `dir`, but we'd have to be really careful\n  // that the resulting modules were located in a known directory (not\n  // some arbitrary location on the file system), and we only really need\n  // the fallback for dependencies installed in node_modules directories.\n  if (topLevelIdPattern.test(id)) {\n    if (typeof Npm === \"object\" &&\n        typeof Npm.require === \"function\") {\n      return Npm.require(id);\n    }\n  }\n\n  throw error;\n};\n\noptions.fallback.resolve = function (id, parentId, error) {\n  if (Meteor.isServer &&\n      topLevelIdPattern.test(id)) {\n    // Allow any top-level identifier to resolve to itself on the server,\n    // so that options.fallback can have a chance to handle it.\n    return id;\n  }\n\n  throw error;\n};\n\nmeteorInstall = makeInstaller(options);\nvar Mp = meteorInstall.Module.prototype;\n\nif (Meteor.isServer) {\n  Mp.useNode = function () {\n    if (typeof npmRequire !== \"function\") {\n      // Can't use Node if npmRequire is not defined.\n      return false;\n    }\n\n    var parts = this.id.split(\"/\");\n    var start = 0;\n    if (parts[start] === \"\") ++start;\n    if (parts[start] === \"node_modules\" &&\n        parts[start + 1] === \"meteor\") {\n      start += 2;\n    }\n\n    if (parts.indexOf(\"node_modules\", start) < 0) {\n      // Don't try to use Node for modules that aren't in node_modules\n      // directories.\n      return false;\n    }\n\n    try {\n      npmRequire.resolve(this.id);\n    } catch (e) {\n      return false;\n    }\n\n    this.exports = npmRequire(this.id);\n\n    return true;\n  };\n}\n"]}}]