[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar meteorInstall = Package['modules-runtime'].meteorInstall;\n\n/* Package-scope variables */\nvar Buffer, process;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"modules\":{\"client.js\":[\"./install-packages.js\",\"./stubs.js\",\"./buffer.js\",\"./process.js\",\"reify/lib/runtime\",\"./css\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/modules/client.js                                                                                //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nrequire(\"./install-packages.js\");                                                                            // 1\nrequire(\"./stubs.js\");                                                                                       // 2\nrequire(\"./buffer.js\");                                                                                      // 3\nrequire(\"./process.js\");                                                                                     // 4\nrequire(\"reify/lib/runtime\").enable(module.constructor);                                                     // 5\n                                                                                                             // 6\nexports.addStyles = require(\"./css\").addStyles;                                                              // 7\n                                                                                                             // 8\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"buffer.js\":[\"buffer\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/modules/buffer.js                                                                                //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\ntry {                                                                                                        // 1\n  Buffer = global.Buffer || require(\"buffer\").Buffer;                                                        // 2\n} catch (noBuffer) {}                                                                                        // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"css.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/modules/css.js                                                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar doc = document;                                                                                          // 1\nvar head = doc.getElementsByTagName(\"head\").item(0);                                                         // 2\n                                                                                                             // 3\nexports.addStyles = function (css) {                                                                         // 4\n  var style = doc.createElement(\"style\");                                                                    // 5\n                                                                                                             // 6\n  style.setAttribute(\"type\", \"text/css\");                                                                    // 7\n                                                                                                             // 8\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx                                         // 9\n  var internetExplorerSheetObject =                                                                          // 10\n    style.sheet || // Edge/IE11.                                                                             // 11\n    style.styleSheet; // Older IEs.                                                                          // 12\n                                                                                                             // 13\n  if (internetExplorerSheetObject) {                                                                         // 14\n    internetExplorerSheetObject.cssText = css;                                                               // 15\n  } else {                                                                                                   // 16\n    style.appendChild(doc.createTextNode(css));                                                              // 17\n  }                                                                                                          // 18\n                                                                                                             // 19\n  return head.appendChild(style);                                                                            // 20\n};                                                                                                           // 21\n                                                                                                             // 22\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"install-packages.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/modules/install-packages.js                                                                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nfunction install(name, mainModule) {                                                                         // 1\n  var meteorDir = {};                                                                                        // 2\n                                                                                                             // 3\n  // Given a package name <name>, install a stub module in the                                               // 4\n  // /node_modules/meteor directory called <name>.js, so that                                                // 5\n  // require.resolve(\"meteor/<name>\") will always return                                                     // 6\n  // /node_modules/meteor/<name>.js instead of something like                                                // 7\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event                                    // 8\n  // that the package contains a file called index.js (#6590).                                               // 9\n                                                                                                             // 10\n  if (mainModule) {                                                                                          // 11\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {                                   // 12\n      module.exports = require(mainModule);                                                                  // 13\n    }];                                                                                                      // 14\n  } else {                                                                                                   // 15\n    // back compat with old Meteor packages                                                                  // 16\n    meteorDir[name + \".js\"] = function (r, e, module) {                                                      // 17\n      module.exports = Package[name];                                                                        // 18\n    };                                                                                                       // 19\n  }                                                                                                          // 20\n                                                                                                             // 21\n  meteorInstall({                                                                                            // 22\n    node_modules: {                                                                                          // 23\n      meteor: meteorDir                                                                                      // 24\n    }                                                                                                        // 25\n  });                                                                                                        // 26\n}                                                                                                            // 27\n                                                                                                             // 28\n// This file will be modified during computeJsOutputFilesMap to include                                      // 29\n// install(<name>) calls for every Meteor package.                                                           // 30\n                                                                                                             // 31\ninstall(\"underscore\");                                                                                       // 32\ninstall(\"meteor\");                                                                                           // 33\ninstall(\"meteor-base\");                                                                                      // 34\ninstall(\"mobile-experience\");                                                                                // 35\ninstall(\"modules-runtime\");                                                                                  // 36\ninstall(\"modules\", \"meteor/modules/client.js\");                                                              // 37\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");                                                            // 38\ninstall(\"promise\", \"meteor/promise/client.js\");                                                              // 39\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");                                       // 40\ninstall(\"babel-compiler\");                                                                                   // 41\ninstall(\"ecmascript\");                                                                                       // 42\ninstall(\"base64\");                                                                                           // 43\ninstall(\"ejson\");                                                                                            // 44\ninstall(\"id-map\");                                                                                           // 45\ninstall(\"ordered-dict\");                                                                                     // 46\ninstall(\"tracker\");                                                                                          // 47\ninstall(\"babel-runtime\");                                                                                    // 48\ninstall(\"random\");                                                                                           // 49\ninstall(\"mongo-id\");                                                                                         // 50\ninstall(\"diff-sequence\");                                                                                    // 51\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");                                                    // 52\ninstall(\"minimongo\");                                                                                        // 53\ninstall(\"check\", \"meteor/check/match.js\");                                                                   // 54\ninstall(\"retry\");                                                                                            // 55\ninstall(\"ddp-common\");                                                                                       // 56\ninstall(\"reload\");                                                                                           // 57\ninstall(\"ddp-client\");                                                                                       // 58\ninstall(\"ddp\");                                                                                              // 59\ninstall(\"ddp-server\");                                                                                       // 60\ninstall(\"allow-deny\");                                                                                       // 61\ninstall(\"insecure\");                                                                                         // 62\ninstall(\"mongo\");                                                                                            // 63\ninstall(\"blaze-html-templates\");                                                                             // 64\ninstall(\"reactive-var\");                                                                                     // 65\ninstall(\"jquery\", \"meteor/jquery/main.js\");                                                                  // 66\ninstall(\"standard-minifier-css\");                                                                            // 67\ninstall(\"standard-minifier-js\");                                                                             // 68\ninstall(\"autopublish\");                                                                                      // 69\ninstall(\"glittershark:meteor-express\");                                                                      // 70\ninstall(\"yuukan:streamy\");                                                                                   // 71\ninstall(\"webapp\");                                                                                           // 72\ninstall(\"livedata\");                                                                                         // 73\ninstall(\"hot-code-push\");                                                                                    // 74\ninstall(\"deps\");                                                                                             // 75\ninstall(\"htmljs\");                                                                                           // 76\ninstall(\"observe-sequence\");                                                                                 // 77\ninstall(\"blaze\");                                                                                            // 78\ninstall(\"spacebars\");                                                                                        // 79\ninstall(\"templating\");                                                                                       // 80\ninstall(\"launch-screen\");                                                                                    // 81\ninstall(\"ui\");                                                                                               // 82\ninstall(\"autoupdate\");                                                                                       // 83\n                                                                                                             // 84\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"process.js\":[\"process\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/modules/process.js                                                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\ntry {                                                                                                        // 1\n  // The application can run `npm install process` to provide its own                                        // 2\n  // process stub; otherwise this module will provide a partial stub.                                        // 3\n  process = global.process || require(\"process\");                                                            // 4\n} catch (noProcess) {                                                                                        // 5\n  process = {};                                                                                              // 6\n}                                                                                                            // 7\n                                                                                                             // 8\nif (Meteor.isServer) {                                                                                       // 9\n  // Make require(\"process\") work on the server in all versions of Node.                                     // 10\n  meteorInstall({                                                                                            // 11\n    node_modules: {                                                                                          // 12\n      \"process.js\": function (r, e, module) {                                                                // 13\n        module.exports = process;                                                                            // 14\n      }                                                                                                      // 15\n    }                                                                                                        // 16\n  });                                                                                                        // 17\n} else {                                                                                                     // 18\n  process.platform = \"browser\";                                                                              // 19\n  process.nextTick = process.nextTick || Meteor._setImmediate;                                               // 20\n}                                                                                                            // 21\n                                                                                                             // 22\nif (typeof process.env !== \"object\") {                                                                       // 23\n  process.env = {};                                                                                          // 24\n}                                                                                                            // 25\n                                                                                                             // 26\n_.extend(process.env, meteorEnv);                                                                            // 27\n                                                                                                             // 28\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"stubs.js\":[\"meteor-node-stubs\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// packages/modules/stubs.js                                                                                 //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\ntry {                                                                                                        // 1\n  // When meteor-node-stubs is installed in the application's root                                           // 2\n  // node_modules directory, requiring it here installs aliases for stubs                                    // 3\n  // for all Node built-in modules, such as fs, util, and http.                                              // 4\n  require(\"meteor-node-stubs\");                                                                              // 5\n} catch (noStubs) {}                                                                                         // 6\n                                                                                                             // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"reify\":{\"lib\":{\"runtime.js\":[\"./entry.js\",\"./utils.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor/modules/node_modules/reify/lib/runtime.js                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Entry = require(\"./entry.js\").Entry;                                                                     // 1\nvar utils = require(\"./utils.js\");                                                                           // 2\n                                                                                                             // 3\nexports.enable = function (Module) {                                                                         // 4\n  var Mp = Module.prototype;                                                                                 // 5\n                                                                                                             // 6\n  if (typeof Mp.import === \"function\" &&                                                                     // 7\n      typeof Mp.export === \"function\") {                                                                     // 8\n    // If the Mp.{import,export} methods have already been                                                   // 9\n    // defined, abandon reification immediately.                                                             // 10\n    return Module;                                                                                           // 11\n  }                                                                                                          // 12\n                                                                                                             // 13\n  // Platform-specific code should implement this method however                                             // 14\n  // appropriate. Module.prototype.resolve(id) should return an absolute                                     // 15\n  // version of the given module identifier, like require.resolve.                                           // 16\n  Mp.resolve = Mp.resolve || function resolve(id) {                                                          // 17\n    throw new Error(\"Module.prototype.resolve not implemented\");                                             // 18\n  };                                                                                                         // 19\n                                                                                                             // 20\n  // Platform-specific code should find a way to call this method whenever                                   // 21\n  // the module system is about to return module.exports from require. This                                  // 22\n  // might happen more than once per module, in case of dependency cycles,                                   // 23\n  // so we want Module.prototype.runModuleSetters to run each time.                                          // 24\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {                                      // 25\n    var entry = Entry.get(this.id);                                                                          // 26\n    if (entry) {                                                                                             // 27\n      entry.runModuleSetters(this);                                                                          // 28\n    }                                                                                                        // 29\n                                                                                                             // 30\n    // Assignments to exported local variables get wrapped with calls to                                     // 31\n    // module.runModuleSetters, so module.runModuleSetters returns the                                       // 32\n    // valueToPassThrough parameter to allow the value of the original                                       // 33\n    // expression to pass through. For example,                                                              // 34\n    //                                                                                                       // 35\n    //   export var a = 1;                                                                                   // 36\n    //   console.log(a += 3);                                                                                // 37\n    //                                                                                                       // 38\n    // becomes                                                                                               // 39\n    //                                                                                                       // 40\n    //   module.export(\"a\", () => a);                                                                        // 41\n    //   var a = 1;                                                                                          // 42\n    //   console.log(module.runModuleSetters(a += 3));                                                       // 43\n    //                                                                                                       // 44\n    // This ensures module.runModuleSetters runs immediately after the                                       // 45\n    // assignment, and does not interfere with the larger computation.                                       // 46\n    return valueToPassThrough;                                                                               // 47\n  };                                                                                                         // 48\n                                                                                                             // 49\n  function setESModule(module) {                                                                             // 50\n    var exports = module.exports;                                                                            // 51\n    if (exports && typeof exports === \"object\") {                                                            // 52\n      exports.__esModule = true;                                                                             // 53\n    }                                                                                                        // 54\n  }                                                                                                          // 55\n                                                                                                             // 56\n  Mp.import = function (id, setters) {                                                                       // 57\n    var module = this;                                                                                       // 58\n    setESModule(module);                                                                                     // 59\n                                                                                                             // 60\n    var absoluteId = module.resolve(id);                                                                     // 61\n                                                                                                             // 62\n    if (setters && typeof setters === \"object\") {                                                            // 63\n      var entry = Entry.getOrCreate(absoluteId);                                                             // 64\n      entry.addSetters(module, setters);                                                                     // 65\n    }                                                                                                        // 66\n                                                                                                             // 67\n    var countBefore = entry && entry.runCount;                                                               // 68\n    var exports = typeof module.require === \"function\"                                                       // 69\n      ? module.require(absoluteId)                                                                           // 70\n      : require(absoluteId);                                                                                 // 71\n                                                                                                             // 72\n    if (entry && entry.runCount === countBefore) {                                                           // 73\n      // If require(absoluteId) didn't run any setters for this entry,                                       // 74\n      // perhaps because it's not the first time this module has been                                        // 75\n      // required, run the setters now using an object that passes as the                                    // 76\n      // real module object.                                                                                 // 77\n      entry.runModuleSetters({                                                                               // 78\n        id: absoluteId,                                                                                      // 79\n        exports: exports,                                                                                    // 80\n        getExportByName: Mp.getExportByName                                                                  // 81\n      });                                                                                                    // 82\n    }                                                                                                        // 83\n  };                                                                                                         // 84\n                                                                                                             // 85\n  // Register getter functions for local variables in the scope of an                                        // 86\n  // export statement. The keys of the getters object are exported names,                                    // 87\n  // and the values are functions that return local values.                                                  // 88\n  Mp.export = function (getters) {                                                                           // 89\n    var module = this;                                                                                       // 90\n    setESModule(module);                                                                                     // 91\n                                                                                                             // 92\n    if (utils.isPlainObject(getters)) {                                                                      // 93\n      Entry.getOrCreate(module.id).addGetters(getters);                                                      // 94\n    }                                                                                                        // 95\n                                                                                                             // 96\n    if (module.loaded) {                                                                                     // 97\n      // If the module has already been evaluated, then we need to trigger                                   // 98\n      // another round of entry.runModuleSetters calls, which begins by                                      // 99\n      // calling entry.runModuleGetters(module).                                                             // 100\n      module.runModuleSetters();                                                                             // 101\n    }                                                                                                        // 102\n  };                                                                                                         // 103\n                                                                                                             // 104\n  // This method can be overridden by client code to implement custom export                                 // 105\n  // naming logic. The current implementation works well with Babel's                                        // 106\n  // __esModule convention.                                                                                  // 107\n  Mp.getExportByName = function (name) {                                                                     // 108\n    var exports = this.exports;                                                                              // 109\n                                                                                                             // 110\n    if (name === \"*\") {                                                                                      // 111\n      return exports;                                                                                        // 112\n    }                                                                                                        // 113\n                                                                                                             // 114\n    if (name === \"default\" &&                                                                                // 115\n        ! (exports &&                                                                                        // 116\n           typeof exports === \"object\" &&                                                                    // 117\n           exports.__esModule &&                                                                             // 118\n           \"default\" in exports)) {                                                                          // 119\n      return exports;                                                                                        // 120\n    }                                                                                                        // 121\n                                                                                                             // 122\n    return exports && exports[name];                                                                         // 123\n  };                                                                                                         // 124\n                                                                                                             // 125\n  return Module;                                                                                             // 126\n};                                                                                                           // 127\n                                                                                                             // 128\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"entry.js\":[\"./utils.js\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor/modules/node_modules/reify/lib/entry.js                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                // 1\nvar entryMap = Object.create(null);                                                                          // 2\nvar utils = require(\"./utils.js\");                                                                           // 3\n                                                                                                             // 4\nfunction Entry(id) {                                                                                         // 5\n  // Same as module.id for this module.                                                                      // 6\n  this.id = id;                                                                                              // 7\n  // The number of times this.runModuleSetters has been called.                                              // 8\n  this.runCount = 0;                                                                                         // 9\n  // Setters for assigning to local variables in parent modules.                                             // 10\n  this.setters = Object.create(null);                                                                        // 11\n  // Getters for local variables exported from this module.                                                  // 12\n  this.getters = Object.create(null);                                                                        // 13\n}                                                                                                            // 14\n                                                                                                             // 15\nvar Ep = Entry.prototype;                                                                                    // 16\n                                                                                                             // 17\nEntry.get = function (id) {                                                                                  // 18\n  return entryMap[id] || null;                                                                               // 19\n};                                                                                                           // 20\n                                                                                                             // 21\nEntry.getOrCreate = function (id) {                                                                          // 22\n  return entryMap[id] = entryMap[id] || new Entry(id);                                                       // 23\n};                                                                                                           // 24\n                                                                                                             // 25\nEp.addSetters = function (parent, setters) {                                                                 // 26\n  var entry = this;                                                                                          // 27\n                                                                                                             // 28\n  Object.keys(setters).forEach(function (name) {                                                             // 29\n    var setter = setters[name];                                                                              // 30\n    if (typeof setter === \"function\" &&                                                                      // 31\n        // Ignore any requests for the exports.__esModule property.\"                                         // 32\n        name !== \"__esModule\") {                                                                             // 33\n      setter.parent = parent;                                                                                // 34\n      (entry.setters[name] =                                                                                 // 35\n       entry.setters[name] || []                                                                             // 36\n      ).push(setter);                                                                                        // 37\n    }                                                                                                        // 38\n  });                                                                                                        // 39\n};                                                                                                           // 40\n                                                                                                             // 41\nEp.addGetters = function (getters) {                                                                         // 42\n  var entry = this;                                                                                          // 43\n  Object.keys(getters).forEach(function (name) {                                                             // 44\n    var getter = getters[name];                                                                              // 45\n    if (typeof getter === \"function\" &&                                                                      // 46\n        // Ignore any requests for the exports.__esModule property.\"                                         // 47\n        name !== \"__esModule\") {                                                                             // 48\n      // Should this throw if hasOwn.call(this.getters, name)?                                               // 49\n      entry.getters[name] = getter;                                                                          // 50\n    }                                                                                                        // 51\n  });                                                                                                        // 52\n};                                                                                                           // 53\n                                                                                                             // 54\nfunction runModuleSetters(module) {                                                                          // 55\n  var entry = entryMap[module.id];                                                                           // 56\n  if (entry) {                                                                                               // 57\n    entry.runModuleSetters(module);                                                                          // 58\n  }                                                                                                          // 59\n}                                                                                                            // 60\n                                                                                                             // 61\nfunction runModuleGetters(module) {                                                                          // 62\n  var entry = entryMap[module.id];                                                                           // 63\n  return entry ? entry.runModuleGetters(module) : 0;                                                         // 64\n}                                                                                                            // 65\n                                                                                                             // 66\nEp.runModuleGetters = function (module) {                                                                    // 67\n  var entry = this;                                                                                          // 68\n  var changeCount = 0;                                                                                       // 69\n                                                                                                             // 70\n  Object.keys(entry.getters).forEach(function (name) {                                                       // 71\n    if (entry.runGetter(module, name)) {                                                                     // 72\n      ++changeCount;                                                                                         // 73\n    }                                                                                                        // 74\n  });                                                                                                        // 75\n                                                                                                             // 76\n  return changeCount;                                                                                        // 77\n};                                                                                                           // 78\n                                                                                                             // 79\n// Returns true iff the getter updated module.exports with a new value.                                      // 80\nEp.runGetter = function (module, name) {                                                                     // 81\n  if (! hasOwn.call(this.getters, name)) {                                                                   // 82\n    return false;                                                                                            // 83\n  }                                                                                                          // 84\n                                                                                                             // 85\n  var getter = this.getters[name];                                                                           // 86\n  try {                                                                                                      // 87\n    var value = getter.call(module);                                                                         // 88\n  } catch (e) {}                                                                                             // 89\n  var exports = module.exports;                                                                              // 90\n                                                                                                             // 91\n  if (! hasOwn.call(exports, name) ||                                                                        // 92\n      exports[name] !== value) {                                                                             // 93\n    // We update module.exports[name] with the current value so that                                         // 94\n    // CommonJS require calls remain consistent with module.import.                                          // 95\n    exports[name] = value;                                                                                   // 96\n    return true;                                                                                             // 97\n  }                                                                                                          // 98\n                                                                                                             // 99\n  return false;                                                                                              // 100\n};                                                                                                           // 101\n                                                                                                             // 102\n// Called whenever module.exports might have changed, to trigger any                                         // 103\n// setters associated with the newly exported values.                                                        // 104\nEp.runModuleSetters = function (module) {                                                                    // 105\n  var entry = this;                                                                                          // 106\n  var names = Object.keys(entry.setters);                                                                    // 107\n                                                                                                             // 108\n  // Make sure module.exports is up to date before we call                                                   // 109\n  // module.getExportByName(name).                                                                           // 110\n  entry.runModuleGetters(module);                                                                            // 111\n                                                                                                             // 112\n  // Invoke the given callback once for every (setter, value, name) triple                                   // 113\n  // that needs to be called. Note that forEachSetter does not call any                                      // 114\n  // setters itself, only the given callback.                                                                // 115\n  function forEachSetter(callback, context) {                                                                // 116\n    names.forEach(function (name) {                                                                          // 117\n      entry.setters[name].forEach(function (setter) {                                                        // 118\n        var value = module.getExportByName(name);                                                            // 119\n        if (name === \"*\") {                                                                                  // 120\n          Object.keys(value).forEach(function (name) {                                                       // 121\n            call(setter, value[name], name);                                                                 // 122\n          });                                                                                                // 123\n        } else {                                                                                             // 124\n          call(setter, value, name);                                                                         // 125\n        }                                                                                                    // 126\n      });                                                                                                    // 127\n    });                                                                                                      // 128\n                                                                                                             // 129\n    function call(setter, value, name) {                                                                     // 130\n      if (name === \"__esModule\") {                                                                           // 131\n        // Ignore setters asking for module.exports.__esModule.                                              // 132\n        return;                                                                                              // 133\n      }                                                                                                      // 134\n                                                                                                             // 135\n      setter.last = setter.last || Object.create(null);                                                      // 136\n                                                                                                             // 137\n      if (! hasOwn.call(setter.last, name) ||                                                                // 138\n          setter.last[name] !== value) {                                                                     // 139\n        // Only invoke the callback if we have not called this setter                                        // 140\n        // (with a value of this name) before, or the current value is                                       // 141\n        // different from the last value we passed to this setter.                                           // 142\n        return callback.apply(context, arguments);                                                           // 143\n      }                                                                                                      // 144\n    }                                                                                                        // 145\n  }                                                                                                          // 146\n                                                                                                             // 147\n  // Every three elements of this list form a (setter, value, name) triple                                   // 148\n  // that needs to be invoked.                                                                               // 149\n  var settersToCall = [];                                                                                    // 150\n                                                                                                             // 151\n  // Lazily-initialized objects mapping parent module identifiers to                                         // 152\n  // relevant parent module objects and snapshots of their exports.                                          // 153\n  var relevantParents;                                                                                       // 154\n  var parentSnapshots;                                                                                       // 155\n                                                                                                             // 156\n  // Take snapshots of setter.parent.exports for any setters that we are                                     // 157\n  // planning to call, so that we can later determine if calling the                                         // 158\n  // setters modified any of those exports objects.                                                          // 159\n  forEachSetter(function (setter, value, name) {                                                             // 160\n    var parent = setter.parent;                                                                              // 161\n    parentSnapshots = parentSnapshots || Object.create(null);                                                // 162\n    if (! hasOwn.call(parentSnapshots, parent.id)) {                                                         // 163\n      relevantParents = relevantParents || Object.create(null);                                              // 164\n      relevantParents[parent.id] = parent;                                                                   // 165\n      if (utils.isPlainObject(parent.exports)) {                                                             // 166\n        // If parent.exports is an object, make a shallow clone of it so                                     // 167\n        // that we can see if it changes as a result of calling setters.                                     // 168\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);                                       // 169\n      } else {                                                                                               // 170\n        // If parent.exports is not an object, the \"snapshot\" is just the                                    // 171\n        // value of parent.exports.                                                                          // 172\n        parentSnapshots[parent.id] = parent.exports;                                                         // 173\n      }                                                                                                      // 174\n    }                                                                                                        // 175\n                                                                                                             // 176\n    // Push three elements at a time to avoid creating wrapper arrays for                                    // 177\n    // each (setter, value, name) triple. Note the i += 3 below.                                             // 178\n    settersToCall.push(setter, value, name);                                                                 // 179\n  });                                                                                                        // 180\n                                                                                                             // 181\n  // Now call all the setters that we decided we need to call.                                               // 182\n  for (var i = 0; i < settersToCall.length; i += 3) {                                                        // 183\n    var setter = settersToCall[i];                                                                           // 184\n    var value = settersToCall[i + 1];                                                                        // 185\n    var name = settersToCall[i + 2];                                                                         // 186\n    setter.call(module, setter.last[name] = value, name);                                                    // 187\n  }                                                                                                          // 188\n                                                                                                             // 189\n  ++entry.runCount;                                                                                          // 190\n                                                                                                             // 191\n  if (! relevantParents) {                                                                                   // 192\n    // If we never called takeSnapshot, then we can avoid checking                                           // 193\n    // relevantParents and parentSnapshots below.                                                            // 194\n    return;                                                                                                  // 195\n  }                                                                                                          // 196\n                                                                                                             // 197\n  // If any of the setters updated the module.exports of a parent module,                                    // 198\n  // or updated local variables that are exported by that parent module,                                     // 199\n  // then we must re-run any setters registered by that parent module.                                       // 200\n  Object.keys(relevantParents).forEach(function (id) {                                                       // 201\n    var parent = relevantParents[id];                                                                        // 202\n                                                                                                             // 203\n    if (runModuleGetters(parent) > 0) {                                                                      // 204\n      return runModuleSetters(parent);                                                                       // 205\n    }                                                                                                        // 206\n                                                                                                             // 207\n    var exports = parent.exports;                                                                            // 208\n    var snapshot = parentSnapshots[parent.id];                                                               // 209\n    if (utils.shallowObjEqual(exports, snapshot)) {                                                          // 210\n      // If parent.exports have not changed since we took the snapshot,                                      // 211\n      // then we do not need to run the parent's setters.                                                    // 212\n      return;                                                                                                // 213\n    }                                                                                                        // 214\n                                                                                                             // 215\n    runModuleSetters(parent);                                                                                // 216\n  });                                                                                                        // 217\n};                                                                                                           // 218\n                                                                                                             // 219\nexports.Entry = Entry;                                                                                       // 220\n                                                                                                             // 221\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"utils.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor/modules/node_modules/reify/lib/utils.js                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                // 1\nvar objToStr = Object.prototype.toString;                                                                    // 2\nvar objStr = objToStr.call({});                                                                              // 3\n                                                                                                             // 4\nfunction isPlainObject(value) {                                                                              // 5\n  return objToStr.call(value) === objStr;                                                                    // 6\n}                                                                                                            // 7\nexports.isPlainObject = isPlainObject;                                                                       // 8\n                                                                                                             // 9\nexports.assign = Object.assign || function (obj) {                                                           // 10\n  var argc = arguments.length;                                                                               // 11\n  for (var i = 1; i < argc; ++i) {                                                                           // 12\n    var arg = arguments[i];                                                                                  // 13\n    if (arg && typeof arg === \"object\") {                                                                    // 14\n      var keys = Object.keys(arg);                                                                           // 15\n      for (var k = 0; k < keys.length; ++k) {                                                                // 16\n        var key = keys[k];                                                                                   // 17\n        obj[key] = arg[key];                                                                                 // 18\n      }                                                                                                      // 19\n    }                                                                                                        // 20\n  }                                                                                                          // 21\n  return obj;                                                                                                // 22\n};                                                                                                           // 23\n                                                                                                             // 24\nexports.shallowObjEqual = function(a, b) {                                                                   // 25\n  if (a === b) {                                                                                             // 26\n    return true;                                                                                             // 27\n  }                                                                                                          // 28\n                                                                                                             // 29\n  if (! isPlainObject(a) ||                                                                                  // 30\n      ! isPlainObject(b)) {                                                                                  // 31\n    return false;                                                                                            // 32\n  }                                                                                                          // 33\n                                                                                                             // 34\n  var aKeys = Object.keys(a);                                                                                // 35\n  var bKeys = Object.keys(b);                                                                                // 36\n                                                                                                             // 37\n  if (aKeys.length !== bKeys.length) {                                                                       // 38\n    return false;                                                                                            // 39\n  }                                                                                                          // 40\n                                                                                                             // 41\n  return aKeys.every(function (key) {                                                                        // 42\n    return hasOwn.call(b, key) &&                                                                            // 43\n      a[key] === b[key];                                                                                     // 44\n  });                                                                                                        // 45\n};                                                                                                           // 46\n                                                                                                             // 47\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}},\"meteor-node-stubs\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/package.json                                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"meteor-node-stubs\";                                                                          // 1\nexports.version = \"0.2.3\";                                                                                   // 2\nexports.main = \"index.js\";                                                                                   // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"./map.json\",function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/index.js                                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar map = require(\"./map.json\");                                                                             // 1\nvar meteorAliases = {};                                                                                      // 2\n                                                                                                             // 3\nObject.keys(map).forEach(function (id) {                                                                     // 4\n  if (typeof map[id] === \"string\") {                                                                         // 5\n    try {                                                                                                    // 6\n      exports[id] = meteorAliases[id + \".js\"] =                                                              // 7\n        require.resolve(map[id]);                                                                            // 8\n    } catch (e) {                                                                                            // 9\n      // Resolution can fail at runtime if the stub was not included in the                                  // 10\n      // bundle because nothing depended on it.                                                              // 11\n    }                                                                                                        // 12\n  } else {                                                                                                   // 13\n    exports[id] = map[id];                                                                                   // 14\n    meteorAliases[id + \".js\"] = function(){};                                                                // 15\n  }                                                                                                          // 16\n});                                                                                                          // 17\n                                                                                                             // 18\nif (typeof meteorInstall === \"function\") {                                                                   // 19\n  meteorInstall({                                                                                            // 20\n    // Install the aliases into a node_modules directory one level up from                                   // 21\n    // the root directory, so that they do not clutter the namespace                                         // 22\n    // available to apps and packages.                                                                       // 23\n    \"..\": {                                                                                                  // 24\n      node_modules: meteorAliases                                                                            // 25\n    }                                                                                                        // 26\n  });                                                                                                        // 27\n}                                                                                                            // 28\n                                                                                                             // 29\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"map.json\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/map.json                                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.exports = {                                                                                           // 1\n  \"assert\": \"assert/\",                                                                                       // 2\n  \"buffer\": \"buffer/\",                                                                                       // 3\n  \"child_process\": null,                                                                                     // 4\n  \"cluster\": null,                                                                                           // 5\n  \"console\": \"console-browserify\",                                                                           // 6\n  \"constants\": \"constants-browserify\",                                                                       // 7\n  \"crypto\": \"crypto-browserify\",                                                                             // 8\n  \"dgram\": null,                                                                                             // 9\n  \"dns\": null,                                                                                               // 10\n  \"domain\": \"domain-browser\",                                                                                // 11\n  \"events\": \"events/\",                                                                                       // 12\n  \"fs\": null,                                                                                                // 13\n  \"http\": \"http-browserify\",                                                                                 // 14\n  \"https\": \"https-browserify\",                                                                               // 15\n  \"module\": null,                                                                                            // 16\n  \"net\": null,                                                                                               // 17\n  \"os\": \"os-browserify/browser.js\",                                                                          // 18\n  \"path\": \"path-browserify\",                                                                                 // 19\n  \"process\": \"process/browser.js\",                                                                           // 20\n  \"punycode\": \"punycode/\",                                                                                   // 21\n  \"querystring\": \"querystring-es3/\",                                                                         // 22\n  \"readline\": null,                                                                                          // 23\n  \"repl\": null,                                                                                              // 24\n  \"stream\": \"stream-browserify\",                                                                             // 25\n  \"_stream_duplex\": \"readable-stream/duplex.js\",                                                             // 26\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",                                                   // 27\n  \"_stream_readable\": \"readable-stream/readable.js\",                                                         // 28\n  \"_stream_transform\": \"readable-stream/transform.js\",                                                       // 29\n  \"_stream_writable\": \"readable-stream/writable.js\",                                                         // 30\n  \"string_decoder\": \"string_decoder/\",                                                                       // 31\n  \"sys\": \"util/util.js\",                                                                                     // 32\n  \"timers\": \"timers-browserify\",                                                                             // 33\n  \"tls\": null,                                                                                               // 34\n  \"tty\": \"tty-browserify\",                                                                                   // 35\n  \"url\": \"url/\",                                                                                             // 36\n  \"util\": \"util/util.js\",                                                                                    // 37\n  \"vm\": \"vm-browserify\",                                                                                     // 38\n  \"zlib\": \"browserify-zlib\"                                                                                  // 39\n};                                                                                                           // 40\n                                                                                                             // 41\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deps\":{\"buffer.js\":[\"buffer/\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/deps/buffer.js                                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nrequire(\"buffer/\");                                                                                          // 1\n                                                                                                             // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"domain.js\":[\"domain-browser\",function(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/deps/domain.js                                                             //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nrequire(\"domain-browser\");                                                                                   // 1\n                                                                                                             // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"node_modules\":{\"buffer\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/package.json                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"buffer\";                                                                                     // 1\nexports.version = \"4.5.1\";                                                                                   // 2\nexports.main = \"index.js\";                                                                                   // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"base64-js\",\"ieee754\",\"isarray\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/index.js                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n/*!                                                                                                          // 1\n * The buffer module from node.js, for the browser.                                                          // 2\n *                                                                                                           // 3\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>                                     // 4\n * @license  MIT                                                                                             // 5\n */                                                                                                          // 6\n/* eslint-disable no-proto */                                                                                // 7\n                                                                                                             // 8\n'use strict'                                                                                                 // 9\n                                                                                                             // 10\nvar base64 = require('base64-js')                                                                            // 11\nvar ieee754 = require('ieee754')                                                                             // 12\nvar isArray = require('isarray')                                                                             // 13\n                                                                                                             // 14\nexports.Buffer = Buffer                                                                                      // 15\nexports.SlowBuffer = SlowBuffer                                                                              // 16\nexports.INSPECT_MAX_BYTES = 50                                                                               // 17\nBuffer.poolSize = 8192 // not used by this implementation                                                    // 18\n                                                                                                             // 19\nvar rootParent = {}                                                                                          // 20\n                                                                                                             // 21\n/**                                                                                                          // 22\n * If `Buffer.TYPED_ARRAY_SUPPORT`:                                                                          // 23\n *   === true    Use Uint8Array implementation (fastest)                                                     // 24\n *   === false   Use Object implementation (most compatible, even IE6)                                       // 25\n *                                                                                                           // 26\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,                        // 27\n * Opera 11.6+, iOS 4.2+.                                                                                    // 28\n *                                                                                                           // 29\n * Due to various browser bugs, sometimes the Object implementation will be used even                        // 30\n * when the browser supports typed arrays.                                                                   // 31\n *                                                                                                           // 32\n * Note:                                                                                                     // 33\n *                                                                                                           // 34\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,                       // 35\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.                                             // 36\n *                                                                                                           // 37\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.                                  // 38\n *                                                                                                           // 39\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of                    // 40\n *     incorrect length in some situations.                                                                  // 41\n                                                                                                             // 42\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they                    // 43\n * get the Object implementation, which is slower but behaves correctly.                                     // 44\n */                                                                                                          // 45\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined                                        // 46\n  ? global.TYPED_ARRAY_SUPPORT                                                                               // 47\n  : typedArraySupport()                                                                                      // 48\n                                                                                                             // 49\nfunction typedArraySupport () {                                                                              // 50\n  try {                                                                                                      // 51\n    var arr = new Uint8Array(1)                                                                              // 52\n    arr.foo = function () { return 42 }                                                                      // 53\n    return arr.foo() === 42 && // typed array instances can be augmented                                     // 54\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`                                 // 55\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`                                    // 56\n  } catch (e) {                                                                                              // 57\n    return false                                                                                             // 58\n  }                                                                                                          // 59\n}                                                                                                            // 60\n                                                                                                             // 61\nfunction kMaxLength () {                                                                                     // 62\n  return Buffer.TYPED_ARRAY_SUPPORT                                                                          // 63\n    ? 0x7fffffff                                                                                             // 64\n    : 0x3fffffff                                                                                             // 65\n}                                                                                                            // 66\n                                                                                                             // 67\n/**                                                                                                          // 68\n * The Buffer constructor returns instances of `Uint8Array` that have their                                  // 69\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of                           // 70\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods                           // 71\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it                             // 72\n * returns a single octet.                                                                                   // 73\n *                                                                                                           // 74\n * The `Uint8Array` prototype remains unmodified.                                                            // 75\n */                                                                                                          // 76\nfunction Buffer (arg) {                                                                                      // 77\n  if (!(this instanceof Buffer)) {                                                                           // 78\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.                                 // 79\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])                                           // 80\n    return new Buffer(arg)                                                                                   // 81\n  }                                                                                                          // 82\n                                                                                                             // 83\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                         // 84\n    this.length = 0                                                                                          // 85\n    this.parent = undefined                                                                                  // 86\n  }                                                                                                          // 87\n                                                                                                             // 88\n  // Common case.                                                                                            // 89\n  if (typeof arg === 'number') {                                                                             // 90\n    return fromNumber(this, arg)                                                                             // 91\n  }                                                                                                          // 92\n                                                                                                             // 93\n  // Slightly less common case.                                                                              // 94\n  if (typeof arg === 'string') {                                                                             // 95\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')                               // 96\n  }                                                                                                          // 97\n                                                                                                             // 98\n  // Unusual.                                                                                                // 99\n  return fromObject(this, arg)                                                                               // 100\n}                                                                                                            // 101\n                                                                                                             // 102\n// TODO: Legacy, not needed anymore. Remove in next major version.                                           // 103\nBuffer._augment = function (arr) {                                                                           // 104\n  arr.__proto__ = Buffer.prototype                                                                           // 105\n  return arr                                                                                                 // 106\n}                                                                                                            // 107\n                                                                                                             // 108\nfunction fromNumber (that, length) {                                                                         // 109\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)                                                // 110\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {                                                                         // 111\n    for (var i = 0; i < length; i++) {                                                                       // 112\n      that[i] = 0                                                                                            // 113\n    }                                                                                                        // 114\n  }                                                                                                          // 115\n  return that                                                                                                // 116\n}                                                                                                            // 117\n                                                                                                             // 118\nfunction fromString (that, string, encoding) {                                                               // 119\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'                                     // 120\n                                                                                                             // 121\n  // Assumption: byteLength() return value is always < kMaxLength.                                           // 122\n  var length = byteLength(string, encoding) | 0                                                              // 123\n  that = allocate(that, length)                                                                              // 124\n                                                                                                             // 125\n  that.write(string, encoding)                                                                               // 126\n  return that                                                                                                // 127\n}                                                                                                            // 128\n                                                                                                             // 129\nfunction fromObject (that, object) {                                                                         // 130\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)                                               // 131\n                                                                                                             // 132\n  if (isArray(object)) return fromArray(that, object)                                                        // 133\n                                                                                                             // 134\n  if (object == null) {                                                                                      // 135\n    throw new TypeError('must start with number, buffer, array or string')                                   // 136\n  }                                                                                                          // 137\n                                                                                                             // 138\n  if (typeof ArrayBuffer !== 'undefined') {                                                                  // 139\n    if (object.buffer instanceof ArrayBuffer) {                                                              // 140\n      return fromTypedArray(that, object)                                                                    // 141\n    }                                                                                                        // 142\n    if (object instanceof ArrayBuffer) {                                                                     // 143\n      return fromArrayBuffer(that, object)                                                                   // 144\n    }                                                                                                        // 145\n  }                                                                                                          // 146\n                                                                                                             // 147\n  if (object.length) return fromArrayLike(that, object)                                                      // 148\n                                                                                                             // 149\n  return fromJsonObject(that, object)                                                                        // 150\n}                                                                                                            // 151\n                                                                                                             // 152\nfunction fromBuffer (that, buffer) {                                                                         // 153\n  var length = checked(buffer.length) | 0                                                                    // 154\n  that = allocate(that, length)                                                                              // 155\n  buffer.copy(that, 0, 0, length)                                                                            // 156\n  return that                                                                                                // 157\n}                                                                                                            // 158\n                                                                                                             // 159\nfunction fromArray (that, array) {                                                                           // 160\n  var length = checked(array.length) | 0                                                                     // 161\n  that = allocate(that, length)                                                                              // 162\n  for (var i = 0; i < length; i += 1) {                                                                      // 163\n    that[i] = array[i] & 255                                                                                 // 164\n  }                                                                                                          // 165\n  return that                                                                                                // 166\n}                                                                                                            // 167\n                                                                                                             // 168\n// Duplicate of fromArray() to keep fromArray() monomorphic.                                                 // 169\nfunction fromTypedArray (that, array) {                                                                      // 170\n  var length = checked(array.length) | 0                                                                     // 171\n  that = allocate(that, length)                                                                              // 172\n  // Truncating the elements is probably not what people expect from typed                                   // 173\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior                                 // 174\n  // of the old Buffer constructor.                                                                          // 175\n  for (var i = 0; i < length; i += 1) {                                                                      // 176\n    that[i] = array[i] & 255                                                                                 // 177\n  }                                                                                                          // 178\n  return that                                                                                                // 179\n}                                                                                                            // 180\n                                                                                                             // 181\nfunction fromArrayBuffer (that, array) {                                                                     // 182\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer                                      // 183\n                                                                                                             // 184\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 185\n    // Return an augmented `Uint8Array` instance, for best performance                                       // 186\n    that = new Uint8Array(array)                                                                             // 187\n    that.__proto__ = Buffer.prototype                                                                        // 188\n  } else {                                                                                                   // 189\n    // Fallback: Return an object instance of the Buffer class                                               // 190\n    that = fromTypedArray(that, new Uint8Array(array))                                                       // 191\n  }                                                                                                          // 192\n  return that                                                                                                // 193\n}                                                                                                            // 194\n                                                                                                             // 195\nfunction fromArrayLike (that, array) {                                                                       // 196\n  var length = checked(array.length) | 0                                                                     // 197\n  that = allocate(that, length)                                                                              // 198\n  for (var i = 0; i < length; i += 1) {                                                                      // 199\n    that[i] = array[i] & 255                                                                                 // 200\n  }                                                                                                          // 201\n  return that                                                                                                // 202\n}                                                                                                            // 203\n                                                                                                             // 204\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.                                   // 205\n// Returns a zero-length buffer for inputs that don't conform to the spec.                                   // 206\nfunction fromJsonObject (that, object) {                                                                     // 207\n  var array                                                                                                  // 208\n  var length = 0                                                                                             // 209\n                                                                                                             // 210\n  if (object.type === 'Buffer' && isArray(object.data)) {                                                    // 211\n    array = object.data                                                                                      // 212\n    length = checked(array.length) | 0                                                                       // 213\n  }                                                                                                          // 214\n  that = allocate(that, length)                                                                              // 215\n                                                                                                             // 216\n  for (var i = 0; i < length; i += 1) {                                                                      // 217\n    that[i] = array[i] & 255                                                                                 // 218\n  }                                                                                                          // 219\n  return that                                                                                                // 220\n}                                                                                                            // 221\n                                                                                                             // 222\nif (Buffer.TYPED_ARRAY_SUPPORT) {                                                                            // 223\n  Buffer.prototype.__proto__ = Uint8Array.prototype                                                          // 224\n  Buffer.__proto__ = Uint8Array                                                                              // 225\n  if (typeof Symbol !== 'undefined' && Symbol.species &&                                                     // 226\n      Buffer[Symbol.species] === Buffer) {                                                                   // 227\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97                               // 228\n    Object.defineProperty(Buffer, Symbol.species, {                                                          // 229\n      value: null,                                                                                           // 230\n      configurable: true                                                                                     // 231\n    })                                                                                                       // 232\n  }                                                                                                          // 233\n} else {                                                                                                     // 234\n  // pre-set for values that may exist in the future                                                         // 235\n  Buffer.prototype.length = undefined                                                                        // 236\n  Buffer.prototype.parent = undefined                                                                        // 237\n}                                                                                                            // 238\n                                                                                                             // 239\nfunction allocate (that, length) {                                                                           // 240\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 241\n    // Return an augmented `Uint8Array` instance, for best performance                                       // 242\n    that = new Uint8Array(length)                                                                            // 243\n    that.__proto__ = Buffer.prototype                                                                        // 244\n  } else {                                                                                                   // 245\n    // Fallback: Return an object instance of the Buffer class                                               // 246\n    that.length = length                                                                                     // 247\n  }                                                                                                          // 248\n                                                                                                             // 249\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1                                             // 250\n  if (fromPool) that.parent = rootParent                                                                     // 251\n                                                                                                             // 252\n  return that                                                                                                // 253\n}                                                                                                            // 254\n                                                                                                             // 255\nfunction checked (length) {                                                                                  // 256\n  // Note: cannot use `length < kMaxLength` here because that fails when                                     // 257\n  // length is NaN (which is otherwise coerced to zero.)                                                     // 258\n  if (length >= kMaxLength()) {                                                                              // 259\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +                                 // 260\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')                                  // 261\n  }                                                                                                          // 262\n  return length | 0                                                                                          // 263\n}                                                                                                            // 264\n                                                                                                             // 265\nfunction SlowBuffer (subject, encoding) {                                                                    // 266\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)                                // 267\n                                                                                                             // 268\n  var buf = new Buffer(subject, encoding)                                                                    // 269\n  delete buf.parent                                                                                          // 270\n  return buf                                                                                                 // 271\n}                                                                                                            // 272\n                                                                                                             // 273\nBuffer.isBuffer = function isBuffer (b) {                                                                    // 274\n  return !!(b != null && b._isBuffer)                                                                        // 275\n}                                                                                                            // 276\n                                                                                                             // 277\nBuffer.compare = function compare (a, b) {                                                                   // 278\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {                                                          // 279\n    throw new TypeError('Arguments must be Buffers')                                                         // 280\n  }                                                                                                          // 281\n                                                                                                             // 282\n  if (a === b) return 0                                                                                      // 283\n                                                                                                             // 284\n  var x = a.length                                                                                           // 285\n  var y = b.length                                                                                           // 286\n                                                                                                             // 287\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {                                                      // 288\n    if (a[i] !== b[i]) {                                                                                     // 289\n      x = a[i]                                                                                               // 290\n      y = b[i]                                                                                               // 291\n      break                                                                                                  // 292\n    }                                                                                                        // 293\n  }                                                                                                          // 294\n                                                                                                             // 295\n  if (x < y) return -1                                                                                       // 296\n  if (y < x) return 1                                                                                        // 297\n  return 0                                                                                                   // 298\n}                                                                                                            // 299\n                                                                                                             // 300\nBuffer.isEncoding = function isEncoding (encoding) {                                                         // 301\n  switch (String(encoding).toLowerCase()) {                                                                  // 302\n    case 'hex':                                                                                              // 303\n    case 'utf8':                                                                                             // 304\n    case 'utf-8':                                                                                            // 305\n    case 'ascii':                                                                                            // 306\n    case 'binary':                                                                                           // 307\n    case 'base64':                                                                                           // 308\n    case 'raw':                                                                                              // 309\n    case 'ucs2':                                                                                             // 310\n    case 'ucs-2':                                                                                            // 311\n    case 'utf16le':                                                                                          // 312\n    case 'utf-16le':                                                                                         // 313\n      return true                                                                                            // 314\n    default:                                                                                                 // 315\n      return false                                                                                           // 316\n  }                                                                                                          // 317\n}                                                                                                            // 318\n                                                                                                             // 319\nBuffer.concat = function concat (list, length) {                                                             // 320\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')                      // 321\n                                                                                                             // 322\n  if (list.length === 0) {                                                                                   // 323\n    return new Buffer(0)                                                                                     // 324\n  }                                                                                                          // 325\n                                                                                                             // 326\n  var i                                                                                                      // 327\n  if (length === undefined) {                                                                                // 328\n    length = 0                                                                                               // 329\n    for (i = 0; i < list.length; i++) {                                                                      // 330\n      length += list[i].length                                                                               // 331\n    }                                                                                                        // 332\n  }                                                                                                          // 333\n                                                                                                             // 334\n  var buf = new Buffer(length)                                                                               // 335\n  var pos = 0                                                                                                // 336\n  for (i = 0; i < list.length; i++) {                                                                        // 337\n    var item = list[i]                                                                                       // 338\n    item.copy(buf, pos)                                                                                      // 339\n    pos += item.length                                                                                       // 340\n  }                                                                                                          // 341\n  return buf                                                                                                 // 342\n}                                                                                                            // 343\n                                                                                                             // 344\nfunction byteLength (string, encoding) {                                                                     // 345\n  if (typeof string !== 'string') string = '' + string                                                       // 346\n                                                                                                             // 347\n  var len = string.length                                                                                    // 348\n  if (len === 0) return 0                                                                                    // 349\n                                                                                                             // 350\n  // Use a for loop to avoid recursion                                                                       // 351\n  var loweredCase = false                                                                                    // 352\n  for (;;) {                                                                                                 // 353\n    switch (encoding) {                                                                                      // 354\n      case 'ascii':                                                                                          // 355\n      case 'binary':                                                                                         // 356\n      // Deprecated                                                                                          // 357\n      case 'raw':                                                                                            // 358\n      case 'raws':                                                                                           // 359\n        return len                                                                                           // 360\n      case 'utf8':                                                                                           // 361\n      case 'utf-8':                                                                                          // 362\n        return utf8ToBytes(string).length                                                                    // 363\n      case 'ucs2':                                                                                           // 364\n      case 'ucs-2':                                                                                          // 365\n      case 'utf16le':                                                                                        // 366\n      case 'utf-16le':                                                                                       // 367\n        return len * 2                                                                                       // 368\n      case 'hex':                                                                                            // 369\n        return len >>> 1                                                                                     // 370\n      case 'base64':                                                                                         // 371\n        return base64ToBytes(string).length                                                                  // 372\n      default:                                                                                               // 373\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8                                    // 374\n        encoding = ('' + encoding).toLowerCase()                                                             // 375\n        loweredCase = true                                                                                   // 376\n    }                                                                                                        // 377\n  }                                                                                                          // 378\n}                                                                                                            // 379\nBuffer.byteLength = byteLength                                                                               // 380\n                                                                                                             // 381\nfunction slowToString (encoding, start, end) {                                                               // 382\n  var loweredCase = false                                                                                    // 383\n                                                                                                             // 384\n  start = start | 0                                                                                          // 385\n  end = end === undefined || end === Infinity ? this.length : end | 0                                        // 386\n                                                                                                             // 387\n  if (!encoding) encoding = 'utf8'                                                                           // 388\n  if (start < 0) start = 0                                                                                   // 389\n  if (end > this.length) end = this.length                                                                   // 390\n  if (end <= start) return ''                                                                                // 391\n                                                                                                             // 392\n  while (true) {                                                                                             // 393\n    switch (encoding) {                                                                                      // 394\n      case 'hex':                                                                                            // 395\n        return hexSlice(this, start, end)                                                                    // 396\n                                                                                                             // 397\n      case 'utf8':                                                                                           // 398\n      case 'utf-8':                                                                                          // 399\n        return utf8Slice(this, start, end)                                                                   // 400\n                                                                                                             // 401\n      case 'ascii':                                                                                          // 402\n        return asciiSlice(this, start, end)                                                                  // 403\n                                                                                                             // 404\n      case 'binary':                                                                                         // 405\n        return binarySlice(this, start, end)                                                                 // 406\n                                                                                                             // 407\n      case 'base64':                                                                                         // 408\n        return base64Slice(this, start, end)                                                                 // 409\n                                                                                                             // 410\n      case 'ucs2':                                                                                           // 411\n      case 'ucs-2':                                                                                          // 412\n      case 'utf16le':                                                                                        // 413\n      case 'utf-16le':                                                                                       // 414\n        return utf16leSlice(this, start, end)                                                                // 415\n                                                                                                             // 416\n      default:                                                                                               // 417\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                // 418\n        encoding = (encoding + '').toLowerCase()                                                             // 419\n        loweredCase = true                                                                                   // 420\n    }                                                                                                        // 421\n  }                                                                                                          // 422\n}                                                                                                            // 423\n                                                                                                             // 424\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect                       // 425\n// Buffer instances.                                                                                         // 426\nBuffer.prototype._isBuffer = true                                                                            // 427\n                                                                                                             // 428\nBuffer.prototype.toString = function toString () {                                                           // 429\n  var length = this.length | 0                                                                               // 430\n  if (length === 0) return ''                                                                                // 431\n  if (arguments.length === 0) return utf8Slice(this, 0, length)                                              // 432\n  return slowToString.apply(this, arguments)                                                                 // 433\n}                                                                                                            // 434\n                                                                                                             // 435\nBuffer.prototype.equals = function equals (b) {                                                              // 436\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                  // 437\n  if (this === b) return true                                                                                // 438\n  return Buffer.compare(this, b) === 0                                                                       // 439\n}                                                                                                            // 440\n                                                                                                             // 441\nBuffer.prototype.inspect = function inspect () {                                                             // 442\n  var str = ''                                                                                               // 443\n  var max = exports.INSPECT_MAX_BYTES                                                                        // 444\n  if (this.length > 0) {                                                                                     // 445\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')                                              // 446\n    if (this.length > max) str += ' ... '                                                                    // 447\n  }                                                                                                          // 448\n  return '<Buffer ' + str + '>'                                                                              // 449\n}                                                                                                            // 450\n                                                                                                             // 451\nBuffer.prototype.compare = function compare (b) {                                                            // 452\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')                                  // 453\n  return Buffer.compare(this, b)                                                                             // 454\n}                                                                                                            // 455\n                                                                                                             // 456\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {                                              // 457\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff                                                       // 458\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000                                                // 459\n  byteOffset >>= 0                                                                                           // 460\n                                                                                                             // 461\n  if (this.length === 0) return -1                                                                           // 462\n  if (byteOffset >= this.length) return -1                                                                   // 463\n                                                                                                             // 464\n  // Negative offsets start from the end of the buffer                                                       // 465\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)                                     // 466\n                                                                                                             // 467\n  if (typeof val === 'string') {                                                                             // 468\n    if (val.length === 0) return -1 // special case: looking for empty string always fails                   // 469\n    return String.prototype.indexOf.call(this, val, byteOffset)                                              // 470\n  }                                                                                                          // 471\n  if (Buffer.isBuffer(val)) {                                                                                // 472\n    return arrayIndexOf(this, val, byteOffset)                                                               // 473\n  }                                                                                                          // 474\n  if (typeof val === 'number') {                                                                             // 475\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {                         // 476\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)                                        // 477\n    }                                                                                                        // 478\n    return arrayIndexOf(this, [ val ], byteOffset)                                                           // 479\n  }                                                                                                          // 480\n                                                                                                             // 481\n  function arrayIndexOf (arr, val, byteOffset) {                                                             // 482\n    var foundIndex = -1                                                                                      // 483\n    for (var i = 0; byteOffset + i < arr.length; i++) {                                                      // 484\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {                             // 485\n        if (foundIndex === -1) foundIndex = i                                                                // 486\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex                                // 487\n      } else {                                                                                               // 488\n        foundIndex = -1                                                                                      // 489\n      }                                                                                                      // 490\n    }                                                                                                        // 491\n    return -1                                                                                                // 492\n  }                                                                                                          // 493\n                                                                                                             // 494\n  throw new TypeError('val must be string, number or Buffer')                                                // 495\n}                                                                                                            // 496\n                                                                                                             // 497\nfunction hexWrite (buf, string, offset, length) {                                                            // 498\n  offset = Number(offset) || 0                                                                               // 499\n  var remaining = buf.length - offset                                                                        // 500\n  if (!length) {                                                                                             // 501\n    length = remaining                                                                                       // 502\n  } else {                                                                                                   // 503\n    length = Number(length)                                                                                  // 504\n    if (length > remaining) {                                                                                // 505\n      length = remaining                                                                                     // 506\n    }                                                                                                        // 507\n  }                                                                                                          // 508\n                                                                                                             // 509\n  // must be an even number of digits                                                                        // 510\n  var strLen = string.length                                                                                 // 511\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')                                                // 512\n                                                                                                             // 513\n  if (length > strLen / 2) {                                                                                 // 514\n    length = strLen / 2                                                                                      // 515\n  }                                                                                                          // 516\n  for (var i = 0; i < length; i++) {                                                                         // 517\n    var parsed = parseInt(string.substr(i * 2, 2), 16)                                                       // 518\n    if (isNaN(parsed)) throw new Error('Invalid hex string')                                                 // 519\n    buf[offset + i] = parsed                                                                                 // 520\n  }                                                                                                          // 521\n  return i                                                                                                   // 522\n}                                                                                                            // 523\n                                                                                                             // 524\nfunction utf8Write (buf, string, offset, length) {                                                           // 525\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)                           // 526\n}                                                                                                            // 527\n                                                                                                             // 528\nfunction asciiWrite (buf, string, offset, length) {                                                          // 529\n  return blitBuffer(asciiToBytes(string), buf, offset, length)                                               // 530\n}                                                                                                            // 531\n                                                                                                             // 532\nfunction binaryWrite (buf, string, offset, length) {                                                         // 533\n  return asciiWrite(buf, string, offset, length)                                                             // 534\n}                                                                                                            // 535\n                                                                                                             // 536\nfunction base64Write (buf, string, offset, length) {                                                         // 537\n  return blitBuffer(base64ToBytes(string), buf, offset, length)                                              // 538\n}                                                                                                            // 539\n                                                                                                             // 540\nfunction ucs2Write (buf, string, offset, length) {                                                           // 541\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)                        // 542\n}                                                                                                            // 543\n                                                                                                             // 544\nBuffer.prototype.write = function write (string, offset, length, encoding) {                                 // 545\n  // Buffer#write(string)                                                                                    // 546\n  if (offset === undefined) {                                                                                // 547\n    encoding = 'utf8'                                                                                        // 548\n    length = this.length                                                                                     // 549\n    offset = 0                                                                                               // 550\n  // Buffer#write(string, encoding)                                                                          // 551\n  } else if (length === undefined && typeof offset === 'string') {                                           // 552\n    encoding = offset                                                                                        // 553\n    length = this.length                                                                                     // 554\n    offset = 0                                                                                               // 555\n  // Buffer#write(string, offset[, length][, encoding])                                                      // 556\n  } else if (isFinite(offset)) {                                                                             // 557\n    offset = offset | 0                                                                                      // 558\n    if (isFinite(length)) {                                                                                  // 559\n      length = length | 0                                                                                    // 560\n      if (encoding === undefined) encoding = 'utf8'                                                          // 561\n    } else {                                                                                                 // 562\n      encoding = length                                                                                      // 563\n      length = undefined                                                                                     // 564\n    }                                                                                                        // 565\n  // legacy write(string, encoding, offset, length) - remove in v0.13                                        // 566\n  } else {                                                                                                   // 567\n    var swap = encoding                                                                                      // 568\n    encoding = offset                                                                                        // 569\n    offset = length | 0                                                                                      // 570\n    length = swap                                                                                            // 571\n  }                                                                                                          // 572\n                                                                                                             // 573\n  var remaining = this.length - offset                                                                       // 574\n  if (length === undefined || length > remaining) length = remaining                                         // 575\n                                                                                                             // 576\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {                           // 577\n    throw new RangeError('attempt to write outside buffer bounds')                                           // 578\n  }                                                                                                          // 579\n                                                                                                             // 580\n  if (!encoding) encoding = 'utf8'                                                                           // 581\n                                                                                                             // 582\n  var loweredCase = false                                                                                    // 583\n  for (;;) {                                                                                                 // 584\n    switch (encoding) {                                                                                      // 585\n      case 'hex':                                                                                            // 586\n        return hexWrite(this, string, offset, length)                                                        // 587\n                                                                                                             // 588\n      case 'utf8':                                                                                           // 589\n      case 'utf-8':                                                                                          // 590\n        return utf8Write(this, string, offset, length)                                                       // 591\n                                                                                                             // 592\n      case 'ascii':                                                                                          // 593\n        return asciiWrite(this, string, offset, length)                                                      // 594\n                                                                                                             // 595\n      case 'binary':                                                                                         // 596\n        return binaryWrite(this, string, offset, length)                                                     // 597\n                                                                                                             // 598\n      case 'base64':                                                                                         // 599\n        // Warning: maxLength not taken into account in base64Write                                          // 600\n        return base64Write(this, string, offset, length)                                                     // 601\n                                                                                                             // 602\n      case 'ucs2':                                                                                           // 603\n      case 'ucs-2':                                                                                          // 604\n      case 'utf16le':                                                                                        // 605\n      case 'utf-16le':                                                                                       // 606\n        return ucs2Write(this, string, offset, length)                                                       // 607\n                                                                                                             // 608\n      default:                                                                                               // 609\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)                                // 610\n        encoding = ('' + encoding).toLowerCase()                                                             // 611\n        loweredCase = true                                                                                   // 612\n    }                                                                                                        // 613\n  }                                                                                                          // 614\n}                                                                                                            // 615\n                                                                                                             // 616\nBuffer.prototype.toJSON = function toJSON () {                                                               // 617\n  return {                                                                                                   // 618\n    type: 'Buffer',                                                                                          // 619\n    data: Array.prototype.slice.call(this._arr || this, 0)                                                   // 620\n  }                                                                                                          // 621\n}                                                                                                            // 622\n                                                                                                             // 623\nfunction base64Slice (buf, start, end) {                                                                     // 624\n  if (start === 0 && end === buf.length) {                                                                   // 625\n    return base64.fromByteArray(buf)                                                                         // 626\n  } else {                                                                                                   // 627\n    return base64.fromByteArray(buf.slice(start, end))                                                       // 628\n  }                                                                                                          // 629\n}                                                                                                            // 630\n                                                                                                             // 631\nfunction utf8Slice (buf, start, end) {                                                                       // 632\n  end = Math.min(buf.length, end)                                                                            // 633\n  var res = []                                                                                               // 634\n                                                                                                             // 635\n  var i = start                                                                                              // 636\n  while (i < end) {                                                                                          // 637\n    var firstByte = buf[i]                                                                                   // 638\n    var codePoint = null                                                                                     // 639\n    var bytesPerSequence = (firstByte > 0xEF) ? 4                                                            // 640\n      : (firstByte > 0xDF) ? 3                                                                               // 641\n      : (firstByte > 0xBF) ? 2                                                                               // 642\n      : 1                                                                                                    // 643\n                                                                                                             // 644\n    if (i + bytesPerSequence <= end) {                                                                       // 645\n      var secondByte, thirdByte, fourthByte, tempCodePoint                                                   // 646\n                                                                                                             // 647\n      switch (bytesPerSequence) {                                                                            // 648\n        case 1:                                                                                              // 649\n          if (firstByte < 0x80) {                                                                            // 650\n            codePoint = firstByte                                                                            // 651\n          }                                                                                                  // 652\n          break                                                                                              // 653\n        case 2:                                                                                              // 654\n          secondByte = buf[i + 1]                                                                            // 655\n          if ((secondByte & 0xC0) === 0x80) {                                                                // 656\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)                                  // 657\n            if (tempCodePoint > 0x7F) {                                                                      // 658\n              codePoint = tempCodePoint                                                                      // 659\n            }                                                                                                // 660\n          }                                                                                                  // 661\n          break                                                                                              // 662\n        case 3:                                                                                              // 663\n          secondByte = buf[i + 1]                                                                            // 664\n          thirdByte = buf[i + 2]                                                                             // 665\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {                                 // 666\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)       // 667\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {               // 668\n              codePoint = tempCodePoint                                                                      // 669\n            }                                                                                                // 670\n          }                                                                                                  // 671\n          break                                                                                              // 672\n        case 4:                                                                                              // 673\n          secondByte = buf[i + 1]                                                                            // 674\n          thirdByte = buf[i + 2]                                                                             // 675\n          fourthByte = buf[i + 3]                                                                            // 676\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {                                        // 679\n              codePoint = tempCodePoint                                                                      // 680\n            }                                                                                                // 681\n          }                                                                                                  // 682\n      }                                                                                                      // 683\n    }                                                                                                        // 684\n                                                                                                             // 685\n    if (codePoint === null) {                                                                                // 686\n      // we did not generate a valid codePoint so insert a                                                   // 687\n      // replacement char (U+FFFD) and advance only 1 byte                                                   // 688\n      codePoint = 0xFFFD                                                                                     // 689\n      bytesPerSequence = 1                                                                                   // 690\n    } else if (codePoint > 0xFFFF) {                                                                         // 691\n      // encode to utf16 (surrogate pair dance)                                                              // 692\n      codePoint -= 0x10000                                                                                   // 693\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)                                                            // 694\n      codePoint = 0xDC00 | codePoint & 0x3FF                                                                 // 695\n    }                                                                                                        // 696\n                                                                                                             // 697\n    res.push(codePoint)                                                                                      // 698\n    i += bytesPerSequence                                                                                    // 699\n  }                                                                                                          // 700\n                                                                                                             // 701\n  return decodeCodePointsArray(res)                                                                          // 702\n}                                                                                                            // 703\n                                                                                                             // 704\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with                                     // 705\n// the lowest limit is Chrome, with 0x10000 args.                                                            // 706\n// We go 1 magnitude less, for safety                                                                        // 707\nvar MAX_ARGUMENTS_LENGTH = 0x1000                                                                            // 708\n                                                                                                             // 709\nfunction decodeCodePointsArray (codePoints) {                                                                // 710\n  var len = codePoints.length                                                                                // 711\n  if (len <= MAX_ARGUMENTS_LENGTH) {                                                                         // 712\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()                              // 713\n  }                                                                                                          // 714\n                                                                                                             // 715\n  // Decode in chunks to avoid \"call stack size exceeded\".                                                   // 716\n  var res = ''                                                                                               // 717\n  var i = 0                                                                                                  // 718\n  while (i < len) {                                                                                          // 719\n    res += String.fromCharCode.apply(                                                                        // 720\n      String,                                                                                                // 721\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)                                                         // 722\n    )                                                                                                        // 723\n  }                                                                                                          // 724\n  return res                                                                                                 // 725\n}                                                                                                            // 726\n                                                                                                             // 727\nfunction asciiSlice (buf, start, end) {                                                                      // 728\n  var ret = ''                                                                                               // 729\n  end = Math.min(buf.length, end)                                                                            // 730\n                                                                                                             // 731\n  for (var i = start; i < end; i++) {                                                                        // 732\n    ret += String.fromCharCode(buf[i] & 0x7F)                                                                // 733\n  }                                                                                                          // 734\n  return ret                                                                                                 // 735\n}                                                                                                            // 736\n                                                                                                             // 737\nfunction binarySlice (buf, start, end) {                                                                     // 738\n  var ret = ''                                                                                               // 739\n  end = Math.min(buf.length, end)                                                                            // 740\n                                                                                                             // 741\n  for (var i = start; i < end; i++) {                                                                        // 742\n    ret += String.fromCharCode(buf[i])                                                                       // 743\n  }                                                                                                          // 744\n  return ret                                                                                                 // 745\n}                                                                                                            // 746\n                                                                                                             // 747\nfunction hexSlice (buf, start, end) {                                                                        // 748\n  var len = buf.length                                                                                       // 749\n                                                                                                             // 750\n  if (!start || start < 0) start = 0                                                                         // 751\n  if (!end || end < 0 || end > len) end = len                                                                // 752\n                                                                                                             // 753\n  var out = ''                                                                                               // 754\n  for (var i = start; i < end; i++) {                                                                        // 755\n    out += toHex(buf[i])                                                                                     // 756\n  }                                                                                                          // 757\n  return out                                                                                                 // 758\n}                                                                                                            // 759\n                                                                                                             // 760\nfunction utf16leSlice (buf, start, end) {                                                                    // 761\n  var bytes = buf.slice(start, end)                                                                          // 762\n  var res = ''                                                                                               // 763\n  for (var i = 0; i < bytes.length; i += 2) {                                                                // 764\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)                                                // 765\n  }                                                                                                          // 766\n  return res                                                                                                 // 767\n}                                                                                                            // 768\n                                                                                                             // 769\nBuffer.prototype.slice = function slice (start, end) {                                                       // 770\n  var len = this.length                                                                                      // 771\n  start = ~~start                                                                                            // 772\n  end = end === undefined ? len : ~~end                                                                      // 773\n                                                                                                             // 774\n  if (start < 0) {                                                                                           // 775\n    start += len                                                                                             // 776\n    if (start < 0) start = 0                                                                                 // 777\n  } else if (start > len) {                                                                                  // 778\n    start = len                                                                                              // 779\n  }                                                                                                          // 780\n                                                                                                             // 781\n  if (end < 0) {                                                                                             // 782\n    end += len                                                                                               // 783\n    if (end < 0) end = 0                                                                                     // 784\n  } else if (end > len) {                                                                                    // 785\n    end = len                                                                                                // 786\n  }                                                                                                          // 787\n                                                                                                             // 788\n  if (end < start) end = start                                                                               // 789\n                                                                                                             // 790\n  var newBuf                                                                                                 // 791\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 792\n    newBuf = this.subarray(start, end)                                                                       // 793\n    newBuf.__proto__ = Buffer.prototype                                                                      // 794\n  } else {                                                                                                   // 795\n    var sliceLen = end - start                                                                               // 796\n    newBuf = new Buffer(sliceLen, undefined)                                                                 // 797\n    for (var i = 0; i < sliceLen; i++) {                                                                     // 798\n      newBuf[i] = this[i + start]                                                                            // 799\n    }                                                                                                        // 800\n  }                                                                                                          // 801\n                                                                                                             // 802\n  if (newBuf.length) newBuf.parent = this.parent || this                                                     // 803\n                                                                                                             // 804\n  return newBuf                                                                                              // 805\n}                                                                                                            // 806\n                                                                                                             // 807\n/*                                                                                                           // 808\n * Need to make sure that buffer isn't trying to write out of bounds.                                        // 809\n */                                                                                                          // 810\nfunction checkOffset (offset, ext, length) {                                                                 // 811\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')                           // 812\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')                   // 813\n}                                                                                                            // 814\n                                                                                                             // 815\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {                           // 816\n  offset = offset | 0                                                                                        // 817\n  byteLength = byteLength | 0                                                                                // 818\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                // 819\n                                                                                                             // 820\n  var val = this[offset]                                                                                     // 821\n  var mul = 1                                                                                                // 822\n  var i = 0                                                                                                  // 823\n  while (++i < byteLength && (mul *= 0x100)) {                                                               // 824\n    val += this[offset + i] * mul                                                                            // 825\n  }                                                                                                          // 826\n                                                                                                             // 827\n  return val                                                                                                 // 828\n}                                                                                                            // 829\n                                                                                                             // 830\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {                           // 831\n  offset = offset | 0                                                                                        // 832\n  byteLength = byteLength | 0                                                                                // 833\n  if (!noAssert) {                                                                                           // 834\n    checkOffset(offset, byteLength, this.length)                                                             // 835\n  }                                                                                                          // 836\n                                                                                                             // 837\n  var val = this[offset + --byteLength]                                                                      // 838\n  var mul = 1                                                                                                // 839\n  while (byteLength > 0 && (mul *= 0x100)) {                                                                 // 840\n    val += this[offset + --byteLength] * mul                                                                 // 841\n  }                                                                                                          // 842\n                                                                                                             // 843\n  return val                                                                                                 // 844\n}                                                                                                            // 845\n                                                                                                             // 846\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {                                         // 847\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                         // 848\n  return this[offset]                                                                                        // 849\n}                                                                                                            // 850\n                                                                                                             // 851\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {                                   // 852\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                         // 853\n  return this[offset] | (this[offset + 1] << 8)                                                              // 854\n}                                                                                                            // 855\n                                                                                                             // 856\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {                                   // 857\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                         // 858\n  return (this[offset] << 8) | this[offset + 1]                                                              // 859\n}                                                                                                            // 860\n                                                                                                             // 861\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {                                   // 862\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                         // 863\n                                                                                                             // 864\n  return ((this[offset]) |                                                                                   // 865\n      (this[offset + 1] << 8) |                                                                              // 866\n      (this[offset + 2] << 16)) +                                                                            // 867\n      (this[offset + 3] * 0x1000000)                                                                         // 868\n}                                                                                                            // 869\n                                                                                                             // 870\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {                                   // 871\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                         // 872\n                                                                                                             // 873\n  return (this[offset] * 0x1000000) +                                                                        // 874\n    ((this[offset + 1] << 16) |                                                                              // 875\n    (this[offset + 2] << 8) |                                                                                // 876\n    this[offset + 3])                                                                                        // 877\n}                                                                                                            // 878\n                                                                                                             // 879\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {                             // 880\n  offset = offset | 0                                                                                        // 881\n  byteLength = byteLength | 0                                                                                // 882\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                // 883\n                                                                                                             // 884\n  var val = this[offset]                                                                                     // 885\n  var mul = 1                                                                                                // 886\n  var i = 0                                                                                                  // 887\n  while (++i < byteLength && (mul *= 0x100)) {                                                               // 888\n    val += this[offset + i] * mul                                                                            // 889\n  }                                                                                                          // 890\n  mul *= 0x80                                                                                                // 891\n                                                                                                             // 892\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                         // 893\n                                                                                                             // 894\n  return val                                                                                                 // 895\n}                                                                                                            // 896\n                                                                                                             // 897\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {                             // 898\n  offset = offset | 0                                                                                        // 899\n  byteLength = byteLength | 0                                                                                // 900\n  if (!noAssert) checkOffset(offset, byteLength, this.length)                                                // 901\n                                                                                                             // 902\n  var i = byteLength                                                                                         // 903\n  var mul = 1                                                                                                // 904\n  var val = this[offset + --i]                                                                               // 905\n  while (i > 0 && (mul *= 0x100)) {                                                                          // 906\n    val += this[offset + --i] * mul                                                                          // 907\n  }                                                                                                          // 908\n  mul *= 0x80                                                                                                // 909\n                                                                                                             // 910\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)                                                         // 911\n                                                                                                             // 912\n  return val                                                                                                 // 913\n}                                                                                                            // 914\n                                                                                                             // 915\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {                                           // 916\n  if (!noAssert) checkOffset(offset, 1, this.length)                                                         // 917\n  if (!(this[offset] & 0x80)) return (this[offset])                                                          // 918\n  return ((0xff - this[offset] + 1) * -1)                                                                    // 919\n}                                                                                                            // 920\n                                                                                                             // 921\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {                                     // 922\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                         // 923\n  var val = this[offset] | (this[offset + 1] << 8)                                                           // 924\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                             // 925\n}                                                                                                            // 926\n                                                                                                             // 927\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {                                     // 928\n  if (!noAssert) checkOffset(offset, 2, this.length)                                                         // 929\n  var val = this[offset + 1] | (this[offset] << 8)                                                           // 930\n  return (val & 0x8000) ? val | 0xFFFF0000 : val                                                             // 931\n}                                                                                                            // 932\n                                                                                                             // 933\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {                                     // 934\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                         // 935\n                                                                                                             // 936\n  return (this[offset]) |                                                                                    // 937\n    (this[offset + 1] << 8) |                                                                                // 938\n    (this[offset + 2] << 16) |                                                                               // 939\n    (this[offset + 3] << 24)                                                                                 // 940\n}                                                                                                            // 941\n                                                                                                             // 942\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {                                     // 943\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                         // 944\n                                                                                                             // 945\n  return (this[offset] << 24) |                                                                              // 946\n    (this[offset + 1] << 16) |                                                                               // 947\n    (this[offset + 2] << 8) |                                                                                // 948\n    (this[offset + 3])                                                                                       // 949\n}                                                                                                            // 950\n                                                                                                             // 951\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {                                     // 952\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                         // 953\n  return ieee754.read(this, offset, true, 23, 4)                                                             // 954\n}                                                                                                            // 955\n                                                                                                             // 956\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {                                     // 957\n  if (!noAssert) checkOffset(offset, 4, this.length)                                                         // 958\n  return ieee754.read(this, offset, false, 23, 4)                                                            // 959\n}                                                                                                            // 960\n                                                                                                             // 961\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {                                   // 962\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                         // 963\n  return ieee754.read(this, offset, true, 52, 8)                                                             // 964\n}                                                                                                            // 965\n                                                                                                             // 966\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {                                   // 967\n  if (!noAssert) checkOffset(offset, 8, this.length)                                                         // 968\n  return ieee754.read(this, offset, false, 52, 8)                                                            // 969\n}                                                                                                            // 970\n                                                                                                             // 971\nfunction checkInt (buf, value, offset, ext, max, min) {                                                      // 972\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')                         // 973\n  if (value > max || value < min) throw new RangeError('value is out of bounds')                             // 974\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                  // 975\n}                                                                                                            // 976\n                                                                                                             // 977\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {                  // 978\n  value = +value                                                                                             // 979\n  offset = offset | 0                                                                                        // 980\n  byteLength = byteLength | 0                                                                                // 981\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                   // 982\n                                                                                                             // 983\n  var mul = 1                                                                                                // 984\n  var i = 0                                                                                                  // 985\n  this[offset] = value & 0xFF                                                                                // 986\n  while (++i < byteLength && (mul *= 0x100)) {                                                               // 987\n    this[offset + i] = (value / mul) & 0xFF                                                                  // 988\n  }                                                                                                          // 989\n                                                                                                             // 990\n  return offset + byteLength                                                                                 // 991\n}                                                                                                            // 992\n                                                                                                             // 993\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {                  // 994\n  value = +value                                                                                             // 995\n  offset = offset | 0                                                                                        // 996\n  byteLength = byteLength | 0                                                                                // 997\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)                   // 998\n                                                                                                             // 999\n  var i = byteLength - 1                                                                                     // 1000\n  var mul = 1                                                                                                // 1001\n  this[offset + i] = value & 0xFF                                                                            // 1002\n  while (--i >= 0 && (mul *= 0x100)) {                                                                       // 1003\n    this[offset + i] = (value / mul) & 0xFF                                                                  // 1004\n  }                                                                                                          // 1005\n                                                                                                             // 1006\n  return offset + byteLength                                                                                 // 1007\n}                                                                                                            // 1008\n                                                                                                             // 1009\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {                                // 1010\n  value = +value                                                                                             // 1011\n  offset = offset | 0                                                                                        // 1012\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)                                                   // 1013\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                 // 1014\n  this[offset] = (value & 0xff)                                                                              // 1015\n  return offset + 1                                                                                          // 1016\n}                                                                                                            // 1017\n                                                                                                             // 1018\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {                                              // 1019\n  if (value < 0) value = 0xffff + value + 1                                                                  // 1020\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {                                        // 1021\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>                               // 1022\n      (littleEndian ? i : 1 - i) * 8                                                                         // 1023\n  }                                                                                                          // 1024\n}                                                                                                            // 1025\n                                                                                                             // 1026\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {                          // 1027\n  value = +value                                                                                             // 1028\n  offset = offset | 0                                                                                        // 1029\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                 // 1030\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1031\n    this[offset] = (value & 0xff)                                                                            // 1032\n    this[offset + 1] = (value >>> 8)                                                                         // 1033\n  } else {                                                                                                   // 1034\n    objectWriteUInt16(this, value, offset, true)                                                             // 1035\n  }                                                                                                          // 1036\n  return offset + 2                                                                                          // 1037\n}                                                                                                            // 1038\n                                                                                                             // 1039\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {                          // 1040\n  value = +value                                                                                             // 1041\n  offset = offset | 0                                                                                        // 1042\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)                                                 // 1043\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1044\n    this[offset] = (value >>> 8)                                                                             // 1045\n    this[offset + 1] = (value & 0xff)                                                                        // 1046\n  } else {                                                                                                   // 1047\n    objectWriteUInt16(this, value, offset, false)                                                            // 1048\n  }                                                                                                          // 1049\n  return offset + 2                                                                                          // 1050\n}                                                                                                            // 1051\n                                                                                                             // 1052\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {                                              // 1053\n  if (value < 0) value = 0xffffffff + value + 1                                                              // 1054\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {                                        // 1055\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff                                      // 1056\n  }                                                                                                          // 1057\n}                                                                                                            // 1058\n                                                                                                             // 1059\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {                          // 1060\n  value = +value                                                                                             // 1061\n  offset = offset | 0                                                                                        // 1062\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                             // 1063\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1064\n    this[offset + 3] = (value >>> 24)                                                                        // 1065\n    this[offset + 2] = (value >>> 16)                                                                        // 1066\n    this[offset + 1] = (value >>> 8)                                                                         // 1067\n    this[offset] = (value & 0xff)                                                                            // 1068\n  } else {                                                                                                   // 1069\n    objectWriteUInt32(this, value, offset, true)                                                             // 1070\n  }                                                                                                          // 1071\n  return offset + 4                                                                                          // 1072\n}                                                                                                            // 1073\n                                                                                                             // 1074\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {                          // 1075\n  value = +value                                                                                             // 1076\n  offset = offset | 0                                                                                        // 1077\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)                                             // 1078\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1079\n    this[offset] = (value >>> 24)                                                                            // 1080\n    this[offset + 1] = (value >>> 16)                                                                        // 1081\n    this[offset + 2] = (value >>> 8)                                                                         // 1082\n    this[offset + 3] = (value & 0xff)                                                                        // 1083\n  } else {                                                                                                   // 1084\n    objectWriteUInt32(this, value, offset, false)                                                            // 1085\n  }                                                                                                          // 1086\n  return offset + 4                                                                                          // 1087\n}                                                                                                            // 1088\n                                                                                                             // 1089\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {                    // 1090\n  value = +value                                                                                             // 1091\n  offset = offset | 0                                                                                        // 1092\n  if (!noAssert) {                                                                                           // 1093\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                              // 1094\n                                                                                                             // 1095\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                             // 1096\n  }                                                                                                          // 1097\n                                                                                                             // 1098\n  var i = 0                                                                                                  // 1099\n  var mul = 1                                                                                                // 1100\n  var sub = value < 0 ? 1 : 0                                                                                // 1101\n  this[offset] = value & 0xFF                                                                                // 1102\n  while (++i < byteLength && (mul *= 0x100)) {                                                               // 1103\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                     // 1104\n  }                                                                                                          // 1105\n                                                                                                             // 1106\n  return offset + byteLength                                                                                 // 1107\n}                                                                                                            // 1108\n                                                                                                             // 1109\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {                    // 1110\n  value = +value                                                                                             // 1111\n  offset = offset | 0                                                                                        // 1112\n  if (!noAssert) {                                                                                           // 1113\n    var limit = Math.pow(2, 8 * byteLength - 1)                                                              // 1114\n                                                                                                             // 1115\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)                                             // 1116\n  }                                                                                                          // 1117\n                                                                                                             // 1118\n  var i = byteLength - 1                                                                                     // 1119\n  var mul = 1                                                                                                // 1120\n  var sub = value < 0 ? 1 : 0                                                                                // 1121\n  this[offset + i] = value & 0xFF                                                                            // 1122\n  while (--i >= 0 && (mul *= 0x100)) {                                                                       // 1123\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF                                                     // 1124\n  }                                                                                                          // 1125\n                                                                                                             // 1126\n  return offset + byteLength                                                                                 // 1127\n}                                                                                                            // 1128\n                                                                                                             // 1129\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {                                  // 1130\n  value = +value                                                                                             // 1131\n  offset = offset | 0                                                                                        // 1132\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)                                               // 1133\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)                                                 // 1134\n  if (value < 0) value = 0xff + value + 1                                                                    // 1135\n  this[offset] = (value & 0xff)                                                                              // 1136\n  return offset + 1                                                                                          // 1137\n}                                                                                                            // 1138\n                                                                                                             // 1139\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {                            // 1140\n  value = +value                                                                                             // 1141\n  offset = offset | 0                                                                                        // 1142\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                           // 1143\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1144\n    this[offset] = (value & 0xff)                                                                            // 1145\n    this[offset + 1] = (value >>> 8)                                                                         // 1146\n  } else {                                                                                                   // 1147\n    objectWriteUInt16(this, value, offset, true)                                                             // 1148\n  }                                                                                                          // 1149\n  return offset + 2                                                                                          // 1150\n}                                                                                                            // 1151\n                                                                                                             // 1152\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {                            // 1153\n  value = +value                                                                                             // 1154\n  offset = offset | 0                                                                                        // 1155\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)                                           // 1156\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1157\n    this[offset] = (value >>> 8)                                                                             // 1158\n    this[offset + 1] = (value & 0xff)                                                                        // 1159\n  } else {                                                                                                   // 1160\n    objectWriteUInt16(this, value, offset, false)                                                            // 1161\n  }                                                                                                          // 1162\n  return offset + 2                                                                                          // 1163\n}                                                                                                            // 1164\n                                                                                                             // 1165\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {                            // 1166\n  value = +value                                                                                             // 1167\n  offset = offset | 0                                                                                        // 1168\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                   // 1169\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1170\n    this[offset] = (value & 0xff)                                                                            // 1171\n    this[offset + 1] = (value >>> 8)                                                                         // 1172\n    this[offset + 2] = (value >>> 16)                                                                        // 1173\n    this[offset + 3] = (value >>> 24)                                                                        // 1174\n  } else {                                                                                                   // 1175\n    objectWriteUInt32(this, value, offset, true)                                                             // 1176\n  }                                                                                                          // 1177\n  return offset + 4                                                                                          // 1178\n}                                                                                                            // 1179\n                                                                                                             // 1180\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {                            // 1181\n  value = +value                                                                                             // 1182\n  offset = offset | 0                                                                                        // 1183\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)                                   // 1184\n  if (value < 0) value = 0xffffffff + value + 1                                                              // 1185\n  if (Buffer.TYPED_ARRAY_SUPPORT) {                                                                          // 1186\n    this[offset] = (value >>> 24)                                                                            // 1187\n    this[offset + 1] = (value >>> 16)                                                                        // 1188\n    this[offset + 2] = (value >>> 8)                                                                         // 1189\n    this[offset + 3] = (value & 0xff)                                                                        // 1190\n  } else {                                                                                                   // 1191\n    objectWriteUInt32(this, value, offset, false)                                                            // 1192\n  }                                                                                                          // 1193\n  return offset + 4                                                                                          // 1194\n}                                                                                                            // 1195\n                                                                                                             // 1196\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {                                                  // 1197\n  if (offset + ext > buf.length) throw new RangeError('index out of range')                                  // 1198\n  if (offset < 0) throw new RangeError('index out of range')                                                 // 1199\n}                                                                                                            // 1200\n                                                                                                             // 1201\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {                                           // 1202\n  if (!noAssert) {                                                                                           // 1203\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)                     // 1204\n  }                                                                                                          // 1205\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)                                                     // 1206\n  return offset + 4                                                                                          // 1207\n}                                                                                                            // 1208\n                                                                                                             // 1209\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {                            // 1210\n  return writeFloat(this, value, offset, true, noAssert)                                                     // 1211\n}                                                                                                            // 1212\n                                                                                                             // 1213\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {                            // 1214\n  return writeFloat(this, value, offset, false, noAssert)                                                    // 1215\n}                                                                                                            // 1216\n                                                                                                             // 1217\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {                                          // 1218\n  if (!noAssert) {                                                                                           // 1219\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)                   // 1220\n  }                                                                                                          // 1221\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)                                                     // 1222\n  return offset + 8                                                                                          // 1223\n}                                                                                                            // 1224\n                                                                                                             // 1225\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {                          // 1226\n  return writeDouble(this, value, offset, true, noAssert)                                                    // 1227\n}                                                                                                            // 1228\n                                                                                                             // 1229\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {                          // 1230\n  return writeDouble(this, value, offset, false, noAssert)                                                   // 1231\n}                                                                                                            // 1232\n                                                                                                             // 1233\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)                                 // 1234\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {                                    // 1235\n  if (!start) start = 0                                                                                      // 1236\n  if (!end && end !== 0) end = this.length                                                                   // 1237\n  if (targetStart >= target.length) targetStart = target.length                                              // 1238\n  if (!targetStart) targetStart = 0                                                                          // 1239\n  if (end > 0 && end < start) end = start                                                                    // 1240\n                                                                                                             // 1241\n  // Copy 0 bytes; we're done                                                                                // 1242\n  if (end === start) return 0                                                                                // 1243\n  if (target.length === 0 || this.length === 0) return 0                                                     // 1244\n                                                                                                             // 1245\n  // Fatal error conditions                                                                                  // 1246\n  if (targetStart < 0) {                                                                                     // 1247\n    throw new RangeError('targetStart out of bounds')                                                        // 1248\n  }                                                                                                          // 1249\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')                   // 1250\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')                                               // 1251\n                                                                                                             // 1252\n  // Are we oob?                                                                                             // 1253\n  if (end > this.length) end = this.length                                                                   // 1254\n  if (target.length - targetStart < end - start) {                                                           // 1255\n    end = target.length - targetStart + start                                                                // 1256\n  }                                                                                                          // 1257\n                                                                                                             // 1258\n  var len = end - start                                                                                      // 1259\n  var i                                                                                                      // 1260\n                                                                                                             // 1261\n  if (this === target && start < targetStart && targetStart < end) {                                         // 1262\n    // descending copy from end                                                                              // 1263\n    for (i = len - 1; i >= 0; i--) {                                                                         // 1264\n      target[i + targetStart] = this[i + start]                                                              // 1265\n    }                                                                                                        // 1266\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {                                                    // 1267\n    // ascending copy from start                                                                             // 1268\n    for (i = 0; i < len; i++) {                                                                              // 1269\n      target[i + targetStart] = this[i + start]                                                              // 1270\n    }                                                                                                        // 1271\n  } else {                                                                                                   // 1272\n    Uint8Array.prototype.set.call(                                                                           // 1273\n      target,                                                                                                // 1274\n      this.subarray(start, start + len),                                                                     // 1275\n      targetStart                                                                                            // 1276\n    )                                                                                                        // 1277\n  }                                                                                                          // 1278\n                                                                                                             // 1279\n  return len                                                                                                 // 1280\n}                                                                                                            // 1281\n                                                                                                             // 1282\n// fill(value, start=0, end=buffer.length)                                                                   // 1283\nBuffer.prototype.fill = function fill (value, start, end) {                                                  // 1284\n  if (!value) value = 0                                                                                      // 1285\n  if (!start) start = 0                                                                                      // 1286\n  if (!end) end = this.length                                                                                // 1287\n                                                                                                             // 1288\n  if (end < start) throw new RangeError('end < start')                                                       // 1289\n                                                                                                             // 1290\n  // Fill 0 bytes; we're done                                                                                // 1291\n  if (end === start) return                                                                                  // 1292\n  if (this.length === 0) return                                                                              // 1293\n                                                                                                             // 1294\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')                         // 1295\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')                                // 1296\n                                                                                                             // 1297\n  var i                                                                                                      // 1298\n  if (typeof value === 'number') {                                                                           // 1299\n    for (i = start; i < end; i++) {                                                                          // 1300\n      this[i] = value                                                                                        // 1301\n    }                                                                                                        // 1302\n  } else {                                                                                                   // 1303\n    var bytes = utf8ToBytes(value.toString())                                                                // 1304\n    var len = bytes.length                                                                                   // 1305\n    for (i = start; i < end; i++) {                                                                          // 1306\n      this[i] = bytes[i % len]                                                                               // 1307\n    }                                                                                                        // 1308\n  }                                                                                                          // 1309\n                                                                                                             // 1310\n  return this                                                                                                // 1311\n}                                                                                                            // 1312\n                                                                                                             // 1313\n// HELPER FUNCTIONS                                                                                          // 1314\n// ================                                                                                          // 1315\n                                                                                                             // 1316\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g                                                                 // 1317\n                                                                                                             // 1318\nfunction base64clean (str) {                                                                                 // 1319\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not                   // 1320\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')                                                       // 1321\n  // Node converts strings with length < 2 to ''                                                             // 1322\n  if (str.length < 2) return ''                                                                              // 1323\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not                    // 1324\n  while (str.length % 4 !== 0) {                                                                             // 1325\n    str = str + '='                                                                                          // 1326\n  }                                                                                                          // 1327\n  return str                                                                                                 // 1328\n}                                                                                                            // 1329\n                                                                                                             // 1330\nfunction stringtrim (str) {                                                                                  // 1331\n  if (str.trim) return str.trim()                                                                            // 1332\n  return str.replace(/^\\s+|\\s+$/g, '')                                                                       // 1333\n}                                                                                                            // 1334\n                                                                                                             // 1335\nfunction toHex (n) {                                                                                         // 1336\n  if (n < 16) return '0' + n.toString(16)                                                                    // 1337\n  return n.toString(16)                                                                                      // 1338\n}                                                                                                            // 1339\n                                                                                                             // 1340\nfunction utf8ToBytes (string, units) {                                                                       // 1341\n  units = units || Infinity                                                                                  // 1342\n  var codePoint                                                                                              // 1343\n  var length = string.length                                                                                 // 1344\n  var leadSurrogate = null                                                                                   // 1345\n  var bytes = []                                                                                             // 1346\n                                                                                                             // 1347\n  for (var i = 0; i < length; i++) {                                                                         // 1348\n    codePoint = string.charCodeAt(i)                                                                         // 1349\n                                                                                                             // 1350\n    // is surrogate component                                                                                // 1351\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {                                                          // 1352\n      // last char was a lead                                                                                // 1353\n      if (!leadSurrogate) {                                                                                  // 1354\n        // no lead yet                                                                                       // 1355\n        if (codePoint > 0xDBFF) {                                                                            // 1356\n          // unexpected trail                                                                                // 1357\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                // 1358\n          continue                                                                                           // 1359\n        } else if (i + 1 === length) {                                                                       // 1360\n          // unpaired lead                                                                                   // 1361\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                // 1362\n          continue                                                                                           // 1363\n        }                                                                                                    // 1364\n                                                                                                             // 1365\n        // valid lead                                                                                        // 1366\n        leadSurrogate = codePoint                                                                            // 1367\n                                                                                                             // 1368\n        continue                                                                                             // 1369\n      }                                                                                                      // 1370\n                                                                                                             // 1371\n      // 2 leads in a row                                                                                    // 1372\n      if (codePoint < 0xDC00) {                                                                              // 1373\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                  // 1374\n        leadSurrogate = codePoint                                                                            // 1375\n        continue                                                                                             // 1376\n      }                                                                                                      // 1377\n                                                                                                             // 1378\n      // valid surrogate pair                                                                                // 1379\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000                              // 1380\n    } else if (leadSurrogate) {                                                                              // 1381\n      // valid bmp char, but last char was a lead                                                            // 1382\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)                                                    // 1383\n    }                                                                                                        // 1384\n                                                                                                             // 1385\n    leadSurrogate = null                                                                                     // 1386\n                                                                                                             // 1387\n    // encode utf8                                                                                           // 1388\n    if (codePoint < 0x80) {                                                                                  // 1389\n      if ((units -= 1) < 0) break                                                                            // 1390\n      bytes.push(codePoint)                                                                                  // 1391\n    } else if (codePoint < 0x800) {                                                                          // 1392\n      if ((units -= 2) < 0) break                                                                            // 1393\n      bytes.push(                                                                                            // 1394\n        codePoint >> 0x6 | 0xC0,                                                                             // 1395\n        codePoint & 0x3F | 0x80                                                                              // 1396\n      )                                                                                                      // 1397\n    } else if (codePoint < 0x10000) {                                                                        // 1398\n      if ((units -= 3) < 0) break                                                                            // 1399\n      bytes.push(                                                                                            // 1400\n        codePoint >> 0xC | 0xE0,                                                                             // 1401\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                      // 1402\n        codePoint & 0x3F | 0x80                                                                              // 1403\n      )                                                                                                      // 1404\n    } else if (codePoint < 0x110000) {                                                                       // 1405\n      if ((units -= 4) < 0) break                                                                            // 1406\n      bytes.push(                                                                                            // 1407\n        codePoint >> 0x12 | 0xF0,                                                                            // 1408\n        codePoint >> 0xC & 0x3F | 0x80,                                                                      // 1409\n        codePoint >> 0x6 & 0x3F | 0x80,                                                                      // 1410\n        codePoint & 0x3F | 0x80                                                                              // 1411\n      )                                                                                                      // 1412\n    } else {                                                                                                 // 1413\n      throw new Error('Invalid code point')                                                                  // 1414\n    }                                                                                                        // 1415\n  }                                                                                                          // 1416\n                                                                                                             // 1417\n  return bytes                                                                                               // 1418\n}                                                                                                            // 1419\n                                                                                                             // 1420\nfunction asciiToBytes (str) {                                                                                // 1421\n  var byteArray = []                                                                                         // 1422\n  for (var i = 0; i < str.length; i++) {                                                                     // 1423\n    // Node's code seems to be doing this and not & 0x7F..                                                   // 1424\n    byteArray.push(str.charCodeAt(i) & 0xFF)                                                                 // 1425\n  }                                                                                                          // 1426\n  return byteArray                                                                                           // 1427\n}                                                                                                            // 1428\n                                                                                                             // 1429\nfunction utf16leToBytes (str, units) {                                                                       // 1430\n  var c, hi, lo                                                                                              // 1431\n  var byteArray = []                                                                                         // 1432\n  for (var i = 0; i < str.length; i++) {                                                                     // 1433\n    if ((units -= 2) < 0) break                                                                              // 1434\n                                                                                                             // 1435\n    c = str.charCodeAt(i)                                                                                    // 1436\n    hi = c >> 8                                                                                              // 1437\n    lo = c % 256                                                                                             // 1438\n    byteArray.push(lo)                                                                                       // 1439\n    byteArray.push(hi)                                                                                       // 1440\n  }                                                                                                          // 1441\n                                                                                                             // 1442\n  return byteArray                                                                                           // 1443\n}                                                                                                            // 1444\n                                                                                                             // 1445\nfunction base64ToBytes (str) {                                                                               // 1446\n  return base64.toByteArray(base64clean(str))                                                                // 1447\n}                                                                                                            // 1448\n                                                                                                             // 1449\nfunction blitBuffer (src, dst, offset, length) {                                                             // 1450\n  for (var i = 0; i < length; i++) {                                                                         // 1451\n    if ((i + offset >= dst.length) || (i >= src.length)) break                                               // 1452\n    dst[i + offset] = src[i]                                                                                 // 1453\n  }                                                                                                          // 1454\n  return i                                                                                                   // 1455\n}                                                                                                            // 1456\n                                                                                                             // 1457\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"node_modules\":{\"base64-js\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json                    //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"base64-js\";                                                                                  // 1\nexports.version = \"1.1.2\";                                                                                   // 2\nexports.main = \"lib/b64.js\";                                                                                 // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"lib\":{\"b64.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n'use strict'                                                                                                 // 1\n                                                                                                             // 2\nexports.toByteArray = toByteArray                                                                            // 3\nexports.fromByteArray = fromByteArray                                                                        // 4\n                                                                                                             // 5\nvar lookup = []                                                                                              // 6\nvar revLookup = []                                                                                           // 7\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array                                             // 8\n                                                                                                             // 9\nfunction init () {                                                                                           // 10\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'                              // 11\n  for (var i = 0, len = code.length; i < len; ++i) {                                                         // 12\n    lookup[i] = code[i]                                                                                      // 13\n    revLookup[code.charCodeAt(i)] = i                                                                        // 14\n  }                                                                                                          // 15\n                                                                                                             // 16\n  revLookup['-'.charCodeAt(0)] = 62                                                                          // 17\n  revLookup['_'.charCodeAt(0)] = 63                                                                          // 18\n}                                                                                                            // 19\n                                                                                                             // 20\ninit()                                                                                                       // 21\n                                                                                                             // 22\nfunction toByteArray (b64) {                                                                                 // 23\n  var i, j, l, tmp, placeHolders, arr                                                                        // 24\n  var len = b64.length                                                                                       // 25\n                                                                                                             // 26\n  if (len % 4 > 0) {                                                                                         // 27\n    throw new Error('Invalid string. Length must be a multiple of 4')                                        // 28\n  }                                                                                                          // 29\n                                                                                                             // 30\n  // the number of equal signs (place holders)                                                               // 31\n  // if there are two placeholders, than the two characters before it                                        // 32\n  // represent one byte                                                                                      // 33\n  // if there is only one, then the three characters before it represent 2 bytes                             // 34\n  // this is just a cheap hack to not do indexOf twice                                                       // 35\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0                                     // 36\n                                                                                                             // 37\n  // base64 is 4/3 + up to two characters of the original data                                               // 38\n  arr = new Arr(len * 3 / 4 - placeHolders)                                                                  // 39\n                                                                                                             // 40\n  // if there are placeholders, only get up to the last complete 4 chars                                     // 41\n  l = placeHolders > 0 ? len - 4 : len                                                                       // 42\n                                                                                                             // 43\n  var L = 0                                                                                                  // 44\n                                                                                                             // 45\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {                                                                // 46\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF                                                                            // 48\n    arr[L++] = (tmp >> 8) & 0xFF                                                                             // 49\n    arr[L++] = tmp & 0xFF                                                                                    // 50\n  }                                                                                                          // 51\n                                                                                                             // 52\n  if (placeHolders === 2) {                                                                                  // 53\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)                      // 54\n    arr[L++] = tmp & 0xFF                                                                                    // 55\n  } else if (placeHolders === 1) {                                                                           // 56\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF                                                                             // 58\n    arr[L++] = tmp & 0xFF                                                                                    // 59\n  }                                                                                                          // 60\n                                                                                                             // 61\n  return arr                                                                                                 // 62\n}                                                                                                            // 63\n                                                                                                             // 64\nfunction tripletToBase64 (num) {                                                                             // 65\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]  // 66\n}                                                                                                            // 67\n                                                                                                             // 68\nfunction encodeChunk (uint8, start, end) {                                                                   // 69\n  var tmp                                                                                                    // 70\n  var output = []                                                                                            // 71\n  for (var i = start; i < end; i += 3) {                                                                     // 72\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])                                            // 73\n    output.push(tripletToBase64(tmp))                                                                        // 74\n  }                                                                                                          // 75\n  return output.join('')                                                                                     // 76\n}                                                                                                            // 77\n                                                                                                             // 78\nfunction fromByteArray (uint8) {                                                                             // 79\n  var tmp                                                                                                    // 80\n  var len = uint8.length                                                                                     // 81\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes                                            // 82\n  var output = ''                                                                                            // 83\n  var parts = []                                                                                             // 84\n  var maxChunkLength = 16383 // must be multiple of 3                                                        // 85\n                                                                                                             // 86\n  // go through the array every three bytes, we'll deal with trailing stuff later                            // 87\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {                                  // 88\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))             // 89\n  }                                                                                                          // 90\n                                                                                                             // 91\n  // pad the end with zeros, but make sure to not forget the extra bytes                                     // 92\n  if (extraBytes === 1) {                                                                                    // 93\n    tmp = uint8[len - 1]                                                                                     // 94\n    output += lookup[tmp >> 2]                                                                               // 95\n    output += lookup[(tmp << 4) & 0x3F]                                                                      // 96\n    output += '=='                                                                                           // 97\n  } else if (extraBytes === 2) {                                                                             // 98\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])                                                           // 99\n    output += lookup[tmp >> 10]                                                                              // 100\n    output += lookup[(tmp >> 4) & 0x3F]                                                                      // 101\n    output += lookup[(tmp << 2) & 0x3F]                                                                      // 102\n    output += '='                                                                                            // 103\n  }                                                                                                          // 104\n                                                                                                             // 105\n  parts.push(output)                                                                                         // 106\n                                                                                                             // 107\n  return parts.join('')                                                                                      // 108\n}                                                                                                            // 109\n                                                                                                             // 110\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"ieee754\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"ieee754\";                                                                                    // 1\nexports.version = \"1.1.6\";                                                                                   // 2\nexports.main = \"index.js\";                                                                                   // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js                          //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.read = function (buffer, offset, isLE, mLen, nBytes) {                                               // 1\n  var e, m                                                                                                   // 2\n  var eLen = nBytes * 8 - mLen - 1                                                                           // 3\n  var eMax = (1 << eLen) - 1                                                                                 // 4\n  var eBias = eMax >> 1                                                                                      // 5\n  var nBits = -7                                                                                             // 6\n  var i = isLE ? (nBytes - 1) : 0                                                                            // 7\n  var d = isLE ? -1 : 1                                                                                      // 8\n  var s = buffer[offset + i]                                                                                 // 9\n                                                                                                             // 10\n  i += d                                                                                                     // 11\n                                                                                                             // 12\n  e = s & ((1 << (-nBits)) - 1)                                                                              // 13\n  s >>= (-nBits)                                                                                             // 14\n  nBits += eLen                                                                                              // 15\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                 // 16\n                                                                                                             // 17\n  m = e & ((1 << (-nBits)) - 1)                                                                              // 18\n  e >>= (-nBits)                                                                                             // 19\n  nBits += mLen                                                                                              // 20\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}                                 // 21\n                                                                                                             // 22\n  if (e === 0) {                                                                                             // 23\n    e = 1 - eBias                                                                                            // 24\n  } else if (e === eMax) {                                                                                   // 25\n    return m ? NaN : ((s ? -1 : 1) * Infinity)                                                               // 26\n  } else {                                                                                                   // 27\n    m = m + Math.pow(2, mLen)                                                                                // 28\n    e = e - eBias                                                                                            // 29\n  }                                                                                                          // 30\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)                                                            // 31\n}                                                                                                            // 32\n                                                                                                             // 33\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {                                       // 34\n  var e, m, c                                                                                                // 35\n  var eLen = nBytes * 8 - mLen - 1                                                                           // 36\n  var eMax = (1 << eLen) - 1                                                                                 // 37\n  var eBias = eMax >> 1                                                                                      // 38\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)                                           // 39\n  var i = isLE ? 0 : (nBytes - 1)                                                                            // 40\n  var d = isLE ? 1 : -1                                                                                      // 41\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0                                                // 42\n                                                                                                             // 43\n  value = Math.abs(value)                                                                                    // 44\n                                                                                                             // 45\n  if (isNaN(value) || value === Infinity) {                                                                  // 46\n    m = isNaN(value) ? 1 : 0                                                                                 // 47\n    e = eMax                                                                                                 // 48\n  } else {                                                                                                   // 49\n    e = Math.floor(Math.log(value) / Math.LN2)                                                               // 50\n    if (value * (c = Math.pow(2, -e)) < 1) {                                                                 // 51\n      e--                                                                                                    // 52\n      c *= 2                                                                                                 // 53\n    }                                                                                                        // 54\n    if (e + eBias >= 1) {                                                                                    // 55\n      value += rt / c                                                                                        // 56\n    } else {                                                                                                 // 57\n      value += rt * Math.pow(2, 1 - eBias)                                                                   // 58\n    }                                                                                                        // 59\n    if (value * c >= 2) {                                                                                    // 60\n      e++                                                                                                    // 61\n      c /= 2                                                                                                 // 62\n    }                                                                                                        // 63\n                                                                                                             // 64\n    if (e + eBias >= eMax) {                                                                                 // 65\n      m = 0                                                                                                  // 66\n      e = eMax                                                                                               // 67\n    } else if (e + eBias >= 1) {                                                                             // 68\n      m = (value * c - 1) * Math.pow(2, mLen)                                                                // 69\n      e = e + eBias                                                                                          // 70\n    } else {                                                                                                 // 71\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)                                                 // 72\n      e = 0                                                                                                  // 73\n    }                                                                                                        // 74\n  }                                                                                                          // 75\n                                                                                                             // 76\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}                           // 77\n                                                                                                             // 78\n  e = (e << mLen) | m                                                                                        // 79\n  eLen += mLen                                                                                               // 80\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}                            // 81\n                                                                                                             // 82\n  buffer[offset + i - d] |= s * 128                                                                          // 83\n}                                                                                                            // 84\n                                                                                                             // 85\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"isarray\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"isarray\";                                                                                    // 1\nexports.version = \"1.0.0\";                                                                                   // 2\nexports.main = \"index.js\";                                                                                   // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js                          //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar toString = {}.toString;                                                                                  // 1\n                                                                                                             // 2\nmodule.exports = Array.isArray || function (arr) {                                                           // 3\n  return toString.call(arr) == '[object Array]';                                                             // 4\n};                                                                                                           // 5\n                                                                                                             // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"domain-browser\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/package.json                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"domain-browser\";                                                                             // 1\nexports.version = \"1.1.7\";                                                                                   // 2\nexports.main = \"./index.js\";                                                                                 // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":[\"events\",function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/domain-browser/index.js                                       //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// This file should be ES5 compatible                                                                        // 1\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */                                 // 2\n'use strict'                                                                                                 // 3\nmodule.exports = (function () {                                                                              // 4\n\t// Import Events                                                                                            // 5\n\tvar events = require('events')                                                                              // 6\n                                                                                                             // 7\n\t// Export Domain                                                                                            // 8\n\tvar domain = {}                                                                                             // 9\n\tdomain.createDomain = domain.create = function () {                                                         // 10\n\t\tvar d = new events.EventEmitter()                                                                          // 11\n                                                                                                             // 12\n\t\tfunction emitError (e) {                                                                                   // 13\n\t\t\td.emit('error', e)                                                                                        // 14\n\t\t}                                                                                                          // 15\n                                                                                                             // 16\n\t\td.add = function (emitter) {                                                                               // 17\n\t\t\temitter.on('error', emitError)                                                                            // 18\n\t\t}                                                                                                          // 19\n\t\td.remove = function (emitter) {                                                                            // 20\n\t\t\temitter.removeListener('error', emitError)                                                                // 21\n\t\t}                                                                                                          // 22\n\t\td.bind = function (fn) {                                                                                   // 23\n\t\t\treturn function () {                                                                                      // 24\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)                                                         // 25\n\t\t\t\ttry {                                                                                                    // 26\n\t\t\t\t\tfn.apply(null, args)                                                                                    // 27\n\t\t\t\t}                                                                                                        // 28\n\t\t\t\tcatch (err) {                                                                                            // 29\n\t\t\t\t\temitError(err)                                                                                          // 30\n\t\t\t\t}                                                                                                        // 31\n\t\t\t}                                                                                                         // 32\n\t\t}                                                                                                          // 33\n\t\td.intercept = function (fn) {                                                                              // 34\n\t\t\treturn function (err) {                                                                                   // 35\n\t\t\t\tif ( err ) {                                                                                             // 36\n\t\t\t\t\temitError(err)                                                                                          // 37\n\t\t\t\t}                                                                                                        // 38\n\t\t\t\telse {                                                                                                   // 39\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)                                                     // 40\n\t\t\t\t\ttry {                                                                                                   // 41\n\t\t\t\t\t\tfn.apply(null, args)                                                                                   // 42\n\t\t\t\t\t}                                                                                                       // 43\n\t\t\t\t\tcatch (err) {                                                                                           // 44\n\t\t\t\t\t\temitError(err)                                                                                         // 45\n\t\t\t\t\t}                                                                                                       // 46\n\t\t\t\t}                                                                                                        // 47\n\t\t\t}                                                                                                         // 48\n\t\t}                                                                                                          // 49\n\t\td.run = function (fn) {                                                                                    // 50\n\t\t\ttry {                                                                                                     // 51\n\t\t\t\tfn()                                                                                                     // 52\n\t\t\t}                                                                                                         // 53\n\t\t\tcatch (err) {                                                                                             // 54\n\t\t\t\temitError(err)                                                                                           // 55\n\t\t\t}                                                                                                         // 56\n\t\t\treturn this                                                                                               // 57\n\t\t}                                                                                                          // 58\n\t\td.dispose = function () {                                                                                  // 59\n\t\t\tthis.removeAllListeners()                                                                                 // 60\n\t\t\treturn this                                                                                               // 61\n\t\t}                                                                                                          // 62\n\t\td.enter = d.exit = function () {                                                                           // 63\n\t\t\treturn this                                                                                               // 64\n\t\t}                                                                                                          // 65\n\t\treturn d                                                                                                   // 66\n\t}                                                                                                           // 67\n\treturn domain                                                                                               // 68\n}).call(this)                                                                                                // 69\n                                                                                                             // 70\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]},\"events\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/events/package.json                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"events\";                                                                                     // 1\nexports.version = \"1.1.0\";                                                                                   // 2\nexports.main = \"./events.js\";                                                                                // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"events.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/meteor-node-stubs/node_modules/events/events.js                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// Copyright Joyent, Inc. and other Node contributors.                                                       // 1\n//                                                                                                           // 2\n// Permission is hereby granted, free of charge, to any person obtaining a                                   // 3\n// copy of this software and associated documentation files (the                                             // 4\n// \"Software\"), to deal in the Software without restriction, including                                       // 5\n// without limitation the rights to use, copy, modify, merge, publish,                                       // 6\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                 // 7\n// persons to whom the Software is furnished to do so, subject to the                                        // 8\n// following conditions:                                                                                     // 9\n//                                                                                                           // 10\n// The above copyright notice and this permission notice shall be included                                   // 11\n// in all copies or substantial portions of the Software.                                                    // 12\n//                                                                                                           // 13\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                   // 14\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                // 15\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                 // 16\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                  // 17\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                     // 18\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                 // 19\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                    // 20\n                                                                                                             // 21\nfunction EventEmitter() {                                                                                    // 22\n  this._events = this._events || {};                                                                         // 23\n  this._maxListeners = this._maxListeners || undefined;                                                      // 24\n}                                                                                                            // 25\nmodule.exports = EventEmitter;                                                                               // 26\n                                                                                                             // 27\n// Backwards-compat with node 0.10.x                                                                         // 28\nEventEmitter.EventEmitter = EventEmitter;                                                                    // 29\n                                                                                                             // 30\nEventEmitter.prototype._events = undefined;                                                                  // 31\nEventEmitter.prototype._maxListeners = undefined;                                                            // 32\n                                                                                                             // 33\n// By default EventEmitters will print a warning if more than 10 listeners are                               // 34\n// added to it. This is a useful default which helps finding memory leaks.                                   // 35\nEventEmitter.defaultMaxListeners = 10;                                                                       // 36\n                                                                                                             // 37\n// Obviously not all Emitters should be limited to 10. This function allows                                  // 38\n// that to be increased. Set to zero for unlimited.                                                          // 39\nEventEmitter.prototype.setMaxListeners = function(n) {                                                       // 40\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                     // 41\n    throw TypeError('n must be a positive number');                                                          // 42\n  this._maxListeners = n;                                                                                    // 43\n  return this;                                                                                               // 44\n};                                                                                                           // 45\n                                                                                                             // 46\nEventEmitter.prototype.emit = function(type) {                                                               // 47\n  var er, handler, len, args, i, listeners;                                                                  // 48\n                                                                                                             // 49\n  if (!this._events)                                                                                         // 50\n    this._events = {};                                                                                       // 51\n                                                                                                             // 52\n  // If there is no 'error' event listener then throw.                                                       // 53\n  if (type === 'error') {                                                                                    // 54\n    if (!this._events.error ||                                                                               // 55\n        (isObject(this._events.error) && !this._events.error.length)) {                                      // 56\n      er = arguments[1];                                                                                     // 57\n      if (er instanceof Error) {                                                                             // 58\n        throw er; // Unhandled 'error' event                                                                 // 59\n      }                                                                                                      // 60\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                               // 61\n    }                                                                                                        // 62\n  }                                                                                                          // 63\n                                                                                                             // 64\n  handler = this._events[type];                                                                              // 65\n                                                                                                             // 66\n  if (isUndefined(handler))                                                                                  // 67\n    return false;                                                                                            // 68\n                                                                                                             // 69\n  if (isFunction(handler)) {                                                                                 // 70\n    switch (arguments.length) {                                                                              // 71\n      // fast cases                                                                                          // 72\n      case 1:                                                                                                // 73\n        handler.call(this);                                                                                  // 74\n        break;                                                                                               // 75\n      case 2:                                                                                                // 76\n        handler.call(this, arguments[1]);                                                                    // 77\n        break;                                                                                               // 78\n      case 3:                                                                                                // 79\n        handler.call(this, arguments[1], arguments[2]);                                                      // 80\n        break;                                                                                               // 81\n      // slower                                                                                              // 82\n      default:                                                                                               // 83\n        args = Array.prototype.slice.call(arguments, 1);                                                     // 84\n        handler.apply(this, args);                                                                           // 85\n    }                                                                                                        // 86\n  } else if (isObject(handler)) {                                                                            // 87\n    args = Array.prototype.slice.call(arguments, 1);                                                         // 88\n    listeners = handler.slice();                                                                             // 89\n    len = listeners.length;                                                                                  // 90\n    for (i = 0; i < len; i++)                                                                                // 91\n      listeners[i].apply(this, args);                                                                        // 92\n  }                                                                                                          // 93\n                                                                                                             // 94\n  return true;                                                                                               // 95\n};                                                                                                           // 96\n                                                                                                             // 97\nEventEmitter.prototype.addListener = function(type, listener) {                                              // 98\n  var m;                                                                                                     // 99\n                                                                                                             // 100\n  if (!isFunction(listener))                                                                                 // 101\n    throw TypeError('listener must be a function');                                                          // 102\n                                                                                                             // 103\n  if (!this._events)                                                                                         // 104\n    this._events = {};                                                                                       // 105\n                                                                                                             // 106\n  // To avoid recursion in the case that type === \"newListener\"! Before                                      // 107\n  // adding it to the listeners, first emit \"newListener\".                                                   // 108\n  if (this._events.newListener)                                                                              // 109\n    this.emit('newListener', type,                                                                           // 110\n              isFunction(listener.listener) ?                                                                // 111\n              listener.listener : listener);                                                                 // 112\n                                                                                                             // 113\n  if (!this._events[type])                                                                                   // 114\n    // Optimize the case of one listener. Don't need the extra array object.                                 // 115\n    this._events[type] = listener;                                                                           // 116\n  else if (isObject(this._events[type]))                                                                     // 117\n    // If we've already got an array, just append.                                                           // 118\n    this._events[type].push(listener);                                                                       // 119\n  else                                                                                                       // 120\n    // Adding the second element, need to change to array.                                                   // 121\n    this._events[type] = [this._events[type], listener];                                                     // 122\n                                                                                                             // 123\n  // Check for listener leak                                                                                 // 124\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                          // 125\n    if (!isUndefined(this._maxListeners)) {                                                                  // 126\n      m = this._maxListeners;                                                                                // 127\n    } else {                                                                                                 // 128\n      m = EventEmitter.defaultMaxListeners;                                                                  // 129\n    }                                                                                                        // 130\n                                                                                                             // 131\n    if (m && m > 0 && this._events[type].length > m) {                                                       // 132\n      this._events[type].warned = true;                                                                      // 133\n      console.error('(node) warning: possible EventEmitter memory ' +                                        // 134\n                    'leak detected. %d listeners added. ' +                                                  // 135\n                    'Use emitter.setMaxListeners() to increase limit.',                                      // 136\n                    this._events[type].length);                                                              // 137\n      if (typeof console.trace === 'function') {                                                             // 138\n        // not supported in IE 10                                                                            // 139\n        console.trace();                                                                                     // 140\n      }                                                                                                      // 141\n    }                                                                                                        // 142\n  }                                                                                                          // 143\n                                                                                                             // 144\n  return this;                                                                                               // 145\n};                                                                                                           // 146\n                                                                                                             // 147\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                              // 148\n                                                                                                             // 149\nEventEmitter.prototype.once = function(type, listener) {                                                     // 150\n  if (!isFunction(listener))                                                                                 // 151\n    throw TypeError('listener must be a function');                                                          // 152\n                                                                                                             // 153\n  var fired = false;                                                                                         // 154\n                                                                                                             // 155\n  function g() {                                                                                             // 156\n    this.removeListener(type, g);                                                                            // 157\n                                                                                                             // 158\n    if (!fired) {                                                                                            // 159\n      fired = true;                                                                                          // 160\n      listener.apply(this, arguments);                                                                       // 161\n    }                                                                                                        // 162\n  }                                                                                                          // 163\n                                                                                                             // 164\n  g.listener = listener;                                                                                     // 165\n  this.on(type, g);                                                                                          // 166\n                                                                                                             // 167\n  return this;                                                                                               // 168\n};                                                                                                           // 169\n                                                                                                             // 170\n// emits a 'removeListener' event iff the listener was removed                                               // 171\nEventEmitter.prototype.removeListener = function(type, listener) {                                           // 172\n  var list, position, length, i;                                                                             // 173\n                                                                                                             // 174\n  if (!isFunction(listener))                                                                                 // 175\n    throw TypeError('listener must be a function');                                                          // 176\n                                                                                                             // 177\n  if (!this._events || !this._events[type])                                                                  // 178\n    return this;                                                                                             // 179\n                                                                                                             // 180\n  list = this._events[type];                                                                                 // 181\n  length = list.length;                                                                                      // 182\n  position = -1;                                                                                             // 183\n                                                                                                             // 184\n  if (list === listener ||                                                                                   // 185\n      (isFunction(list.listener) && list.listener === listener)) {                                           // 186\n    delete this._events[type];                                                                               // 187\n    if (this._events.removeListener)                                                                         // 188\n      this.emit('removeListener', type, listener);                                                           // 189\n                                                                                                             // 190\n  } else if (isObject(list)) {                                                                               // 191\n    for (i = length; i-- > 0;) {                                                                             // 192\n      if (list[i] === listener ||                                                                            // 193\n          (list[i].listener && list[i].listener === listener)) {                                             // 194\n        position = i;                                                                                        // 195\n        break;                                                                                               // 196\n      }                                                                                                      // 197\n    }                                                                                                        // 198\n                                                                                                             // 199\n    if (position < 0)                                                                                        // 200\n      return this;                                                                                           // 201\n                                                                                                             // 202\n    if (list.length === 1) {                                                                                 // 203\n      list.length = 0;                                                                                       // 204\n      delete this._events[type];                                                                             // 205\n    } else {                                                                                                 // 206\n      list.splice(position, 1);                                                                              // 207\n    }                                                                                                        // 208\n                                                                                                             // 209\n    if (this._events.removeListener)                                                                         // 210\n      this.emit('removeListener', type, listener);                                                           // 211\n  }                                                                                                          // 212\n                                                                                                             // 213\n  return this;                                                                                               // 214\n};                                                                                                           // 215\n                                                                                                             // 216\nEventEmitter.prototype.removeAllListeners = function(type) {                                                 // 217\n  var key, listeners;                                                                                        // 218\n                                                                                                             // 219\n  if (!this._events)                                                                                         // 220\n    return this;                                                                                             // 221\n                                                                                                             // 222\n  // not listening for removeListener, no need to emit                                                       // 223\n  if (!this._events.removeListener) {                                                                        // 224\n    if (arguments.length === 0)                                                                              // 225\n      this._events = {};                                                                                     // 226\n    else if (this._events[type])                                                                             // 227\n      delete this._events[type];                                                                             // 228\n    return this;                                                                                             // 229\n  }                                                                                                          // 230\n                                                                                                             // 231\n  // emit removeListener for all listeners on all events                                                     // 232\n  if (arguments.length === 0) {                                                                              // 233\n    for (key in this._events) {                                                                              // 234\n      if (key === 'removeListener') continue;                                                                // 235\n      this.removeAllListeners(key);                                                                          // 236\n    }                                                                                                        // 237\n    this.removeAllListeners('removeListener');                                                               // 238\n    this._events = {};                                                                                       // 239\n    return this;                                                                                             // 240\n  }                                                                                                          // 241\n                                                                                                             // 242\n  listeners = this._events[type];                                                                            // 243\n                                                                                                             // 244\n  if (isFunction(listeners)) {                                                                               // 245\n    this.removeListener(type, listeners);                                                                    // 246\n  } else if (listeners) {                                                                                    // 247\n    // LIFO order                                                                                            // 248\n    while (listeners.length)                                                                                 // 249\n      this.removeListener(type, listeners[listeners.length - 1]);                                            // 250\n  }                                                                                                          // 251\n  delete this._events[type];                                                                                 // 252\n                                                                                                             // 253\n  return this;                                                                                               // 254\n};                                                                                                           // 255\n                                                                                                             // 256\nEventEmitter.prototype.listeners = function(type) {                                                          // 257\n  var ret;                                                                                                   // 258\n  if (!this._events || !this._events[type])                                                                  // 259\n    ret = [];                                                                                                // 260\n  else if (isFunction(this._events[type]))                                                                   // 261\n    ret = [this._events[type]];                                                                              // 262\n  else                                                                                                       // 263\n    ret = this._events[type].slice();                                                                        // 264\n  return ret;                                                                                                // 265\n};                                                                                                           // 266\n                                                                                                             // 267\nEventEmitter.prototype.listenerCount = function(type) {                                                      // 268\n  if (this._events) {                                                                                        // 269\n    var evlistener = this._events[type];                                                                     // 270\n                                                                                                             // 271\n    if (isFunction(evlistener))                                                                              // 272\n      return 1;                                                                                              // 273\n    else if (evlistener)                                                                                     // 274\n      return evlistener.length;                                                                              // 275\n  }                                                                                                          // 276\n  return 0;                                                                                                  // 277\n};                                                                                                           // 278\n                                                                                                             // 279\nEventEmitter.listenerCount = function(emitter, type) {                                                       // 280\n  return emitter.listenerCount(type);                                                                        // 281\n};                                                                                                           // 282\n                                                                                                             // 283\nfunction isFunction(arg) {                                                                                   // 284\n  return typeof arg === 'function';                                                                          // 285\n}                                                                                                            // 286\n                                                                                                             // 287\nfunction isNumber(arg) {                                                                                     // 288\n  return typeof arg === 'number';                                                                            // 289\n}                                                                                                            // 290\n                                                                                                             // 291\nfunction isObject(arg) {                                                                                     // 292\n  return typeof arg === 'object' && arg !== null;                                                            // 293\n}                                                                                                            // 294\n                                                                                                             // 295\nfunction isUndefined(arg) {                                                                                  // 296\n  return arg === void 0;                                                                                     // 297\n}                                                                                                            // 298\n                                                                                                             // 299\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"process\":{\"package.json\":function(require,exports){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/process/package.json                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nexports.name = \"process\";                                                                                    // 1\nexports.version = \"0.5.2\";                                                                                   // 2\nexports.main = \"./browser.js\";                                                                               // 3\n                                                                                                             // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"browser.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// node_modules/process/browser.js                                                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n// shim for using process in browser                                                                         // 1\n                                                                                                             // 2\nvar process = module.exports = {};                                                                           // 3\n                                                                                                             // 4\nprocess.nextTick = (function () {                                                                            // 5\n    var canSetImmediate = typeof window !== 'undefined'                                                      // 6\n    && window.setImmediate;                                                                                  // 7\n    var canPost = typeof window !== 'undefined'                                                              // 8\n    && window.postMessage && window.addEventListener                                                         // 9\n    ;                                                                                                        // 10\n                                                                                                             // 11\n    if (canSetImmediate) {                                                                                   // 12\n        return function (f) { return window.setImmediate(f) };                                               // 13\n    }                                                                                                        // 14\n                                                                                                             // 15\n    if (canPost) {                                                                                           // 16\n        var queue = [];                                                                                      // 17\n        window.addEventListener('message', function (ev) {                                                   // 18\n            var source = ev.source;                                                                          // 19\n            if ((source === window || source === null) && ev.data === 'process-tick') {                      // 20\n                ev.stopPropagation();                                                                        // 21\n                if (queue.length > 0) {                                                                      // 22\n                    var fn = queue.shift();                                                                  // 23\n                    fn();                                                                                    // 24\n                }                                                                                            // 25\n            }                                                                                                // 26\n        }, true);                                                                                            // 27\n                                                                                                             // 28\n        return function nextTick(fn) {                                                                       // 29\n            queue.push(fn);                                                                                  // 30\n            window.postMessage('process-tick', '*');                                                         // 31\n        };                                                                                                   // 32\n    }                                                                                                        // 33\n                                                                                                             // 34\n    return function nextTick(fn) {                                                                           // 35\n        setTimeout(fn, 0);                                                                                   // 36\n    };                                                                                                       // 37\n})();                                                                                                        // 38\n                                                                                                             // 39\nprocess.title = 'browser';                                                                                   // 40\nprocess.browser = true;                                                                                      // 41\nprocess.env = {};                                                                                            // 42\nprocess.argv = [];                                                                                           // 43\n                                                                                                             // 44\nprocess.binding = function (name) {                                                                          // 45\n    throw new Error('process.binding is not supported');                                                     // 46\n}                                                                                                            // 47\n                                                                                                             // 48\n// TODO(shtylman)                                                                                            // 49\nprocess.cwd = function () { return '/' };                                                                    // 50\nprocess.chdir = function (dir) {                                                                             // 51\n    throw new Error('process.chdir is not supported');                                                       // 52\n};                                                                                                           // 53\n                                                                                                             // 54\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},{\"extensions\":[\".js\",\".json\"]});\nvar exports = require(\"./node_modules/meteor/modules/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.modules = exports, {\n  meteorInstall: meteorInstall,\n  Buffer: Buffer,\n  process: process\n});\n\n})();\n","servePath":"/packages/modules.js","sourceMap":{"version":3,"sources":["/packages/modules/client.js","/packages/modules/buffer.js","/packages/modules/css.js","/packages/modules/install-packages.js","/packages/modules/process.js","/packages/modules/stubs.js","node_modules/meteor/modules/node_modules/reify/lib/runtime.js","node_modules/meteor/modules/node_modules/reify/lib/entry.js","node_modules/meteor/modules/node_modules/reify/lib/utils.js","node_modules/meteor-node-stubs/package.json","node_modules/meteor-node-stubs/index.js","node_modules/meteor-node-stubs/map.json","node_modules/meteor-node-stubs/deps/buffer.js","node_modules/meteor-node-stubs/deps/domain.js","node_modules/meteor-node-stubs/node_modules/buffer/package.json","node_modules/meteor-node-stubs/node_modules/buffer/index.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/base64-js/lib/b64.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/ieee754/index.js","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/package.json","node_modules/meteor-node-stubs/node_modules/buffer/node_modules/isarray/index.js","node_modules/meteor-node-stubs/node_modules/domain-browser/package.json","node_modules/meteor-node-stubs/node_modules/domain-browser/index.js","node_modules/meteor-node-stubs/node_modules/events/package.json","node_modules/meteor-node-stubs/node_modules/events/events.js","node_modules/process/package.json","node_modules/process/browser.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iH;;;;;;;;;;;ACPA;AACA;AACA;AACA,iH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;ACnFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA,immH;;;;;;;;;;;AC5NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;AC9CA;AACA;AACA;AACA,iH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;AC5BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;ACxCA;AACA,iH;;;;;;;;;;;ACDA;AACA,iH;;;;;;;;;;;ACDA;AACA;AACA;AACA,ioH;;;;;;;;;;;ACh7CA;AACA;AACA;AACA,imH;;;;;;;;;;;AC7GA;AACA;AACA;AACA,iH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;ACpFA;AACA;AACA;AACA,iH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA,iH;;;;;;;;;;;ACLA;AACA;AACA;AACA,iH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH;;;;;;;;;;;ACrEA;AACA;AACA;AACA,imH;;;;;;;;;;;AC1SA;AACA;AACA;AACA,iH;;;;;;;;;;;ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kH","file":"/packages/modules.js","sourcesContent":["require(\"./install-packages.js\");\nrequire(\"./stubs.js\");\nrequire(\"./buffer.js\");\nrequire(\"./process.js\");\nrequire(\"reify/lib/runtime\").enable(module.constructor);\n\nexports.addStyles = require(\"./css\").addStyles;\n","try {\n  Buffer = global.Buffer || require(\"buffer\").Buffer;\n} catch (noBuffer) {}\n","var doc = document;\nvar head = doc.getElementsByTagName(\"head\").item(0);\n\nexports.addStyles = function (css) {\n  var style = doc.createElement(\"style\");\n\n  style.setAttribute(\"type\", \"text/css\");\n\n  // https://msdn.microsoft.com/en-us/library/ms535871(v=vs.85).aspx\n  var internetExplorerSheetObject =\n    style.sheet || // Edge/IE11.\n    style.styleSheet; // Older IEs.\n\n  if (internetExplorerSheetObject) {\n    internetExplorerSheetObject.cssText = css;\n  } else {\n    style.appendChild(doc.createTextNode(css));\n  }\n\n  return head.appendChild(style);\n};\n","function install(name, mainModule) {\n  var meteorDir = {};\n\n  // Given a package name <name>, install a stub module in the\n  // /node_modules/meteor directory called <name>.js, so that\n  // require.resolve(\"meteor/<name>\") will always return\n  // /node_modules/meteor/<name>.js instead of something like\n  // /node_modules/meteor/<name>/index.js, in the rare but possible event\n  // that the package contains a file called index.js (#6590).\n\n  if (mainModule) {\n    meteorDir[name + \".js\"] = [mainModule, function (require, e, module) {\n      module.exports = require(mainModule);\n    }];\n  } else {\n    // back compat with old Meteor packages\n    meteorDir[name + \".js\"] = function (r, e, module) {\n      module.exports = Package[name];\n    };\n  }\n\n  meteorInstall({\n    node_modules: {\n      meteor: meteorDir\n    }\n  });\n}\n\n// This file will be modified during computeJsOutputFilesMap to include\n// install(<name>) calls for every Meteor package.\n\ninstall(\"underscore\");\ninstall(\"meteor\");\ninstall(\"meteor-base\");\ninstall(\"mobile-experience\");\ninstall(\"modules-runtime\");\ninstall(\"modules\", \"meteor/modules/client.js\");\ninstall(\"es5-shim\", \"meteor/es5-shim/client.js\");\ninstall(\"promise\", \"meteor/promise/client.js\");\ninstall(\"ecmascript-runtime\", \"meteor/ecmascript-runtime/runtime.js\");\ninstall(\"babel-compiler\");\ninstall(\"ecmascript\");\ninstall(\"base64\");\ninstall(\"ejson\");\ninstall(\"id-map\");\ninstall(\"ordered-dict\");\ninstall(\"tracker\");\ninstall(\"babel-runtime\");\ninstall(\"random\");\ninstall(\"mongo-id\");\ninstall(\"diff-sequence\");\ninstall(\"geojson-utils\", \"meteor/geojson-utils/main.js\");\ninstall(\"minimongo\");\ninstall(\"check\", \"meteor/check/match.js\");\ninstall(\"retry\");\ninstall(\"ddp-common\");\ninstall(\"reload\");\ninstall(\"ddp-client\");\ninstall(\"ddp\");\ninstall(\"ddp-server\");\ninstall(\"allow-deny\");\ninstall(\"insecure\");\ninstall(\"mongo\");\ninstall(\"blaze-html-templates\");\ninstall(\"reactive-var\");\ninstall(\"jquery\", \"meteor/jquery/main.js\");\ninstall(\"standard-minifier-css\");\ninstall(\"standard-minifier-js\");\ninstall(\"autopublish\");\ninstall(\"glittershark:meteor-express\");\ninstall(\"yuukan:streamy\");\ninstall(\"webapp\");\ninstall(\"livedata\");\ninstall(\"hot-code-push\");\ninstall(\"deps\");\ninstall(\"htmljs\");\ninstall(\"observe-sequence\");\ninstall(\"blaze\");\ninstall(\"spacebars\");\ninstall(\"templating\");\ninstall(\"launch-screen\");\ninstall(\"ui\");\ninstall(\"autoupdate\");\n","try {\n  // The application can run `npm install process` to provide its own\n  // process stub; otherwise this module will provide a partial stub.\n  process = global.process || require(\"process\");\n} catch (noProcess) {\n  process = {};\n}\n\nif (Meteor.isServer) {\n  // Make require(\"process\") work on the server in all versions of Node.\n  meteorInstall({\n    node_modules: {\n      \"process.js\": function (r, e, module) {\n        module.exports = process;\n      }\n    }\n  });\n} else {\n  process.platform = \"browser\";\n  process.nextTick = process.nextTick || Meteor._setImmediate;\n}\n\nif (typeof process.env !== \"object\") {\n  process.env = {};\n}\n\n_.extend(process.env, meteorEnv);\n","try {\n  // When meteor-node-stubs is installed in the application's root\n  // node_modules directory, requiring it here installs aliases for stubs\n  // for all Node built-in modules, such as fs, util, and http.\n  require(\"meteor-node-stubs\");\n} catch (noStubs) {}\n","var Entry = require(\"./entry.js\").Entry;\nvar utils = require(\"./utils.js\");\n\nexports.enable = function (Module) {\n  var Mp = Module.prototype;\n\n  if (typeof Mp.import === \"function\" &&\n      typeof Mp.export === \"function\") {\n    // If the Mp.{import,export} methods have already been\n    // defined, abandon reification immediately.\n    return Module;\n  }\n\n  // Platform-specific code should implement this method however\n  // appropriate. Module.prototype.resolve(id) should return an absolute\n  // version of the given module identifier, like require.resolve.\n  Mp.resolve = Mp.resolve || function resolve(id) {\n    throw new Error(\"Module.prototype.resolve not implemented\");\n  };\n\n  // Platform-specific code should find a way to call this method whenever\n  // the module system is about to return module.exports from require. This\n  // might happen more than once per module, in case of dependency cycles,\n  // so we want Module.prototype.runModuleSetters to run each time.\n  Mp.runModuleSetters = function runModuleSetters(valueToPassThrough) {\n    var entry = Entry.get(this.id);\n    if (entry) {\n      entry.runModuleSetters(this);\n    }\n\n    // Assignments to exported local variables get wrapped with calls to\n    // module.runModuleSetters, so module.runModuleSetters returns the\n    // valueToPassThrough parameter to allow the value of the original\n    // expression to pass through. For example,\n    //\n    //   export var a = 1;\n    //   console.log(a += 3);\n    //\n    // becomes\n    //\n    //   module.export(\"a\", () => a);\n    //   var a = 1;\n    //   console.log(module.runModuleSetters(a += 3));\n    //\n    // This ensures module.runModuleSetters runs immediately after the\n    // assignment, and does not interfere with the larger computation.\n    return valueToPassThrough;\n  };\n\n  function setESModule(module) {\n    var exports = module.exports;\n    if (exports && typeof exports === \"object\") {\n      exports.__esModule = true;\n    }\n  }\n\n  Mp.import = function (id, setters) {\n    var module = this;\n    setESModule(module);\n\n    var absoluteId = module.resolve(id);\n\n    if (setters && typeof setters === \"object\") {\n      var entry = Entry.getOrCreate(absoluteId);\n      entry.addSetters(module, setters);\n    }\n\n    var countBefore = entry && entry.runCount;\n    var exports = typeof module.require === \"function\"\n      ? module.require(absoluteId)\n      : require(absoluteId);\n\n    if (entry && entry.runCount === countBefore) {\n      // If require(absoluteId) didn't run any setters for this entry,\n      // perhaps because it's not the first time this module has been\n      // required, run the setters now using an object that passes as the\n      // real module object.\n      entry.runModuleSetters({\n        id: absoluteId,\n        exports: exports,\n        getExportByName: Mp.getExportByName\n      });\n    }\n  };\n\n  // Register getter functions for local variables in the scope of an\n  // export statement. The keys of the getters object are exported names,\n  // and the values are functions that return local values.\n  Mp.export = function (getters) {\n    var module = this;\n    setESModule(module);\n\n    if (utils.isPlainObject(getters)) {\n      Entry.getOrCreate(module.id).addGetters(getters);\n    }\n\n    if (module.loaded) {\n      // If the module has already been evaluated, then we need to trigger\n      // another round of entry.runModuleSetters calls, which begins by\n      // calling entry.runModuleGetters(module).\n      module.runModuleSetters();\n    }\n  };\n\n  // This method can be overridden by client code to implement custom export\n  // naming logic. The current implementation works well with Babel's\n  // __esModule convention.\n  Mp.getExportByName = function (name) {\n    var exports = this.exports;\n\n    if (name === \"*\") {\n      return exports;\n    }\n\n    if (name === \"default\" &&\n        ! (exports &&\n           typeof exports === \"object\" &&\n           exports.__esModule &&\n           \"default\" in exports)) {\n      return exports;\n    }\n\n    return exports && exports[name];\n  };\n\n  return Module;\n};\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar entryMap = Object.create(null);\nvar utils = require(\"./utils.js\");\n\nfunction Entry(id) {\n  // Same as module.id for this module.\n  this.id = id;\n  // The number of times this.runModuleSetters has been called.\n  this.runCount = 0;\n  // Setters for assigning to local variables in parent modules.\n  this.setters = Object.create(null);\n  // Getters for local variables exported from this module.\n  this.getters = Object.create(null);\n}\n\nvar Ep = Entry.prototype;\n\nEntry.get = function (id) {\n  return entryMap[id] || null;\n};\n\nEntry.getOrCreate = function (id) {\n  return entryMap[id] = entryMap[id] || new Entry(id);\n};\n\nEp.addSetters = function (parent, setters) {\n  var entry = this;\n\n  Object.keys(setters).forEach(function (name) {\n    var setter = setters[name];\n    if (typeof setter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      setter.parent = parent;\n      (entry.setters[name] =\n       entry.setters[name] || []\n      ).push(setter);\n    }\n  });\n};\n\nEp.addGetters = function (getters) {\n  var entry = this;\n  Object.keys(getters).forEach(function (name) {\n    var getter = getters[name];\n    if (typeof getter === \"function\" &&\n        // Ignore any requests for the exports.__esModule property.\"\n        name !== \"__esModule\") {\n      // Should this throw if hasOwn.call(this.getters, name)?\n      entry.getters[name] = getter;\n    }\n  });\n};\n\nfunction runModuleSetters(module) {\n  var entry = entryMap[module.id];\n  if (entry) {\n    entry.runModuleSetters(module);\n  }\n}\n\nfunction runModuleGetters(module) {\n  var entry = entryMap[module.id];\n  return entry ? entry.runModuleGetters(module) : 0;\n}\n\nEp.runModuleGetters = function (module) {\n  var entry = this;\n  var changeCount = 0;\n\n  Object.keys(entry.getters).forEach(function (name) {\n    if (entry.runGetter(module, name)) {\n      ++changeCount;\n    }\n  });\n\n  return changeCount;\n};\n\n// Returns true iff the getter updated module.exports with a new value.\nEp.runGetter = function (module, name) {\n  if (! hasOwn.call(this.getters, name)) {\n    return false;\n  }\n\n  var getter = this.getters[name];\n  try {\n    var value = getter.call(module);\n  } catch (e) {}\n  var exports = module.exports;\n\n  if (! hasOwn.call(exports, name) ||\n      exports[name] !== value) {\n    // We update module.exports[name] with the current value so that\n    // CommonJS require calls remain consistent with module.import.\n    exports[name] = value;\n    return true;\n  }\n\n  return false;\n};\n\n// Called whenever module.exports might have changed, to trigger any\n// setters associated with the newly exported values.\nEp.runModuleSetters = function (module) {\n  var entry = this;\n  var names = Object.keys(entry.setters);\n\n  // Make sure module.exports is up to date before we call\n  // module.getExportByName(name).\n  entry.runModuleGetters(module);\n\n  // Invoke the given callback once for every (setter, value, name) triple\n  // that needs to be called. Note that forEachSetter does not call any\n  // setters itself, only the given callback.\n  function forEachSetter(callback, context) {\n    names.forEach(function (name) {\n      entry.setters[name].forEach(function (setter) {\n        var value = module.getExportByName(name);\n        if (name === \"*\") {\n          Object.keys(value).forEach(function (name) {\n            call(setter, value[name], name);\n          });\n        } else {\n          call(setter, value, name);\n        }\n      });\n    });\n\n    function call(setter, value, name) {\n      if (name === \"__esModule\") {\n        // Ignore setters asking for module.exports.__esModule.\n        return;\n      }\n\n      setter.last = setter.last || Object.create(null);\n\n      if (! hasOwn.call(setter.last, name) ||\n          setter.last[name] !== value) {\n        // Only invoke the callback if we have not called this setter\n        // (with a value of this name) before, or the current value is\n        // different from the last value we passed to this setter.\n        return callback.apply(context, arguments);\n      }\n    }\n  }\n\n  // Every three elements of this list form a (setter, value, name) triple\n  // that needs to be invoked.\n  var settersToCall = [];\n\n  // Lazily-initialized objects mapping parent module identifiers to\n  // relevant parent module objects and snapshots of their exports.\n  var relevantParents;\n  var parentSnapshots;\n\n  // Take snapshots of setter.parent.exports for any setters that we are\n  // planning to call, so that we can later determine if calling the\n  // setters modified any of those exports objects.\n  forEachSetter(function (setter, value, name) {\n    var parent = setter.parent;\n    parentSnapshots = parentSnapshots || Object.create(null);\n    if (! hasOwn.call(parentSnapshots, parent.id)) {\n      relevantParents = relevantParents || Object.create(null);\n      relevantParents[parent.id] = parent;\n      if (utils.isPlainObject(parent.exports)) {\n        // If parent.exports is an object, make a shallow clone of it so\n        // that we can see if it changes as a result of calling setters.\n        parentSnapshots[parent.id] = utils.assign({}, parent.exports);\n      } else {\n        // If parent.exports is not an object, the \"snapshot\" is just the\n        // value of parent.exports.\n        parentSnapshots[parent.id] = parent.exports;\n      }\n    }\n\n    // Push three elements at a time to avoid creating wrapper arrays for\n    // each (setter, value, name) triple. Note the i += 3 below.\n    settersToCall.push(setter, value, name);\n  });\n\n  // Now call all the setters that we decided we need to call.\n  for (var i = 0; i < settersToCall.length; i += 3) {\n    var setter = settersToCall[i];\n    var value = settersToCall[i + 1];\n    var name = settersToCall[i + 2];\n    setter.call(module, setter.last[name] = value, name);\n  }\n\n  ++entry.runCount;\n\n  if (! relevantParents) {\n    // If we never called takeSnapshot, then we can avoid checking\n    // relevantParents and parentSnapshots below.\n    return;\n  }\n\n  // If any of the setters updated the module.exports of a parent module,\n  // or updated local variables that are exported by that parent module,\n  // then we must re-run any setters registered by that parent module.\n  Object.keys(relevantParents).forEach(function (id) {\n    var parent = relevantParents[id];\n\n    if (runModuleGetters(parent) > 0) {\n      return runModuleSetters(parent);\n    }\n\n    var exports = parent.exports;\n    var snapshot = parentSnapshots[parent.id];\n    if (utils.shallowObjEqual(exports, snapshot)) {\n      // If parent.exports have not changed since we took the snapshot,\n      // then we do not need to run the parent's setters.\n      return;\n    }\n\n    runModuleSetters(parent);\n  });\n};\n\nexports.Entry = Entry;\n","var hasOwn = Object.prototype.hasOwnProperty;\nvar objToStr = Object.prototype.toString;\nvar objStr = objToStr.call({});\n\nfunction isPlainObject(value) {\n  return objToStr.call(value) === objStr;\n}\nexports.isPlainObject = isPlainObject;\n\nexports.assign = Object.assign || function (obj) {\n  var argc = arguments.length;\n  for (var i = 1; i < argc; ++i) {\n    var arg = arguments[i];\n    if (arg && typeof arg === \"object\") {\n      var keys = Object.keys(arg);\n      for (var k = 0; k < keys.length; ++k) {\n        var key = keys[k];\n        obj[key] = arg[key];\n      }\n    }\n  }\n  return obj;\n};\n\nexports.shallowObjEqual = function(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (! isPlainObject(a) ||\n      ! isPlainObject(b)) {\n    return false;\n  }\n\n  var aKeys = Object.keys(a);\n  var bKeys = Object.keys(b);\n\n  if (aKeys.length !== bKeys.length) {\n    return false;\n  }\n\n  return aKeys.every(function (key) {\n    return hasOwn.call(b, key) &&\n      a[key] === b[key];\n  });\n};\n","exports.name = \"meteor-node-stubs\";\nexports.version = \"0.2.3\";\nexports.main = \"index.js\";\n","var map = require(\"./map.json\");\nvar meteorAliases = {};\n\nObject.keys(map).forEach(function (id) {\n  if (typeof map[id] === \"string\") {\n    try {\n      exports[id] = meteorAliases[id + \".js\"] =\n        require.resolve(map[id]);\n    } catch (e) {\n      // Resolution can fail at runtime if the stub was not included in the\n      // bundle because nothing depended on it.\n    }\n  } else {\n    exports[id] = map[id];\n    meteorAliases[id + \".js\"] = function(){};\n  }\n});\n\nif (typeof meteorInstall === \"function\") {\n  meteorInstall({\n    // Install the aliases into a node_modules directory one level up from\n    // the root directory, so that they do not clutter the namespace\n    // available to apps and packages.\n    \"..\": {\n      node_modules: meteorAliases\n    }\n  });\n}\n","module.exports = {\n  \"assert\": \"assert/\",\n  \"buffer\": \"buffer/\",\n  \"child_process\": null,\n  \"cluster\": null,\n  \"console\": \"console-browserify\",\n  \"constants\": \"constants-browserify\",\n  \"crypto\": \"crypto-browserify\",\n  \"dgram\": null,\n  \"dns\": null,\n  \"domain\": \"domain-browser\",\n  \"events\": \"events/\",\n  \"fs\": null,\n  \"http\": \"http-browserify\",\n  \"https\": \"https-browserify\",\n  \"module\": null,\n  \"net\": null,\n  \"os\": \"os-browserify/browser.js\",\n  \"path\": \"path-browserify\",\n  \"process\": \"process/browser.js\",\n  \"punycode\": \"punycode/\",\n  \"querystring\": \"querystring-es3/\",\n  \"readline\": null,\n  \"repl\": null,\n  \"stream\": \"stream-browserify\",\n  \"_stream_duplex\": \"readable-stream/duplex.js\",\n  \"_stream_passthrough\": \"readable-stream/passthrough.js\",\n  \"_stream_readable\": \"readable-stream/readable.js\",\n  \"_stream_transform\": \"readable-stream/transform.js\",\n  \"_stream_writable\": \"readable-stream/writable.js\",\n  \"string_decoder\": \"string_decoder/\",\n  \"sys\": \"util/util.js\",\n  \"timers\": \"timers-browserify\",\n  \"tls\": null,\n  \"tty\": \"tty-browserify\",\n  \"url\": \"url/\",\n  \"util\": \"util/util.js\",\n  \"vm\": \"vm-browserify\",\n  \"zlib\": \"browserify-zlib\"\n};\n","require(\"buffer/\");\n","require(\"domain-browser\");\n","exports.name = \"buffer\";\nexports.version = \"4.5.1\";\nexports.main = \"index.js\";\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\nBuffer.poolSize = 8192 // not used by this implementation\n\nvar rootParent = {}\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.foo = function () { return 42 }\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\nfunction Buffer (arg) {\n  if (!(this instanceof Buffer)) {\n    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.\n    if (arguments.length > 1) return new Buffer(arg, arguments[1])\n    return new Buffer(arg)\n  }\n\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    this.length = 0\n    this.parent = undefined\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    return fromNumber(this, arg)\n  }\n\n  // Slightly less common case.\n  if (typeof arg === 'string') {\n    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')\n  }\n\n  // Unusual.\n  return fromObject(this, arg)\n}\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction fromNumber (that, length) {\n  that = allocate(that, length < 0 ? 0 : checked(length) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < length; i++) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'\n\n  // Assumption: byteLength() return value is always < kMaxLength.\n  var length = byteLength(string, encoding) | 0\n  that = allocate(that, length)\n\n  that.write(string, encoding)\n  return that\n}\n\nfunction fromObject (that, object) {\n  if (Buffer.isBuffer(object)) return fromBuffer(that, object)\n\n  if (isArray(object)) return fromArray(that, object)\n\n  if (object == null) {\n    throw new TypeError('must start with number, buffer, array or string')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined') {\n    if (object.buffer instanceof ArrayBuffer) {\n      return fromTypedArray(that, object)\n    }\n    if (object instanceof ArrayBuffer) {\n      return fromArrayBuffer(that, object)\n    }\n  }\n\n  if (object.length) return fromArrayLike(that, object)\n\n  return fromJsonObject(that, object)\n}\n\nfunction fromBuffer (that, buffer) {\n  var length = checked(buffer.length) | 0\n  that = allocate(that, length)\n  buffer.copy(that, 0, 0, length)\n  return that\n}\n\nfunction fromArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Duplicate of fromArray() to keep fromArray() monomorphic.\nfunction fromTypedArray (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  // Truncating the elements is probably not what people expect from typed\n  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior\n  // of the old Buffer constructor.\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(array)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromTypedArray(that, new Uint8Array(array))\n  }\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = checked(array.length) | 0\n  that = allocate(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\n// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.\n// Returns a zero-length buffer for inputs that don't conform to the spec.\nfunction fromJsonObject (that, object) {\n  var array\n  var length = 0\n\n  if (object.type === 'Buffer' && isArray(object.data)) {\n    array = object.data\n    length = checked(array.length) | 0\n  }\n  that = allocate(that, length)\n\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n} else {\n  // pre-set for values that may exist in the future\n  Buffer.prototype.length = undefined\n  Buffer.prototype.parent = undefined\n}\n\nfunction allocate (that, length) {\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that.length = length\n  }\n\n  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1\n  if (fromPool) that.parent = rootParent\n\n  return that\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (subject, encoding) {\n  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)\n\n  var buf = new Buffer(subject, encoding)\n  delete buf.parent\n  return buf\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'binary':\n    case 'base64':\n    case 'raw':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')\n\n  if (list.length === 0) {\n    return new Buffer(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; i++) {\n      length += list[i].length\n    }\n  }\n\n  var buf = new Buffer(length)\n  var pos = 0\n  for (i = 0; i < list.length; i++) {\n    var item = list[i]\n    item.copy(buf, pos)\n    pos += item.length\n  }\n  return buf\n}\n\nfunction byteLength (string, encoding) {\n  if (typeof string !== 'string') string = '' + string\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'binary':\n      // Deprecated\n      case 'raw':\n      case 'raws':\n        return len\n      case 'utf8':\n      case 'utf-8':\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  start = start | 0\n  end = end === undefined || end === Infinity ? this.length : end | 0\n\n  if (!encoding) encoding = 'utf8'\n  if (start < 0) start = 0\n  if (end > this.length) end = this.length\n  if (end <= start) return ''\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'binary':\n        return binarySlice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  return Buffer.compare(this, b)\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset) {\n  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff\n  else if (byteOffset < -0x80000000) byteOffset = -0x80000000\n  byteOffset >>= 0\n\n  if (this.length === 0) return -1\n  if (byteOffset >= this.length) return -1\n\n  // Negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)\n\n  if (typeof val === 'string') {\n    if (val.length === 0) return -1 // special case: looking for empty string always fails\n    return String.prototype.indexOf.call(this, val, byteOffset)\n  }\n  if (Buffer.isBuffer(val)) {\n    return arrayIndexOf(this, val, byteOffset)\n  }\n  if (typeof val === 'number') {\n    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {\n      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)\n    }\n    return arrayIndexOf(this, [ val ], byteOffset)\n  }\n\n  function arrayIndexOf (arr, val, byteOffset) {\n    var foundIndex = -1\n    for (var i = 0; byteOffset + i < arr.length; i++) {\n      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex\n      } else {\n        foundIndex = -1\n      }\n    }\n    return -1\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new Error('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; i++) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) throw new Error('Invalid hex string')\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction binaryWrite (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    var swap = encoding\n    encoding = offset\n    offset = length | 0\n    length = swap\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'binary':\n        return binaryWrite(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction binarySlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; i++) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; i++) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; i++) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  if (newBuf.length) newBuf.parent = this.parent || this\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('value is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = value < 0 ? 1 : 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('index out of range')\n  if (offset < 0) throw new RangeError('index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; i--) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; i++) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// fill(value, start=0, end=buffer.length)\nBuffer.prototype.fill = function fill (value, start, end) {\n  if (!value) value = 0\n  if (!start) start = 0\n  if (!end) end = this.length\n\n  if (end < start) throw new RangeError('end < start')\n\n  // Fill 0 bytes; we're done\n  if (end === start) return\n  if (this.length === 0) return\n\n  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')\n  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')\n\n  var i\n  if (typeof value === 'number') {\n    for (i = start; i < end; i++) {\n      this[i] = value\n    }\n  } else {\n    var bytes = utf8ToBytes(value.toString())\n    var len = bytes.length\n    for (i = start; i < end; i++) {\n      this[i] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; i++) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; i++) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; i++) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n","exports.name = \"base64-js\";\nexports.version = \"1.1.2\";\nexports.main = \"lib/b64.js\";\n","'use strict'\n\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nfunction init () {\n  var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n  for (var i = 0, len = code.length; i < len; ++i) {\n    lookup[i] = code[i]\n    revLookup[code.charCodeAt(i)] = i\n  }\n\n  revLookup['-'.charCodeAt(0)] = 62\n  revLookup['_'.charCodeAt(0)] = 63\n}\n\ninit()\n\nfunction toByteArray (b64) {\n  var i, j, l, tmp, placeHolders, arr\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // the number of equal signs (place holders)\n  // if there are two placeholders, than the two characters before it\n  // represent one byte\n  // if there is only one, then the three characters before it represent 2 bytes\n  // this is just a cheap hack to not do indexOf twice\n  placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0\n\n  // base64 is 4/3 + up to two characters of the original data\n  arr = new Arr(len * 3 / 4 - placeHolders)\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  l = placeHolders > 0 ? len - 4 : len\n\n  var L = 0\n\n  for (i = 0, j = 0; i < l; i += 4, j += 3) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]\n    arr[L++] = (tmp >> 16) & 0xFF\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  if (placeHolders === 2) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[L++] = tmp & 0xFF\n  } else if (placeHolders === 1) {\n    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[L++] = (tmp >> 8) & 0xFF\n    arr[L++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var output = ''\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    output += lookup[tmp >> 2]\n    output += lookup[(tmp << 4) & 0x3F]\n    output += '=='\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])\n    output += lookup[tmp >> 10]\n    output += lookup[(tmp >> 4) & 0x3F]\n    output += lookup[(tmp << 2) & 0x3F]\n    output += '='\n  }\n\n  parts.push(output)\n\n  return parts.join('')\n}\n","exports.name = \"ieee754\";\nexports.version = \"1.1.6\";\nexports.main = \"index.js\";\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = nBytes * 8 - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = (value * c - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","exports.name = \"isarray\";\nexports.version = \"1.0.0\";\nexports.main = \"index.js\";\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","exports.name = \"domain-browser\";\nexports.version = \"1.1.7\";\nexports.main = \"./index.js\";\n","// This file should be ES5 compatible\n/* eslint prefer-spread:0, no-var:0, prefer-reflect:0, no-magic-numbers:0 */\n'use strict'\nmodule.exports = (function () {\n\t// Import Events\n\tvar events = require('events')\n\n\t// Export Domain\n\tvar domain = {}\n\tdomain.createDomain = domain.create = function () {\n\t\tvar d = new events.EventEmitter()\n\n\t\tfunction emitError (e) {\n\t\t\td.emit('error', e)\n\t\t}\n\n\t\td.add = function (emitter) {\n\t\t\temitter.on('error', emitError)\n\t\t}\n\t\td.remove = function (emitter) {\n\t\t\temitter.removeListener('error', emitError)\n\t\t}\n\t\td.bind = function (fn) {\n\t\t\treturn function () {\n\t\t\t\tvar args = Array.prototype.slice.call(arguments)\n\t\t\t\ttry {\n\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t}\n\t\t\t\tcatch (err) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.intercept = function (fn) {\n\t\t\treturn function (err) {\n\t\t\t\tif ( err ) {\n\t\t\t\t\temitError(err)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar args = Array.prototype.slice.call(arguments, 1)\n\t\t\t\t\ttry {\n\t\t\t\t\t\tfn.apply(null, args)\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err) {\n\t\t\t\t\t\temitError(err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\td.run = function (fn) {\n\t\t\ttry {\n\t\t\t\tfn()\n\t\t\t}\n\t\t\tcatch (err) {\n\t\t\t\temitError(err)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\t\td.dispose = function () {\n\t\t\tthis.removeAllListeners()\n\t\t\treturn this\n\t\t}\n\t\td.enter = d.exit = function () {\n\t\t\treturn this\n\t\t}\n\t\treturn d\n\t}\n\treturn domain\n}).call(this)\n","exports.name = \"events\";\nexports.version = \"1.1.0\";\nexports.main = \"./events.js\";\n","// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      }\n      throw TypeError('Uncaught, unspecified \"error\" event.');\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n","exports.name = \"process\";\nexports.version = \"0.5.2\";\nexports.main = \"./browser.js\";\n","// shim for using process in browser\n\nvar process = module.exports = {};\n\nprocess.nextTick = (function () {\n    var canSetImmediate = typeof window !== 'undefined'\n    && window.setImmediate;\n    var canPost = typeof window !== 'undefined'\n    && window.postMessage && window.addEventListener\n    ;\n\n    if (canSetImmediate) {\n        return function (f) { return window.setImmediate(f) };\n    }\n\n    if (canPost) {\n        var queue = [];\n        window.addEventListener('message', function (ev) {\n            var source = ev.source;\n            if ((source === window || source === null) && ev.data === 'process-tick') {\n                ev.stopPropagation();\n                if (queue.length > 0) {\n                    var fn = queue.shift();\n                    fn();\n                }\n            }\n        }, true);\n\n        return function nextTick(fn) {\n            queue.push(fn);\n            window.postMessage('process-tick', '*');\n        };\n    }\n\n    return function nextTick(fn) {\n        setTimeout(fn, 0);\n    };\n})();\n\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n}\n\n// TODO(shtylman)\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\n"]}}]