[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nExpress = Package['glittershark:meteor-express'].Express;\nStreamy = Package['yuukan:streamy'].Streamy;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"Log.js\":[\"meteor/mongo\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// imports/api/Log.js                                                                                               //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nmodule.export({Log:function(){return Log}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                                                    //\nvar Log = new Mongo.Collection('log');                                                                              // 3\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"body-parser\",\"../imports/api/Log.js\",\"fibers\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// server/main.js                                                                                                   //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var bodyParser;module.import('body-parser',{\"default\":function(v){bodyParser=v}});var Log;module.import('../imports/api/Log.js',{\"Log\":function(v){Log=v}});\n                                                                                                                    // 2\n                                                                                                                    // 3\nvar Fiber = require('fibers');                                                                                      // 4\n                                                                                                                    //\nif (Meteor.isServer) {                                                                                              // 6\n\tMeteor.startup(function () {                                                                                       // 7\n\t\t// Express                                                                                                        //\n\t\tapp = Express();                                                                                                  // 9\n\t\tapp.use(bodyParser.json()); // to support JSON-encoded bodies                                                     // 10\n\t\tapp.use(bodyParser.urlencoded({ // to support URL-encoded bodies                                                  // 11\n\t\t\textended: true                                                                                                   // 12\n\t\t}));                                                                                                              // 11\n                                                                                                                    //\n\t\t// ROUTE                                                                                                          //\n\t\tapp.get('/hello', function (req, res) {                                                                           // 16\n\t\t\t// Test sream                                                                                                    //\n\t\t\tStreamy.broadcast('hello', 'hello');                                                                             // 18\n\t\t});                                                                                                               // 19\n                                                                                                                    //\n\t\tapp.get('/save', function (req, res) {                                                                            // 21\n\t\t\t// Test DB connection                                                                                            //\n\t\t\t// INSERT IN DB                                                                                                  //\n\t\t\tFiber(function () {                                                                                              // 24\n\t\t\t\tWoeid.insert({                                                                                                  // 25\n\t\t\t\t\tdatetime: new Date(),                                                                                          // 26\n\t\t\t\t\tbody: response.body                                                                                            // 27\n\t\t\t\t}, function (error, response) {                                                                                 // 25\n\t\t\t\t\tconsole.log(response);                                                                                         // 29\n\t\t\t\t\tconsole.log('new woeid in db ', Woeid.find().count());                                                         // 30\n\t\t\t\t});                                                                                                             // 31\n\t\t\t}).run();                                                                                                        // 33\n\t\t});                                                                                                               // 34\n\t});                                                                                                                // 36\n}                                                                                                                   // 37\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/Log.js","/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,MAAM,IAAI,MAAM,UAAV,CAAqB,KAArB,CAAZ,4E;;;;;;;;;;;ACFP,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,UAAP,MAAuB,aAAvB;AACA,SAAS,GAAT,QAAoB,uBAApB;AACA,IAAM,QAAQ,QAAQ,QAAR,CAAd;;AAEA,IAAG,OAAO,QAAV,EAAoB;AACnB,QAAO,OAAP,CAAe,YAAM;;AAEpB,QAAM,SAAN;AACA,MAAI,GAAJ,CAAQ,WAAW,IAAX,EAAR,E;AACA,MAAI,GAAJ,CAAQ,WAAW,UAAX,CAAsB,E;AAC5B,aAAU;AADkB,GAAtB,CAAR;;;AAKA,MAAI,GAAJ,CAAQ,QAAR,EAAkB,UAAU,GAAV,EAAe,GAAf,EAAoB;;AAErC,WAAQ,SAAR,CAAkB,OAAlB,EAA2B,OAA3B;AACA,GAHD;;AAKA,MAAI,GAAJ,CAAQ,OAAR,EAAiB,UAAU,GAAV,EAAe,GAAf,EAAoB;;;AAGpC,SAAM,YAAY;AACjB,UAAM,MAAN,CAAa;AACZ,eAAU,IAAI,IAAJ,EADE;AAEZ,WAAM,SAAS;AAFH,KAAb,EAGG,UAAU,KAAV,EAAiB,QAAjB,EAA2B;AAC7B,aAAQ,GAAR,CAAY,QAAZ;AACA,aAAQ,GAAR,CAAY,kBAAZ,EAAgC,MAAM,IAAN,GAAa,KAAb,EAAhC;AACC,KANF;AAQA,IATD,EASG,GATH;AAUA,GAbD;AAeA,EA7BD;AA8BA,yH","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo'\n\nexport const Log = new Mongo.Collection('log')\n","import { Meteor } from 'meteor/meteor'\nimport bodyParser from 'body-parser'\nimport { Log } from '../imports/api/Log.js'\nconst Fiber = require('fibers')\n\nif(Meteor.isServer) {\n\tMeteor.startup(() => {\n\t\t// Express\n\t\tapp = Express()\n\t\tapp.use(bodyParser.json())       // to support JSON-encoded bodies\n\t\tapp.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n\t\t  extended: true\n\t\t}))\n\n\t\t// ROUTE\n\t\tapp.get('/hello', function (req, res) {\n\t\t\t// Test sream\n\t\t\tStreamy.broadcast('hello', 'hello')\n\t\t})\n\n\t\tapp.get('/save', function (req, res) {\n\t\t\t// Test DB connection\n\t\t\t// INSERT IN DB\n\t\t\tFiber(function () {\n\t\t\t\tWoeid.insert({\n\t\t\t\t\tdatetime: new Date(),\n\t\t\t\t\tbody: response.body\n\t\t\t\t}, function (error, response) {\n\t\t\t\t\tconsole.log(response)\n\t\t\t\t\tconsole.log('new woeid in db ', Woeid.find().count())\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}).run()\n\t\t})\n\n\t})\n}\n"]}}]