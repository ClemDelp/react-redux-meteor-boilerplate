[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nExpress = Package['glittershark:meteor-express'].Express;\nStreamy = Package['yuukan:streamy'].Streamy;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nmain = Package.webapp.main;\nWebAppInternals = Package.webapp.WebAppInternals;\n_ = Package.underscore._;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nBuffer = Package.modules.Buffer;\nprocess = Package.modules.process;\nSymbol = Package['ecmascript-runtime'].Symbol;\nMap = Package['ecmascript-runtime'].Map;\nSet = Package['ecmascript-runtime'].Set;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"Trend.js\":[\"meteor/mongo\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// imports/api/Trend.js                                                                 //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nmodule.export({Trend:function(){return Trend}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                        //\nvar Trend = new Mongo.Collection('trend');                                              // 3\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}],\"Woeid.js\":[\"meteor/mongo\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// imports/api/Woeid.js                                                                 //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nmodule.export({Woeid:function(){return Woeid}});var Mongo;module.import('meteor/mongo',{\"Mongo\":function(v){Mongo=v}});\n                                                                                        //\nvar Woeid = new Mongo.Collection('woeid');                                              // 3\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},\"server\":{\"main.js\":[\"meteor/meteor\",\"twitter\",\"body-parser\",\"../imports/api/Trend.js\",\"../imports/api/Woeid.js\",\"./constants.js\",\"fibers\",function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                      //\n// server/main.js                                                                       //\n//                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////\n                                                                                        //\nvar Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var Twitter;module.import('twitter',{\"default\":function(v){Twitter=v}});var bodyParser;module.import('body-parser',{\"default\":function(v){bodyParser=v}});var Trend;module.import('../imports/api/Trend.js',{\"Trend\":function(v){Trend=v}});var Woeid;module.import('../imports/api/Woeid.js',{\"Woeid\":function(v){Woeid=v}});var TWITTER_CONSUMER_KEY,TWITTER_CONSUMER_SECRET,TWITTER_ACCESS_TOKEN_KEY,TWITTER_ACCESS_TOKEN_SECRET;module.import('./constants.js',{\"TWITTER_CONSUMER_KEY\":function(v){TWITTER_CONSUMER_KEY=v},\"TWITTER_CONSUMER_SECRET\":function(v){TWITTER_CONSUMER_SECRET=v},\"TWITTER_ACCESS_TOKEN_KEY\":function(v){TWITTER_ACCESS_TOKEN_KEY=v},\"TWITTER_ACCESS_TOKEN_SECRET\":function(v){TWITTER_ACCESS_TOKEN_SECRET=v}});\n                                                                                        // 2\n                                                                                        // 3\n                                                                                        // 4\n                                                                                        // 5\nvar Fiber = require('fibers');                                                          // 6\n                                                                                        //\n                                                                                        // 8\n                                                                                        //\nif (Meteor.isServer) {                                                                  // 16\n\tMeteor.startup(function () {                                                           // 17\n\t\t// code to run on server at startup                                                   //\n\t\tvar client = new Twitter({                                                            // 19\n\t\t\tconsumer_key: TWITTER_CONSUMER_KEY,                                                  // 20\n\t\t\tconsumer_secret: TWITTER_CONSUMER_SECRET,                                            // 21\n\t\t\taccess_token_key: TWITTER_ACCESS_TOKEN_KEY,                                          // 22\n\t\t\taccess_token_secret: TWITTER_ACCESS_TOKEN_SECRET                                     // 23\n\t\t});                                                                                   // 19\n                                                                                        //\n\t\tapp = Express();                                                                      // 26\n\t\tapp.use(bodyParser.json()); // to support JSON-encoded bodies                         // 27\n\t\tapp.use(bodyParser.urlencoded({ // to support URL-encoded bodies                      // 28\n\t\t\textended: true                                                                       // 29\n\t\t}));                                                                                  // 28\n                                                                                        //\n\t\t// TO TEST                                                                            //\n\t\t// const hastag = 'Usain Bolt'                                                        //\n\t\t// const twitterStream = client.stream('statuses/filter', {track: String(hastag)});   //\n\t\t// let i = 0                                                                          //\n\t\t// twitterStream.on('data', function(tweet) {                                         //\n\t\t//   \t// Send a message to all connected sessions (Client & server)                   //\n\t\t//   \tif (i%10 === 0) {                                                               //\n\t\t//   \t\tconsole.log('tweet --> ', tweet.id_str)                                        //\n\t\t// \t\tStreamy.broadcast('hello', tweet);\t                                              //\n\t\t//   \t}                                                                               //\n\t\t// \ti++                                                                               //\n\t\t// });                                                                                //\n\t\t// -----                                                                              //\n                                                                                        //\n\t\tvar timeCondition = function timeCondition(lastDatetime, cbYes, cbNo) {               // 46\n\t\t\tvar last = new Date(lastDatetime);                                                   // 47\n\t\t\tvar now = new Date();                                                                // 48\n\t\t\tconsole.log(last, now);                                                              // 49\n\t\t\tvar timeDiff = Math.abs(now.getTime() - last.getTime());                             // 50\n\t\t\tvar diffSeconds = Math.ceil(timeDiff / 1000);                                        // 51\n\t\t\tconsole.log('diff in seconds: ', diffSeconds);                                       // 52\n\t\t\t// CHECK 15 MINUTES INTERVAL                                                         //\n\t\t\tif (diffSeconds > 15 * 60) {                                                         // 54\n\t\t\t\tconsole.log('more than 15 minutes: request twitter...');                            // 55\n\t\t\t\tcbYes();                                                                            // 56\n\t\t\t} else {                                                                             // 57\n\t\t\t\tconsole.log('less than 15 minutes: send last saved woeid...');                      // 58\n\t\t\t\tcbNo();                                                                             // 59\n\t\t\t}                                                                                    // 60\n\t\t};                                                                                    // 61\n                                                                                        //\n\t\tapp.get('/trends/available', function (req, res) {                                    // 63\n\t\t\tvar woeid = Woeid.findOne({}, { sort: { datetime: -1, limit: 1 } });                 // 64\n\t\t\tvar datetime = 0;                                                                    // 65\n\t\t\tif (woeid && woeid.datetime) datetime = woeid.datetime;                              // 66\n\t\t\ttimeCondition(datetime, function () {                                                // 67\n\t\t\t\tclient.get('trends/available', function (error, tweets, response) {                 // 70\n\t\t\t\t\tif (error) throw error;                                                            // 71\n\t\t\t\t\tif (response) {                                                                    // 72\n\t\t\t\t\t\t// INSERT IN DB                                                                   //\n\t\t\t\t\t\tFiber(function () {                                                               // 74\n\t\t\t\t\t\t\tWoeid.insert({                                                                   // 75\n\t\t\t\t\t\t\t\tdatetime: new Date(),                                                           // 76\n\t\t\t\t\t\t\t\tbody: response.body                                                             // 77\n\t\t\t\t\t\t\t}, function (error, response) {                                                  // 75\n\t\t\t\t\t\t\t\tconsole.log(response);                                                          // 79\n\t\t\t\t\t\t\t\tconsole.log('new woeid in db ', Woeid.find().count());                          // 80\n\t\t\t\t\t\t\t});                                                                              // 81\n\t\t\t\t\t\t}).run();                                                                         // 82\n\t\t\t\t\t\tres.json({ data: response.body });                                                // 83\n\t\t\t\t\t}                                                                                  // 84\n\t\t\t\t});                                                                                 // 85\n\t\t\t}, function () {                                                                     // 86\n\t\t\t\tres.json({ data: woeid.body });                                                     // 87\n\t\t\t});                                                                                  // 88\n\t\t});                                                                                   // 90\n                                                                                        //\n\t\tapp.post('/trends', function (req, res) {                                             // 92\n\t\t\tvar woeid = req.body.woeid;                                                          // 93\n\t\t\tif (woeid) {                                                                         // 94\n\t\t\t\tFiber(function () {                                                                 // 95\n\t\t\t\t\tconsole.log(woeid);                                                                // 96\n\t\t\t\t\tvar trend = Trend.findOne({ woeid: woeid }, { sort: { datetime: -1, limit: 1 } });\n\t\t\t\t\tvar datetime = 0;                                                                  // 98\n\t\t\t\t\tif (trend && trend.datetime) datetime = trend.datetime;                            // 99\n\t\t\t\t\ttimeCondition(datetime, function () {                                              // 100\n\t\t\t\t\t\tclient.get('trends/place', { id: woeid }, function (error, tweets, response) {    // 103\n\t\t\t\t\t\t\tif (error) throw error;                                                          // 104\n\t\t\t\t\t\t\tif (response) {                                                                  // 105\n\t\t\t\t\t\t\t\t// INSERT IN DB                                                                 //\n\t\t\t\t\t\t\t\tFiber(function () {                                                             // 107\n\t\t\t\t\t\t\t\t\tTrend.insert({                                                                 // 108\n\t\t\t\t\t\t\t\t\t\twoeid: woeid,                                                                 // 109\n\t\t\t\t\t\t\t\t\t\tdatetime: new Date(),                                                         // 110\n\t\t\t\t\t\t\t\t\t\tbody: response.body                                                           // 111\n\t\t\t\t\t\t\t\t\t}, function (error, response) {                                                // 108\n\t\t\t\t\t\t\t\t\t\tconsole.log(response);                                                        // 113\n\t\t\t\t\t\t\t\t\t\tconsole.log('new trend in db ', Trend.find().count());                        // 114\n\t\t\t\t\t\t\t\t\t});                                                                            // 115\n\t\t\t\t\t\t\t\t}).run();                                                                       // 116\n\t\t\t\t\t\t\t\tres.json({ data: response.body });                                              // 117\n\t\t\t\t\t\t\t}                                                                                // 118\n\t\t\t\t\t\t});                                                                               // 119\n\t\t\t\t\t}, function () {                                                                   // 120\n\t\t\t\t\t\tres.json({ data: woeid.body });                                                   // 121\n\t\t\t\t\t});                                                                                // 122\n\t\t\t\t}).run();                                                                           // 124\n\t\t\t} else {                                                                             // 125\n\t\t\t\tres.json({ data: 'error required a valid woeid' });                                 // 126\n\t\t\t}                                                                                    // 127\n\t\t});                                                                                   // 129\n                                                                                        //\n\t\tapp.post('/tweets', function (req, res) {                                             // 131\n\t\t\tvar hastag = req.body.hastag;                                                        // 132\n\t\t\tif (hastag) {                                                                        // 133\n\t\t\t\t(function () {                                                                      // 133\n\t\t\t\t\tconsole.log(\"hastag: \", hastag);                                                   // 134\n\t\t\t\t\t// const hastag = 'Usain Bolt'                                                     //\n\t\t\t\t\tvar twitterStream = client.stream('statuses/filter', { track: String(hastag) });   // 136\n\t\t\t\t\tvar i = 0;                                                                         // 137\n\t\t\t\t\ttwitterStream.on('data', function (tweet) {                                        // 138\n\t\t\t\t\t\t// Send a message to all connected sessions (Client & server)                     //\n\t\t\t\t\t\tif (i % 10 === 0) {                                                               // 140\n\t\t\t\t\t\t\tconsole.log('tweet --> ', tweet.id_str);                                         // 141\n\t\t\t\t\t\t\tStreamy.broadcast('hello', tweet);                                               // 142\n\t\t\t\t\t\t}                                                                                 // 143\n\t\t\t\t\t\ti++;                                                                              // 144\n\t\t\t\t\t});                                                                                // 145\n\t\t\t\t})();                                                                               // 133\n\t\t\t}                                                                                    // 146\n\t\t});                                                                                   // 147\n\t});                                                                                    // 149\n}                                                                                       // 150\n//////////////////////////////////////////////////////////////////////////////////////////\n\n}]}},{\"extensions\":[\".js\",\".json\"]});\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["/imports/api/Trend.js","/imports/api/Woeid.js","/server/main.js"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo'\n\nexport const Trend = new Mongo.Collection('trend')\n","import { Mongo } from 'meteor/mongo'\n\nexport const Woeid = new Mongo.Collection('woeid')\n","import { Meteor } from 'meteor/meteor'\nimport Twitter from 'twitter'\nimport bodyParser from 'body-parser'\nimport { Trend } from '../imports/api/Trend.js'\nimport { Woeid } from '../imports/api/Woeid.js'\nvar Fiber = require('fibers')\n\nimport {\n\tTWITTER_CONSUMER_KEY, \n\tTWITTER_CONSUMER_SECRET, \n\tTWITTER_ACCESS_TOKEN_KEY, \n\tTWITTER_ACCESS_TOKEN_SECRET\n} from './constants.js'\n\n\nif(Meteor.isServer) {\n\tMeteor.startup(() => {\n\t  \t// code to run on server at startup\n\t  \tconst client = new Twitter({\n\t\t  consumer_key: TWITTER_CONSUMER_KEY,\n\t\t  consumer_secret: TWITTER_CONSUMER_SECRET,\n\t\t  access_token_key: TWITTER_ACCESS_TOKEN_KEY,\n\t\t  access_token_secret: TWITTER_ACCESS_TOKEN_SECRET,\n\t\t});\n\n\t  \tapp = Express();\n\t\tapp.use( bodyParser.json() );       // to support JSON-encoded bodies\n\t\tapp.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n\t\t  extended: true\n\t\t}));\n\n\t\t// TO TEST\n\t\t// const hastag = 'Usain Bolt'\n\t\t// const twitterStream = client.stream('statuses/filter', {track: String(hastag)});\n\t\t// let i = 0\n\t\t// twitterStream.on('data', function(tweet) {\n\t\t//   \t// Send a message to all connected sessions (Client & server)\n\t\t//   \tif (i%10 === 0) {\n\t\t//   \t\tconsole.log('tweet --> ', tweet.id_str)\n\t\t// \t\tStreamy.broadcast('hello', tweet);\t\n\t\t//   \t}\n\t\t// \ti++\n\t\t// });\n\t\t// -----\n\n\t\tconst timeCondition = function (lastDatetime, cbYes, cbNo) {\n\t\t\tvar last = new Date(lastDatetime)\n\t\t\tvar now = new Date()\n\t\t\tconsole.log(last, now)\n\t\t\tvar timeDiff = Math.abs(now.getTime() - last.getTime())\n\t\t\tvar diffSeconds = Math.ceil(timeDiff / (1000))\n\t\t\tconsole.log('diff in seconds: ', diffSeconds)\n\t\t\t// CHECK 15 MINUTES INTERVAL\n\t\t\tif (diffSeconds > 15*60) {\n\t\t\t\tconsole.log('more than 15 minutes: request twitter...')\n\t\t\t\tcbYes()\n\t\t\t} else {\n\t\t\t\tconsole.log('less than 15 minutes: send last saved woeid...')\n\t\t\t\tcbNo()\n\t\t\t}\n\t\t}\n\n\t\tapp.get('/trends/available', function(req, res) {\n\t\t\tconst woeid = Woeid.findOne({}, {sort: {datetime: -1, limit: 1}});\n\t\t\tlet datetime = 0\n\t\t\tif (woeid && woeid.datetime) datetime = woeid.datetime \n\t\t\ttimeCondition(\n\t\t\t\tdatetime,\n\t\t\t\tfunction() {\n\t\t\t\t\tclient.get('trends/available', function(error, tweets, response){\n\t\t\t\t\t\tif(error) throw error;\n\t\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\t\t// INSERT IN DB\n\t\t\t\t\t\t\tFiber(function () {\n\t\t          \t\t\t\tWoeid.insert({\n\t\t          \t\t\t\t\tdatetime: new Date(),\n\t\t          \t\t\t\t\tbody: response.body\n\t\t          \t\t\t\t}, function (error, response) {\n\t\t          \t\t\t\t\tconsole.log(response)\n\t\t\t\t\t\t        \tconsole.log('new woeid in db ', Woeid.find().count())\n\t\t\t\t\t\t        })\n\t\t        \t\t\t}).run()\n\t\t\t\t\t\t\tres.json({data: response.body});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\t\n\t\t\t\t}, function() {\n\t\t\t\t\tres.json({data: woeid.body})\n\t\t\t\t}\n\t\t\t)\n\t\t});\n\t\t\n\t\tapp.post('/trends', function(req, res) {\n\t\t\tvar woeid = req.body.woeid\n\t\t\tif (woeid) {\n\t\t\t\tFiber(function () {\n\t\t\t\t\tconsole.log(woeid)\n\t\t\t\t\tconst trend = Trend.findOne({woeid: woeid}, {sort: {datetime: -1, limit: 1}});\n\t\t\t\t\tlet datetime = 0\n\t\t\t\t\tif (trend && trend.datetime) datetime = trend.datetime \n\t\t\t\t\ttimeCondition(\n\t\t\t\t\t\tdatetime,\n\t\t\t\t\t\tfunction() {\n\t\t\t\t\t\t\tclient.get('trends/place', {id: woeid}, function(error, tweets, response){\n\t\t\t\t\t\t\t\tif(error) throw error;\n\t\t\t\t\t\t\t\tif ( response ) {\n\t\t\t\t\t\t\t\t\t// INSERT IN DB\n\t\t\t\t\t\t\t\t\tFiber(function () {\n\t\t\t\t          \t\t\t\tTrend.insert({\n\t\t\t\t          \t\t\t\t\twoeid: woeid,\n\t\t\t\t          \t\t\t\t\tdatetime: new Date(),\n\t\t\t\t          \t\t\t\t\tbody: response.body\n\t\t\t\t          \t\t\t\t}, function (error, response) {\n\t\t\t\t          \t\t\t\t\tconsole.log(response)\n\t\t\t\t\t\t\t\t        \tconsole.log('new trend in db ', Trend.find().count())\n\t\t\t\t\t\t\t\t        })\n\t\t\t\t        \t\t\t}).run()\n\t\t\t\t\t\t\t\t\tres.json({data: response.body});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\t\n\t\t\t\t\t\t}, function() {\n\t\t\t\t\t\t\tres.json({data: woeid.body})\n\t\t\t\t\t\t}\n\t\t\t\t\t)\n\t\t\t\t}).run()\t\n\t\t\t} else {\n\t\t\t\tres.json({data: 'error required a valid woeid'})\n\t\t\t}\n\t\t\t\n\t\t});\n\n\t\tapp.post('/tweets', function(req, res) {\n\t\t\tvar hastag = req.body.hastag\n\t\t    if (hastag) {\n\t\t    \tconsole.log(\"hastag: \", hastag)\n\t\t    \t// const hastag = 'Usain Bolt'\n\t\t\t\tconst twitterStream = client.stream('statuses/filter', {track: String(hastag)});\n\t\t\t\tlet i = 0\n\t\t\t\ttwitterStream.on('data', function(tweet) {\n\t\t\t\t  \t// Send a message to all connected sessions (Client & server)\n\t\t\t\t  \tif (i%10 === 0) {\n\t\t\t\t  \t\tconsole.log('tweet --> ', tweet.id_str)\n\t\t\t\t\t\tStreamy.broadcast('hello', tweet);\t\n\t\t\t\t  \t}\n\t\t\t\t\ti++\n\t\t\t\t});\n\t\t    }\n\t\t});\n\n  \t});\n}\n\n"]}}]