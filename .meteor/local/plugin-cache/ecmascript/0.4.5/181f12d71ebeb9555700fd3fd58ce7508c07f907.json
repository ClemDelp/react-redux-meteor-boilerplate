{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/webapp/webapp_tests.js","filenameRelative":"/packages/webapp/webapp_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/webapp/webapp_tests.js.map","sourceFileName":"/packages/webapp/webapp_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"webapp_tests"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar url = Npm.require(\"url\");\nvar crypto = Npm.require(\"crypto\");\nvar http = Npm.require(\"http\");\n\nvar additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nvar hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nvar additionalScriptPathname = hash.digest('hex') + \".js\";\n\n// Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\nvar MockResponse = function MockResponse() {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {\n  // nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  var cssResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"css\";\n  });\n  var jsResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"js\";\n  });\n\n  var resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"application/javascript; charset=utf-8\");\n});\n\nTinytest.add(\"webapp - additional static javascript\", function (test) {\n  var origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n\n  var staticFilesOpts = {\n    staticFiles: {},\n    clientDir: \"/\"\n  };\n\n  // It's okay to set this global state because we're not going to yield\n  // before settng it back to what it was originally.\n  WebAppInternals.setInlineScriptsAllowed(true);\n\n  Meteor._noYieldsAllowed(function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\");\n\n    // When inline scripts are allowed, the script should be inlined.\n    test.isTrue(boilerplate.indexOf(additionalScript) !== -1);\n\n    // And the script should not be served as its own separate resource,\n    // meaning that the static file handler should pass on this request.\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    var nextCalled = false;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {\n      nextCalled = true;\n    });\n    test.isTrue(nextCalled);\n  });\n\n  // When inline scripts are disallowed, the script body should not be\n  // inlined, and the script should be included in a <script src=\"..\">\n  // tag.\n  WebAppInternals.setInlineScriptsAllowed(false);\n\n  Meteor._noYieldsAllowed(function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\");\n\n    // The script contents itself should not be present; the pathname\n    // where the script is served should be.\n    test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n    test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n\n    // And the static file handler should serve the script at that pathname.\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {});\n    var resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n  });\n\n  WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n});\n\n// Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\nTinytest.add(\"webapp - generating boilerplate should not change runtime config\", function (test) {\n  // Set a dummy key in the runtime config served in the\n  // boilerplate. Test that the dummy key appears in the boilerplate,\n  // but not in __meteor_runtime_config__ after generating the\n  // boilerplate.\n\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n  var boilerplate = WebAppInternals.generateBoilerplateInstance(\"web.browser\", {}, // empty manifest\n  { runtimeConfigOverrides: { WEBAPP_TEST_KEY: true } });\n\n  var boilerplateHtml = boilerplate.toHTML();\n  test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n});\n\n// Support 'named pipes' (strings) as ports for support of Windows Server / Azure deployments\nTinytest.add(\"webapp - port should be parsed as int unless it is a named pipe\", function (test) {\n  // Named pipes on Windows Server follow the format: \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n  var namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n  var namedPipeServer = \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n\n  test.equal(WebAppInternals.parsePort(namedPipe), \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\");\n  test.equal(WebAppInternals.parsePort(namedPipeServer), \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\");\n  test.equal(WebAppInternals.parsePort(8080), 8080);\n  test.equal(WebAppInternals.parsePort(\"8080\"), 8080);\n  test.equal(WebAppInternals.parsePort(\"8080abc\"), // ensure strangely formatted ports still work for backwards compatibility\n  8080);\n});\n\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\n\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^2\\.(\\d+)\\.(\\d+)/);\n  test.equal((0, _typeof3[\"default\"])(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal((0, _typeof3[\"default\"])(WebAppInternals.NpmModules.connect.module.basicAuth), 'function');\n});","ast":null,"map":{"version":3,"sources":["/packages/webapp/webapp_tests.js"],"names":[],"mappings":"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","file":"/packages/webapp/webapp_tests.js.map","sourcesContent":["var url = Npm.require(\"url\");\nvar crypto = Npm.require(\"crypto\");\nvar http = Npm.require(\"http\");\n\nvar additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nvar hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nvar additionalScriptPathname = hash.digest('hex') + \".js\";\n\n// Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\nvar MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {\n  // nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\n\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  var cssResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"css\";\n    }\n  );\n  var jsResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"js\";\n    }\n  );\n\n  var resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"application/javascript; charset=utf-8\");\n});\n\nTinytest.add(\"webapp - additional static javascript\", function (test) {\n  var origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n\n  var staticFilesOpts = {\n    staticFiles: {},\n    clientDir: \"/\"\n  };\n\n  // It's okay to set this global state because we're not going to yield\n  // before settng it back to what it was originally.\n  WebAppInternals.setInlineScriptsAllowed(true);\n\n  Meteor._noYieldsAllowed(function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\");\n\n    // When inline scripts are allowed, the script should be inlined.\n    test.isTrue(boilerplate.indexOf(additionalScript) !== -1);\n\n    // And the script should not be served as its own separate resource,\n    // meaning that the static file handler should pass on this request.\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    var nextCalled = false;\n    WebAppInternals.staticFilesMiddleware(\n      staticFilesOpts, req, res, function () {\n        nextCalled = true;\n      });\n    test.isTrue(nextCalled);\n  });\n\n  // When inline scripts are disallowed, the script body should not be\n  // inlined, and the script should be included in a <script src=\"..\">\n  // tag.\n  WebAppInternals.setInlineScriptsAllowed(false);\n\n  Meteor._noYieldsAllowed(function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\");\n\n    // The script contents itself should not be present; the pathname\n    // where the script is served should be.\n    test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n    test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n\n    // And the static file handler should serve the script at that pathname.\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res,\n                                     function () { });\n    var resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n  });\n\n  WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n});\n\n// Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\nTinytest.add(\"webapp - generating boilerplate should not change runtime config\", function (test) {\n  // Set a dummy key in the runtime config served in the\n  // boilerplate. Test that the dummy key appears in the boilerplate,\n  // but not in __meteor_runtime_config__ after generating the\n  // boilerplate.\n\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n  var boilerplate = WebAppInternals.generateBoilerplateInstance(\n    \"web.browser\",\n    {}, // empty manifest\n    { runtimeConfigOverrides: { WEBAPP_TEST_KEY: true } }\n  );\n\n  var boilerplateHtml = boilerplate.toHTML();\n  test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n});\n\n// Support 'named pipes' (strings) as ports for support of Windows Server / Azure deployments\nTinytest.add(\"webapp - port should be parsed as int unless it is a named pipe\", function(test){\n  // Named pipes on Windows Server follow the format: \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n  var namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n  var namedPipeServer = \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n\n  test.equal(WebAppInternals.parsePort(namedPipe),\n      \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\");\n  test.equal(WebAppInternals.parsePort(namedPipeServer),\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\");\n  test.equal(WebAppInternals.parsePort(8080),\n      8080);\n  test.equal(WebAppInternals.parsePort(\"8080\"),\n      8080);\n  test.equal(WebAppInternals.parsePort(\"8080abc\"), // ensure strangely formatted ports still work for backwards compatibility\n      8080);\n});\n\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\n\n\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^2\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module.basicAuth),\n             'function');\n});\n"]},"hash":"181f12d71ebeb9555700fd3fd58ce7508c07f907"}
