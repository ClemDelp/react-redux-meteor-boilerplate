{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/collection.js","filenameRelative":"/packages/mongo/collection.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/collection.js.map","sourceFileName":"/packages/mongo/collection.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"collection"},"ignored":false,"code":"// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (!(self instanceof Mongo.Collection)) throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && name !== null) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" + \"saved or synchronized over the network. (Pass null for \" + \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = { connection: options };\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n    case 'MONGO':\n      self._makeNewID = function () {\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;\n        return new Mongo.ObjectID(src.hexString(24));\n      };\n      break;\n    case 'STRING':\n    default:\n      self._makeNewID = function () {\n        var src = name ? DDP.randomStream('/collection/' + name) : Random.insecure;\n        return src.id();\n      };\n      break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (!name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;else if (options.connection) self._connection = options.connection;else if (Meteor.isClient) self._connection = Meteor.connection;else self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server && typeof MongoInternals !== \"undefined\" && MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function beginUpdate(batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset) self._collection.pauseObservers();\n\n        if (reset) self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function update(msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc) self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({ _id: mongoId }, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc) throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc) throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset) modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set) modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function endUpdate() {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function saveOriginals() {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function retrieveOriginals() {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function getDoc(id) {\n        return self.findOne(id);\n      },\n\n      // To be able to get back to the collection from the store.\n      _getCollection: function _getCollection() {\n        return self;\n      }\n    });\n\n    if (!ok) {\n      var message = \"There is already a collection named \\\"\" + name + \"\\\"\";\n      if (options._suppressSameNameError === true) {\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined\n        // for this collection name, but this will simply be another reference to it and everything\n        // should work. However, we have historically thrown an error here, so for now we will\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in\n        // and give this some real world testing.\n        console.warn ? console.warn(message) : console.log(message);\n      } else {\n        throw new Error(message);\n      }\n    }\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  if (options.defineMutationMethods !== false) {\n    try {\n      self._defineMutationMethods({ useExisting: options._suppressSameNameError === true });\n    } catch (error) {\n      // Throw a more understandable error on the server for same collection name\n      if (error.message === \"A method named '/\" + name + \"/insert' is already defined\") throw new Error(\"There is already a collection named \\\"\" + name + \"\\\"\");\n      throw error;\n    }\n  }\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, { is_auto: true });\n  }\n};\n\n///\n/// Main collection API\n///\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function _getFindSelector(args) {\n    if (args.length == 0) return {};else return args[0];\n  },\n\n  _getFindOptions: function _getFindOptions(args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n      })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) How often to poll this query when observing on the server. In milliseconds. Defaults to 10 seconds.\n   * @param {Number} options.pollingThrottleMs (Server only) Minimum time to allow between re-polling. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. In milliseconds. Defaults to 50 milliseconds.\n   * @returns {Mongo.Cursor}\n   */\n  find: function find() /* selector, options */{\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray), self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function findOne() /* selector, options */{\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray), self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function added(id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function changed(id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function removed(id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {\n    observeHandle.stop();\n  });\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector)) selector = { _id: selector };\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || '_id' in selector && !selector._id)\n    // can't match anything\n    return { _id: Random.id() };\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined) ret[key].$options = value.$options;\n    } else if (_.contains(['$or', '$and', '$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = { $regex: regexp.source };\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase) regexOptions += 'i';\n  if (regexp.multiline) regexOptions += 'm';\n  if (regexOptions) selector.$options = regexOptions;\n\n  return selector;\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string' || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    var generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      var enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function chooseReturnValueFromCollectionResult(result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  var wrappedCallback = wrapCallback(callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    var result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    var _result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(_result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier) {\n  for (var _len = arguments.length, optionsAndCallback = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    optionsAndCallback[_key - 2] = arguments[_key];\n  }\n\n  var callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  var options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string' || options.insertedId instanceof Mongo.ObjectID)) throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (!selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  var wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    var args = [selector, modifier, options];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  var wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n};\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return function (error, result) {\n    callback(error, !error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(selector, modifier, options, callback) {\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  var updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex) throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex) throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection) throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection) throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (!self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (!(self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length && (args[args.length - 1] === undefined || args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}","ast":null,"map":{"version":3,"sources":["/packages/mongo/collection.js"],"names":[],"mappings":"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","file":"/packages/mongo/collection.js.map","sourcesContent":["// options.connection, if given, is a LivedataClient or LivedataServer\n// XXX presently there is no way to destroy/clean up a Collection\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#ddp_connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOne`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */\nMongo.Collection = function (name, options) {\n  var self = this;\n  if (! (self instanceof Mongo.Collection))\n    throw new Error('use \"new\" to construct a Mongo.Collection');\n\n  if (!name && (name !== null)) {\n    Meteor._debug(\"Warning: creating anonymous collection. It will not be \" +\n                  \"saved or synchronized over the network. (Pass null for \" +\n                  \"the collection name to turn off this warning.)\");\n    name = null;\n  }\n\n  if (name !== null && typeof name !== \"string\") {\n    throw new Error(\n      \"First argument to new Mongo.Collection must be a string or null\");\n  }\n\n  if (options && options.methods) {\n    // Backwards compatibility hack with original signature (which passed\n    // \"connection\" directly instead of in options. (Connections must have a \"methods\"\n    // method.)\n    // XXX remove before 1.0\n    options = {connection: options};\n  }\n  // Backwards compatibility: \"connection\" used to be called \"manager\".\n  if (options && options.manager && !options.connection) {\n    options.connection = options.manager;\n  }\n  options = _.extend({\n    connection: undefined,\n    idGeneration: 'STRING',\n    transform: null,\n    _driver: undefined,\n    _preventAutopublish: false\n  }, options);\n\n  switch (options.idGeneration) {\n  case 'MONGO':\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return new Mongo.ObjectID(src.hexString(24));\n    };\n    break;\n  case 'STRING':\n  default:\n    self._makeNewID = function () {\n      var src = name\n            ? DDP.randomStream('/collection/' + name)\n            : Random.insecure;\n      return src.id();\n    };\n    break;\n  }\n\n  self._transform = LocalCollection.wrapTransform(options.transform);\n\n  if (! name || options.connection === null)\n    // note: nameless collections never have a connection\n    self._connection = null;\n  else if (options.connection)\n    self._connection = options.connection;\n  else if (Meteor.isClient)\n    self._connection = Meteor.connection;\n  else\n    self._connection = Meteor.server;\n\n  if (!options._driver) {\n    // XXX This check assumes that webapp is loaded so that Meteor.server !==\n    // null. We should fully support the case of \"want to use a Mongo-backed\n    // collection from Node code without webapp\", but we don't yet.\n    // #MeteorServerNull\n    if (name && self._connection === Meteor.server &&\n        typeof MongoInternals !== \"undefined\" &&\n        MongoInternals.defaultRemoteCollectionDriver) {\n      options._driver = MongoInternals.defaultRemoteCollectionDriver();\n    } else {\n      options._driver = LocalCollectionDriver;\n    }\n  }\n\n  self._collection = options._driver.open(name, self._connection);\n  self._name = name;\n  self._driver = options._driver;\n\n  if (self._connection && self._connection.registerStore) {\n    // OK, we're going to be a slave, replicating some remote\n    // database, except possibly with some temporary divergence while\n    // we have unacknowledged RPC's.\n    var ok = self._connection.registerStore(name, {\n      // Called at the beginning of a batch of updates. batchSize is the number\n      // of update calls to expect.\n      //\n      // XXX This interface is pretty janky. reset probably ought to go back to\n      // being its own function, and callers shouldn't have to calculate\n      // batchSize. The optimization of not calling pause/remove should be\n      // delayed until later: the first call to update() should buffer its\n      // message, and then we can either directly apply it at endUpdate time if\n      // it was the only update, or do pauseObservers/apply/apply at the next\n      // update() if there's another one.\n      beginUpdate: function (batchSize, reset) {\n        // pause observers so users don't see flicker when updating several\n        // objects at once (including the post-reconnect reset-and-reapply\n        // stage), and so that a re-sorting of a query can take advantage of the\n        // full _diffQuery moved calculation instead of applying change one at a\n        // time.\n        if (batchSize > 1 || reset)\n          self._collection.pauseObservers();\n\n        if (reset)\n          self._collection.remove({});\n      },\n\n      // Apply an update.\n      // XXX better specify this interface (not in terms of a wire message)?\n      update: function (msg) {\n        var mongoId = MongoID.idParse(msg.id);\n        var doc = self._collection.findOne(mongoId);\n\n        // Is this a \"replace the whole doc\" message coming from the quiescence\n        // of method writes to an object? (Note that 'undefined' is a valid\n        // value meaning \"remove it\".)\n        if (msg.msg === 'replace') {\n          var replace = msg.replace;\n          if (!replace) {\n            if (doc)\n              self._collection.remove(mongoId);\n          } else if (!doc) {\n            self._collection.insert(replace);\n          } else {\n            // XXX check that replace has no $ ops\n            self._collection.update(mongoId, replace);\n          }\n          return;\n        } else if (msg.msg === 'added') {\n          if (doc) {\n            throw new Error(\"Expected not to find a document already present for an add\");\n          }\n          self._collection.insert(_.extend({_id: mongoId}, msg.fields));\n        } else if (msg.msg === 'removed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document already present for removed\");\n          self._collection.remove(mongoId);\n        } else if (msg.msg === 'changed') {\n          if (!doc)\n            throw new Error(\"Expected to find a document to change\");\n          if (!_.isEmpty(msg.fields)) {\n            var modifier = {};\n            _.each(msg.fields, function (value, key) {\n              if (value === undefined) {\n                if (!modifier.$unset)\n                  modifier.$unset = {};\n                modifier.$unset[key] = 1;\n              } else {\n                if (!modifier.$set)\n                  modifier.$set = {};\n                modifier.$set[key] = value;\n              }\n            });\n            self._collection.update(mongoId, modifier);\n          }\n        } else {\n          throw new Error(\"I don't know how to deal with this message\");\n        }\n\n      },\n\n      // Called at the end of a batch of updates.\n      endUpdate: function () {\n        self._collection.resumeObservers();\n      },\n\n      // Called around method stub invocations to capture the original versions\n      // of modified documents.\n      saveOriginals: function () {\n        self._collection.saveOriginals();\n      },\n      retrieveOriginals: function () {\n        return self._collection.retrieveOriginals();\n      },\n\n      // Used to preserve current versions of documents across a store reset.\n      getDoc: function(id) {\n        return self.findOne(id);\n      },\n\n      // To be able to get back to the collection from the store.\n      _getCollection: function () {\n        return self;\n      }\n    });\n\n    if (!ok) {\n      const message = `There is already a collection named \"${name}\"`;\n      if (options._suppressSameNameError === true) {\n        // XXX In theory we do not have to throw when `ok` is falsy. The store is already defined\n        // for this collection name, but this will simply be another reference to it and everything\n        // should work. However, we have historically thrown an error here, so for now we will\n        // skip the error only when `_suppressSameNameError` is `true`, allowing people to opt in\n        // and give this some real world testing.\n        console.warn ? console.warn(message) : console.log(message);\n      } else {\n        throw new Error(message);\n      }\n    }\n  }\n\n  // XXX don't define these until allow or deny is actually used for this\n  // collection. Could be hard if the security rules are only defined on the\n  // server.\n  if (options.defineMutationMethods !== false) {\n    try {\n      self._defineMutationMethods({ useExisting: (options._suppressSameNameError === true) });\n    } catch (error) {\n      // Throw a more understandable error on the server for same collection name\n      if (error.message === `A method named '/${name}/insert' is already defined`)\n        throw new Error(`There is already a collection named \"${name}\"`);\n      throw error;\n    }\n  }\n\n  // autopublish\n  if (Package.autopublish && !options._preventAutopublish && self._connection\n      && self._connection.publish) {\n    self._connection.publish(null, function () {\n      return self.find();\n    }, {is_auto: true});\n  }\n};\n\n///\n/// Main collection API\n///\n\n\n_.extend(Mongo.Collection.prototype, {\n\n  _getFindSelector: function (args) {\n    if (args.length == 0)\n      return {};\n    else\n      return args[0];\n  },\n\n  _getFindOptions: function (args) {\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(args[1], Match.Optional(Match.ObjectIncluding({\n        fields: Match.Optional(Match.OneOf(Object, undefined)),\n        sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),\n        limit: Match.Optional(Match.OneOf(Number, undefined)),\n        skip: Match.Optional(Match.OneOf(Number, undefined))\n     })));\n\n      return _.extend({\n        transform: self._transform\n      }, args[1]);\n    }\n  },\n\n  /**\n   * @summary Find the documents in a collection that match the selector.\n   * @locus Anywhere\n   * @method find\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {Number} options.limit Maximum number of results to return\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default `true`; pass `false` to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the  [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @param {Boolean} options.disableOplog (Server only) Pass true to disable oplog-tailing on this query. This affects the way server processes calls to `observe` on this query. Disabling the oplog can be useful when working with data that updates in large batches.\n   * @param {Number} options.pollingIntervalMs (Server only) How often to poll this query when observing on the server. In milliseconds. Defaults to 10 seconds.\n   * @param {Number} options.pollingThrottleMs (Server only) Minimum time to allow between re-polling. Increasing this will save CPU and mongo load at the expense of slower updates to users. Decreasing this is not recommended. In milliseconds. Defaults to 50 milliseconds.\n   * @returns {Mongo.Cursor}\n   */\n  find: function (/* selector, options */) {\n    // Collection.find() (return all docs) behaves differently\n    // from Collection.find(undefined) (return 0 docs).  so be\n    // careful about the length of arguments.\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.find(self._getFindSelector(argArray),\n                                 self._getFindOptions(argArray));\n  },\n\n  /**\n   * @summary Finds the first document that matches the selector, as ordered by sort and skip options.\n   * @locus Anywhere\n   * @method findOne\n   * @memberOf Mongo.Collection\n   * @instance\n   * @param {MongoSelector} [selector] A query describing the documents to find\n   * @param {Object} [options]\n   * @param {MongoSortSpecifier} options.sort Sort order (default: natural order)\n   * @param {Number} options.skip Number of results to skip at the beginning\n   * @param {MongoFieldSpecifier} options.fields Dictionary of fields to return or exclude.\n   * @param {Boolean} options.reactive (Client only) Default true; pass false to disable reactivity\n   * @param {Function} options.transform Overrides `transform` on the [`Collection`](#collections) for this cursor.  Pass `null` to disable transformation.\n   * @returns {Object}\n   */\n  findOne: function (/* selector, options */) {\n    var self = this;\n    var argArray = _.toArray(arguments);\n    return self._collection.findOne(self._getFindSelector(argArray),\n                                    self._getFindOptions(argArray));\n  }\n\n});\n\nMongo.Collection._publishCursor = function (cursor, sub, collection) {\n  var observeHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      sub.added(collection, id, fields);\n    },\n    changed: function (id, fields) {\n      sub.changed(collection, id, fields);\n    },\n    removed: function (id) {\n      sub.removed(collection, id);\n    }\n  });\n\n  // We don't call sub.ready() here: it gets called in livedata_server, after\n  // possibly calling _publishCursor on multiple returned cursors.\n\n  // register stop callback (expects lambda w/ no args).\n  sub.onStop(function () {observeHandle.stop();});\n\n  // return the observeHandle in case it needs to be stopped early\n  return observeHandle;\n};\n\n// protect against dangerous selectors.  falsey and {_id: falsey} are both\n// likely programmer error, and not what you want, particularly for destructive\n// operations.  JS regexps don't serialize over DDP but can be trivially\n// replaced by $regex.\nMongo.Collection._rewriteSelector = function (selector) {\n  // shorthand -- scalars match _id\n  if (LocalCollection._selectorIsId(selector))\n    selector = {_id: selector};\n\n  if (_.isArray(selector)) {\n    // This is consistent with the Mongo console itself; if we don't do this\n    // check passing an empty array ends up selecting all items\n    throw new Error(\"Mongo selector can't be an array.\");\n  }\n\n  if (!selector || (('_id' in selector) && !selector._id))\n    // can't match anything\n    return {_id: Random.id()};\n\n  var ret = {};\n  _.each(selector, function (value, key) {\n    // Mongo supports both {field: /foo/} and {field: {$regex: /foo/}}\n    if (value instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value);\n    } else if (value && value.$regex instanceof RegExp) {\n      ret[key] = convertRegexpToMongoSelector(value.$regex);\n      // if value is {$regex: /foo/, $options: ...} then $options\n      // override the ones set on $regex.\n      if (value.$options !== undefined)\n        ret[key].$options = value.$options;\n    }\n    else if (_.contains(['$or','$and','$nor'], key)) {\n      // Translate lower levels of $and/$or/$nor\n      ret[key] = _.map(value, function (v) {\n        return Mongo.Collection._rewriteSelector(v);\n      });\n    } else {\n      ret[key] = value;\n    }\n  });\n  return ret;\n};\n\n// convert a JS RegExp object to a Mongo {$regex: ..., $options: ...}\n// selector\nfunction convertRegexpToMongoSelector(regexp) {\n  check(regexp, RegExp); // safety belt\n\n  var selector = {$regex: regexp.source};\n  var regexOptions = '';\n  // JS RegExp objects support 'i', 'm', and 'g'. Mongo regex $options\n  // support 'i', 'm', 'x', and 's'. So we support 'i' and 'm' here.\n  if (regexp.ignoreCase)\n    regexOptions += 'i';\n  if (regexp.multiline)\n    regexOptions += 'm';\n  if (regexOptions)\n    selector.$options = regexOptions;\n\n  return selector;\n};\n\n// 'insert' immediately returns the inserted document's new _id.\n// The others return values immediately if you are in a stub, an in-memory\n// unmanaged collection, or a mongo-backed collection and you don't pass a\n// callback. 'update' and 'remove' return the number of affected\n// documents. 'upsert' returns an object with keys 'numberAffected' and, if an\n// insert happened, 'insertedId'.\n//\n// Otherwise, the semantics are exactly like other methods: they take\n// a callback as an optional last argument; if no callback is\n// provided, they block until the operation is complete, and throw an\n// exception if it fails; if a callback is provided, then they don't\n// necessarily block, and they call the callback when they finish with error and\n// result arguments.  (The insert method provides the document ID as its result;\n// update and remove provide the number of affected docs as the result; upsert\n// provides an object with numberAffected and maybe insertedId.)\n//\n// On the client, blocking is impossible, so if a callback\n// isn't provided, they just return immediately and any error\n// information is lost.\n//\n// There's one more tweak. On the client, if you don't provide a\n// callback, then if there is an error, a message will be logged with\n// Meteor._debug.\n//\n// The intent (though this is actually determined by the underlying\n// drivers) is that the operations should be done synchronously, not\n// generating their result until the database has acknowledged\n// them. In the future maybe we should provide a flag to turn this\n// off.\n\n/**\n * @summary Insert a document in the collection.  Returns its unique _id.\n * @locus Anywhere\n * @method  insert\n * @memberOf Mongo.Collection\n * @instance\n * @param {Object} doc The document to insert. May not yet have an _id attribute, in which case Meteor will generate one for you.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the _id as the second.\n */\nMongo.Collection.prototype.insert = function insert(doc, callback) {\n  // Make sure we were passed a document to insert\n  if (!doc) {\n    throw new Error(\"insert requires an argument\");\n  }\n\n  // Shallow-copy the document and possibly generate an ID\n  doc = _.extend({}, doc);\n\n  if ('_id' in doc) {\n    if (!doc._id || !(typeof doc._id === 'string'\n          || doc._id instanceof Mongo.ObjectID)) {\n      throw new Error(\"Meteor requires document _id fields to be non-empty strings or ObjectIDs\");\n    }\n  } else {\n    let generateId = true;\n\n    // Don't generate the id if we're the client and the 'outermost' call\n    // This optimization saves us passing both the randomSeed and the id\n    // Passing both is redundant.\n    if (this._isRemoteCollection()) {\n      const enclosing = DDP._CurrentInvocation.get();\n      if (!enclosing) {\n        generateId = false;\n      }\n    }\n\n    if (generateId) {\n      doc._id = this._makeNewID();\n    }\n  }\n\n  // On inserts, always return the id that we generated; on all other\n  // operations, just return the result from the collection.\n  var chooseReturnValueFromCollectionResult = function (result) {\n    if (doc._id) {\n      return doc._id;\n    }\n\n    // XXX what is this for??\n    // It's some iteraction between the callback to _callMutatorMethod and\n    // the return value conversion\n    doc._id = result;\n\n    return result;\n  };\n\n  const wrappedCallback = wrapCallback(\n    callback, chooseReturnValueFromCollectionResult);\n\n  if (this._isRemoteCollection()) {\n    const result = this._callMutatorMethod(\"insert\", [doc], wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    const result = this._collection.insert(doc, wrappedCallback);\n    return chooseReturnValueFromCollectionResult(result);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Modify one or more documents in the collection. Returns the number of affected documents.\n * @locus Anywhere\n * @method update\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Boolean} options.upsert True to insert a document if no matching documents are found.\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.update = function update(selector, modifier, ...optionsAndCallback) {\n  const callback = popCallbackFromArgs(optionsAndCallback);\n\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  // We've already popped off the callback, so we are left with an array\n  // of one or zero items\n  const options = _.clone(optionsAndCallback[0]) || {};\n  if (options && options.upsert) {\n    // set `insertedId` if absent.  `insertedId` is a Meteor extension.\n    if (options.insertedId) {\n      if (!(typeof options.insertedId === 'string'\n            || options.insertedId instanceof Mongo.ObjectID))\n        throw new Error(\"insertedId must be string or ObjectID\");\n    } else if (! selector._id) {\n      options.insertedId = this._makeNewID();\n    }\n  }\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    const args = [\n      selector,\n      modifier,\n      options\n    ];\n\n    return this._callMutatorMethod(\"update\", args, wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.update(\n      selector, modifier, options, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n}\n\n/**\n * @summary Remove documents from the collection\n * @locus Anywhere\n * @method remove\n * @memberOf Mongo.Collection\n * @instance\n * @param {MongoSelector} selector Specifies which documents to remove\n * @param {Function} [callback] Optional.  If present, called with an error object as its argument.\n */\nMongo.Collection.prototype.remove = function remove(selector, callback) {\n  selector = Mongo.Collection._rewriteSelector(selector);\n\n  const wrappedCallback = wrapCallback(callback);\n\n  if (this._isRemoteCollection()) {\n    return this._callMutatorMethod(\"remove\", [selector], wrappedCallback);\n  }\n\n  // it's my collection.  descend into the collection object\n  // and propagate any exception.\n  try {\n    // If the user provided a callback and the collection implements this\n    // operation asynchronously, then queryRet will be undefined, and the\n    // result will be returned through the callback instead.\n    return this._collection.remove(selector, wrappedCallback);\n  } catch (e) {\n    if (callback) {\n      callback(e);\n      return null;\n    }\n    throw e;\n  }\n};\n\n// Determine if this collection is simply a minimongo representation of a real\n// database on another server\nMongo.Collection.prototype._isRemoteCollection = function _isRemoteCollection() {\n  // XXX see #MeteorServerNull\n  return this._connection && this._connection !== Meteor.server;\n}\n\n// Convert the callback to not return a result if there is an error\nfunction wrapCallback(callback, convertResult) {\n  if (!callback) {\n    return;\n  }\n\n  // If no convert function was passed in, just use a \"blank function\"\n  convertResult = convertResult || _.identity;\n\n  return (error, result) => {\n    callback(error, ! error && convertResult(result));\n  };\n}\n\n/**\n * @summary Modify one or more documents in the collection, or insert one if no matching documents were found. Returns an object with keys `numberAffected` (the number of documents modified)  and `insertedId` (the unique _id of the document that was inserted, if any).\n * @locus Anywhere\n * @param {MongoSelector} selector Specifies which documents to modify\n * @param {MongoModifier} modifier Specifies how to modify the documents\n * @param {Object} [options]\n * @param {Boolean} options.multi True to modify all matching documents; false to only modify one of the matching documents (the default).\n * @param {Function} [callback] Optional.  If present, called with an error object as the first argument and, if no error, the number of affected documents as the second.\n */\nMongo.Collection.prototype.upsert = function upsert(\n    selector, modifier, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  const updateOptions = _.extend({}, options, {\n    _returnObject: true,\n    upsert: true\n  });\n\n  return this.update(selector, modifier, updateOptions, callback);\n};\n\n// We'll actually design an index API later. For now, we just pass through to\n// Mongo's, but make it synchronous.\nMongo.Collection.prototype._ensureIndex = function (index, options) {\n  var self = this;\n  if (!self._collection._ensureIndex)\n    throw new Error(\"Can only call _ensureIndex on server collections\");\n  self._collection._ensureIndex(index, options);\n};\nMongo.Collection.prototype._dropIndex = function (index) {\n  var self = this;\n  if (!self._collection._dropIndex)\n    throw new Error(\"Can only call _dropIndex on server collections\");\n  self._collection._dropIndex(index);\n};\nMongo.Collection.prototype._dropCollection = function () {\n  var self = this;\n  if (!self._collection.dropCollection)\n    throw new Error(\"Can only call _dropCollection on server collections\");\n  self._collection.dropCollection();\n};\nMongo.Collection.prototype._createCappedCollection = function (byteSize, maxDocuments) {\n  var self = this;\n  if (!self._collection._createCappedCollection)\n    throw new Error(\"Can only call _createCappedCollection on server collections\");\n  self._collection._createCappedCollection(byteSize, maxDocuments);\n};\n\n/**\n * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawCollection = function () {\n  var self = this;\n  if (! self._collection.rawCollection) {\n    throw new Error(\"Can only call rawCollection on server collections\");\n  }\n  return self._collection.rawCollection();\n};\n\n/**\n * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/1.4/api-generated/db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n * @locus Server\n */\nMongo.Collection.prototype.rawDatabase = function () {\n  var self = this;\n  if (! (self._driver.mongo && self._driver.mongo.db)) {\n    throw new Error(\"Can only call rawDatabase on server collections\");\n  }\n  return self._driver.mongo.db;\n};\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n// Allow deny stuff is now in the allow-deny package\n_.extend(Meteor.Collection.prototype, AllowDeny.CollectionPrototype);\n\nfunction popCallbackFromArgs(args) {\n  // Pull off any callback (or perhaps a 'callback' variable that was passed\n  // in undefined, like how 'upsert' does it).\n  if (args.length &&\n      (args[args.length - 1] === undefined ||\n       args[args.length - 1] instanceof Function)) {\n    return args.pop();\n  }\n}\n"]},"hash":"b368c7cfc1da1711cfbdaf068bd3c2fe8dd5f1ed"}
