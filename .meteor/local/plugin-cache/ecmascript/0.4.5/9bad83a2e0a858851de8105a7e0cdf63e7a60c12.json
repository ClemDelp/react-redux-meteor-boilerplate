{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/observe_changes_tests.js","filenameRelative":"/packages/mongo/observe_changes_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/observe_changes_tests.js.map","sourceFileName":"/packages/mongo/observe_changes_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"observe_changes_tests"},"ignored":false,"code":"var makeCollection = function makeCollection() {\n  if (Meteor.isServer) return new Mongo.Collection(Random.id());else return new Mongo.Collection(null);\n};\n\n_.each([{ added: 'added', forceOrdered: true }, { added: 'added', forceOrdered: false }, { added: 'addedBefore', forceOrdered: false }], function (options) {\n  var added = options.added;\n  var forceOrdered = options.forceOrdered;\n  Tinytest.addAsync(\"observeChanges - single id - basics \" + added + (forceOrdered ? \" force ordered\" : \"\"), function (test, onComplete) {\n    var c = makeCollection();\n    var counter = 0;\n    var callbacks = [added, \"changed\", \"removed\"];\n    if (forceOrdered) callbacks.push(\"movedBefore\");\n    withCallbackLogger(test, callbacks, Meteor.isServer, function (logger) {\n      var barid = c.insert({ thing: \"stuff\" });\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n      var handle = c.find(fooid).observeChanges(logger);\n      if (added === 'added') logger.expectResult(added, [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);else logger.expectResult(added, [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }, null]);\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n      logger.expectResult(\"changed\", [fooid, { noodles: \"alright\", potatoes: \"tasty\", bacon: undefined }]);\n\n      c.remove(fooid);\n      logger.expectResult(\"removed\", [fooid]);\n\n      c.remove(barid);\n\n      c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n      logger.expectNoResult();\n      handle.stop();\n\n      var badCursor = c.find({}, { fields: { noodles: 1, _id: false } });\n      test.throws(function () {\n        badCursor.observeChanges(logger);\n      });\n\n      onComplete();\n    });\n  });\n});\n\nTinytest.addAsync(\"observeChanges - callback isolation\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handles = [];\n    var cursor = c.find();\n    handles.push(cursor.observeChanges(logger));\n    // fields-tampering observer\n    handles.push(cursor.observeChanges({\n      added: function () {\n        function added(id, fields) {\n          fields.apples = 'green';\n        }\n\n        return added;\n      }(),\n      changed: function () {\n        function changed(id, fields) {\n          fields.apples = 'green';\n        }\n\n        return changed;\n      }()\n    }));\n\n    var fooid = c.insert({ apples: \"ok\" });\n    logger.expectResult(\"added\", [fooid, { apples: \"ok\" }]);\n\n    c.update(fooid, { apples: \"not ok\" });\n    logger.expectResult(\"changed\", [fooid, { apples: \"not ok\" }]);\n\n    test.equal(c.findOne(fooid).apples, \"not ok\");\n\n    _.each(handles, function (handle) {\n      handle.stop();\n    });\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - single id - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    var handle = c.find(fooid).observeChanges(logger);\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    var barid = c.insert({ noodles: \"good\", bacon: \"weird\", apples: \"ok\" });\n    var handle = c.find().observeChanges(logger);\n    logger.expectResultUnordered([{ callback: \"added\",\n      args: [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }] }, { callback: \"added\",\n      args: [barid, { noodles: \"good\", bacon: \"weird\", apples: \"ok\" }] }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - basics\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find().observeChanges(logger);\n    var barid = c.insert({ thing: \"stuff\" });\n    logger.expectResultOnly(\"added\", [barid, { thing: \"stuff\" }]);\n\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", potatoes: \"tasty\", bacon: undefined }]);\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    c.remove(barid);\n    logger.expectResultOnly(\"removed\", [barid]);\n\n    fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({}, { fields: { noodles: 1, bacon: 1 } }).observeChanges(logger);\n      var barid = c.insert({ thing: \"stuff\" });\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n\n      logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n      logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", bacon: undefined }]);\n      c.update(fooid, { noodles: \"alright\", potatoes: \"meh\", apples: \"ok\" });\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({ noodles: \"good\", bacon: \"bad\" });\n\n      logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields + selector on excluded fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({ mac: 1, cheese: 2 }, { fields: { noodles: 1, bacon: 1, eggs: 1 } }).observeChanges(logger);\n      var barid = c.insert({ thing: \"stuff\", mac: 1, cheese: 2 });\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2 });\n\n      logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n      c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\", mac: 1, cheese: 2 });\n      logger.expectResultOnly(\"changed\", [fooid, { noodles: \"alright\", bacon: undefined }]);\n\n      // Doesn't get update event, since modifies only hidden fields\n      c.update(fooid, { noodles: \"alright\", potatoes: \"meh\", apples: \"ok\", mac: 1, cheese: 2 });\n      logger.expectNoResult();\n\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({ noodles: \"good\", bacon: \"bad\", mac: 1, cheese: 2 });\n\n      logger.expectResult(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n}\n\nTinytest.addAsync(\"observeChanges - unordered - specific fields + modify on excluded fields\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ mac: 1, cheese: 2 }, { fields: { noodles: 1, bacon: 1, eggs: 1 } }).observeChanges(logger);\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2 });\n\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\" }]);\n\n    // Noodles go into shadow, mac appears as eggs\n    c.update(fooid, { $rename: { noodles: 'shadow', apples: 'eggs' } });\n    logger.expectResultOnly(\"changed\", [fooid, { eggs: \"ok\", noodles: undefined }]);\n\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - unset parent of observed field\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, ['added', 'changed', 'removed'], Meteor.isServer, function (logger) {\n    var handle = c.find({}, { fields: { 'type.name': 1 } }).observeChanges(logger);\n    var id = c.insert({ type: { name: 'foobar' } });\n    logger.expectResultOnly('added', [id, { type: { name: 'foobar' } }]);\n\n    c.update(id, { $unset: { type: 1 } });\n    test.equal(c.find().fetch(), [{ _id: id }]);\n    logger.expectResultOnly('changed', [id, { type: undefined }]);\n\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - enters and exits result set through change\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ noodles: \"good\" }).observeChanges(logger);\n    var barid = c.insert({ thing: \"stuff\" });\n\n    var fooid = c.insert({ noodles: \"good\", bacon: \"bad\", apples: \"ok\" });\n    logger.expectResultOnly(\"added\", [fooid, { noodles: \"good\", bacon: \"bad\", apples: \"ok\" }]);\n\n    c.update(fooid, { noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResultOnly(\"removed\", [fooid]);\n    c.remove(fooid);\n    c.remove(barid);\n\n    fooid = c.insert({ noodles: \"ok\", bacon: \"bad\", apples: \"ok\" });\n    c.update(fooid, { noodles: \"good\", potatoes: \"tasty\", apples: \"ok\" });\n    logger.expectResult(\"added\", [fooid, { noodles: \"good\", potatoes: \"tasty\", apples: \"ok\" }]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"observeChanges - tailable\", [function (test, expect) {\n    var self = this;\n    var collName = \"cap_\" + Random.id();\n    var coll = new Mongo.Collection(collName);\n    coll._createCappedCollection(1000000);\n    self.xs = [];\n    self.expects = [];\n    self.insert = function (fields) {\n      coll.insert(_.extend({ ts: new MongoInternals.MongoTimestamp(0, 0) }, fields));\n    };\n\n    // Tailable observe shouldn't show things that are in the initial\n    // contents.\n    self.insert({ x: 1 });\n    // Wait for one added call before going to the next test function.\n    self.expects.push(expect());\n\n    var cursor = coll.find({ y: { $ne: 7 } }, { tailable: true });\n    self.handle = cursor.observeChanges({\n      added: function () {\n        function added(id, fields) {\n          self.xs.push(fields.x);\n          test.notEqual(self.expects.length, 0);\n          self.expects.pop()();\n        }\n\n        return added;\n      }(),\n      changed: function () {\n        function changed() {\n          test.fail({ unexpected: \"changed\" });\n        }\n\n        return changed;\n      }(),\n      removed: function () {\n        function removed() {\n          test.fail({ unexpected: \"removed\" });\n        }\n\n        return removed;\n      }()\n    });\n\n    // Nothing happens synchronously.\n    test.equal(self.xs, []);\n  }, function (test, expect) {\n    var self = this;\n    // The cursors sees the first element.\n    test.equal(self.xs, [1]);\n    self.xs = [];\n\n    self.insert({ x: 2, y: 3 });\n    self.insert({ x: 3, y: 7 }); // filtered out by the query\n    self.insert({ x: 4 });\n    // Expect two added calls to happen.\n    self.expects = [expect(), expect()];\n  }, function (test, expect) {\n    var self = this;\n    test.equal(self.xs, [2, 4]);\n    self.xs = [];\n    self.handle.stop();\n\n    self.insert({ x: 5 });\n    // XXX This timeout isn't perfect but it's pretty hard to prove that an\n    // event WON'T happen without something like a write fence.\n    Meteor.setTimeout(expect(), 1000);\n  }, function (test, expect) {\n    var self = this;\n    test.equal(self.xs, []);\n  }]);\n}\n\ntestAsyncMulti(\"observeChanges - bad query\", [function (test, expect) {\n  var c = makeCollection();\n  var observeThrows = function observeThrows() {\n    test.throws(function () {\n      c.find({ __id: { $in: null } }).observeChanges({\n        added: function () {\n          function added() {\n            test.fail(\"added shouldn't be called\");\n          }\n\n          return added;\n        }()\n      });\n    }, '$in needs an array');\n  };\n\n  if (Meteor.isClient) {\n    observeThrows();\n    return;\n  }\n\n  // Test that if two copies of the same bad observeChanges run in parallel\n  // and are de-duped, both observeChanges calls will throw.\n  var Fiber = Npm.require('fibers');\n  var Future = Npm.require('fibers/future');\n  var f1 = new Future();\n  var f2 = new Future();\n  Fiber(function () {\n    // The observeChanges call in here will yield when we talk to mongod,\n    // which will allow the second Fiber to start and observe a duplicate\n    // query.\n    observeThrows();\n    f1['return']();\n  }).run();\n  Fiber(function () {\n    test.isFalse(f1.isResolved()); // first observe hasn't thrown yet\n    observeThrows();\n    f2['return']();\n  }).run();\n  f1.wait();\n  f2.wait();\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/observe_changes_tests.js"],"names":[],"mappings":"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","file":"/packages/mongo/observe_changes_tests.js.map","sourcesContent":["var makeCollection = function () {\n  if (Meteor.isServer)\n    return new Mongo.Collection(Random.id());\n  else\n    return new Mongo.Collection(null);\n};\n\n_.each ([{added:'added', forceOrdered: true},\n         {added:'added', forceOrdered: false},\n         {added: 'addedBefore', forceOrdered: false}], function (options) {\n           var added = options.added;\n           var forceOrdered = options.forceOrdered;\n  Tinytest.addAsync(\"observeChanges - single id - basics \"\n                    + added\n                    + (forceOrdered ? \" force ordered\" : \"\"),\n                    function (test, onComplete) {\n    var c = makeCollection();\n    var counter = 0;\n    var callbacks = [added, \"changed\", \"removed\"];\n    if (forceOrdered)\n      callbacks.push(\"movedBefore\");\n    withCallbackLogger(test,\n                       callbacks,\n                       Meteor.isServer,\n                       function (logger) {\n    var barid = c.insert({thing: \"stuff\"});\n    var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n    var handle = c.find(fooid).observeChanges(logger);\n    if (added === 'added')\n      logger.expectResult(added, [fooid, {noodles: \"good\", bacon: \"bad\",apples: \"ok\"}]);\n    else\n      logger.expectResult(added,\n                          [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}, null]);\n    c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n    logger.expectResult(\"changed\",\n                        [fooid, {noodles: \"alright\", potatoes: \"tasty\", bacon: undefined}]);\n\n    c.remove(fooid);\n    logger.expectResult(\"removed\", [fooid]);\n\n    c.remove(barid);\n\n    c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n    logger.expectNoResult();\n    handle.stop();\n\n    var badCursor = c.find({}, {fields: {noodles: 1, _id: false}});\n    test.throws(function () {\n      badCursor.observeChanges(logger);\n    });\n\n    onComplete();\n    });\n  });\n});\n\nTinytest.addAsync(\"observeChanges - callback isolation\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handles = [];\n    var cursor = c.find();\n    handles.push(cursor.observeChanges(logger));\n    // fields-tampering observer\n    handles.push(cursor.observeChanges({\n      added: function(id, fields) {\n        fields.apples = 'green';\n      },\n      changed: function(id, fields) {\n        fields.apples = 'green';\n      },\n    }));\n\n    var fooid = c.insert({apples: \"ok\"});\n    logger.expectResult(\"added\", [fooid, {apples: \"ok\"}]);\n\n    c.update(fooid, {apples: \"not ok\"})\n    logger.expectResult(\"changed\", [fooid, {apples: \"not ok\"}]);\n\n    test.equal(c.findOne(fooid).apples, \"not ok\");\n\n    _.each(handles, function(handle) { handle.stop(); });\n    onComplete();\n  });\n\n});\n\nTinytest.addAsync(\"observeChanges - single id - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  var handle = c.find(fooid).observeChanges(logger);\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\n\n\nTinytest.addAsync(\"observeChanges - unordered - initial adds\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  var barid = c.insert({noodles: \"good\", bacon: \"weird\", apples: \"ok\"});\n  var handle = c.find().observeChanges(logger);\n  logger.expectResultUnordered([\n    {callback: \"added\",\n     args: [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]},\n    {callback: \"added\",\n     args: [barid, {noodles: \"good\", bacon: \"weird\", apples: \"ok\"}]}\n  ]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\nTinytest.addAsync(\"observeChanges - unordered - basics\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var handle = c.find().observeChanges(logger);\n  var barid = c.insert({thing: \"stuff\"});\n  logger.expectResultOnly(\"added\", [barid, {thing: \"stuff\"}]);\n\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n  logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResultOnly(\"changed\",\n                      [fooid, {noodles: \"alright\", potatoes: \"tasty\", bacon: undefined}]);\n  c.remove(fooid);\n  logger.expectResultOnly(\"removed\", [fooid]);\n  c.remove(barid);\n  logger.expectResultOnly(\"removed\", [barid]);\n\n  fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({}, {fields:{noodles: 1, bacon: 1}}).observeChanges(logger);\n      var barid = c.insert({thing: \"stuff\"});\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n\n      logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n      c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n      logger.expectResultOnly(\"changed\",\n                              [fooid, {noodles: \"alright\", bacon: undefined}]);\n      c.update(fooid, {noodles: \"alright\", potatoes: \"meh\", apples: \"ok\"});\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({noodles: \"good\", bacon: \"bad\"});\n\n      logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"observeChanges - unordered - specific fields + selector on excluded fields\", function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n      var handle = c.find({ mac: 1, cheese: 2 },\n                          {fields:{noodles: 1, bacon: 1, eggs: 1}}).observeChanges(logger);\n      var barid = c.insert({thing: \"stuff\", mac: 1, cheese: 2});\n      logger.expectResultOnly(\"added\", [barid, {}]);\n\n      var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2});\n\n      logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n      c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\", mac: 1, cheese: 2});\n      logger.expectResultOnly(\"changed\",\n                              [fooid, {noodles: \"alright\", bacon: undefined}]);\n\n      // Doesn't get update event, since modifies only hidden fields\n      c.update(fooid, {noodles: \"alright\", potatoes: \"meh\", apples: \"ok\", mac: 1, cheese: 2});\n      logger.expectNoResult();\n\n      c.remove(fooid);\n      logger.expectResultOnly(\"removed\", [fooid]);\n      c.remove(barid);\n      logger.expectResultOnly(\"removed\", [barid]);\n\n      fooid = c.insert({noodles: \"good\", bacon: \"bad\", mac: 1, cheese: 2});\n\n      logger.expectResult(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n      logger.expectNoResult();\n      handle.stop();\n      onComplete();\n    });\n  });\n}\n\nTinytest.addAsync(\"observeChanges - unordered - specific fields + modify on excluded fields\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n    var handle = c.find({ mac: 1, cheese: 2 },\n                        {fields:{noodles: 1, bacon: 1, eggs: 1}}).observeChanges(logger);\n    var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\", mac: 1, cheese: 2});\n\n    logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\"}]);\n\n\n    // Noodles go into shadow, mac appears as eggs\n    c.update(fooid, {$rename: { noodles: 'shadow', apples: 'eggs' }});\n    logger.expectResultOnly(\"changed\",\n                            [fooid, {eggs:\"ok\", noodles: undefined}]);\n\n    c.remove(fooid);\n    logger.expectResultOnly(\"removed\", [fooid]);\n    logger.expectNoResult();\n    handle.stop();\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\n  \"observeChanges - unordered - unset parent of observed field\",\n  function (test, onComplete) {\n    var c = makeCollection();\n    withCallbackLogger(\n      test, ['added', 'changed', 'removed'], Meteor.isServer,\n      function (logger) {\n        var handle = c.find({}, {fields: {'type.name': 1}}).observeChanges(logger);\n        var id = c.insert({ type: { name: 'foobar' } });\n        logger.expectResultOnly('added', [id, { type: { name: 'foobar' } }]);\n\n        c.update(id, { $unset: { type: 1 } });\n        test.equal(c.find().fetch(), [{ _id: id }]);\n        logger.expectResultOnly('changed', [id, { type: undefined }]);\n\n        handle.stop();\n        onComplete();\n      }\n    );\n  }\n);\n\n\n\nTinytest.addAsync(\"observeChanges - unordered - enters and exits result set through change\", function (test, onComplete) {\n  var c = makeCollection();\n  withCallbackLogger(test, [\"added\", \"changed\", \"removed\"], Meteor.isServer, function (logger) {\n  var handle = c.find({noodles: \"good\"}).observeChanges(logger);\n  var barid = c.insert({thing: \"stuff\"});\n\n  var fooid = c.insert({noodles: \"good\", bacon: \"bad\", apples: \"ok\"});\n  logger.expectResultOnly(\"added\", [fooid, {noodles: \"good\", bacon: \"bad\", apples: \"ok\"}]);\n\n  c.update(fooid, {noodles: \"alright\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResultOnly(\"removed\",\n                      [fooid]);\n  c.remove(fooid);\n  c.remove(barid);\n\n  fooid = c.insert({noodles: \"ok\", bacon: \"bad\", apples: \"ok\"});\n  c.update(fooid, {noodles: \"good\", potatoes: \"tasty\", apples: \"ok\"});\n  logger.expectResult(\"added\", [fooid, {noodles: \"good\", potatoes: \"tasty\", apples: \"ok\"}]);\n  logger.expectNoResult();\n  handle.stop();\n  onComplete();\n  });\n});\n\n\nif (Meteor.isServer) {\n  testAsyncMulti(\"observeChanges - tailable\", [\n    function (test, expect) {\n      var self = this;\n      var collName = \"cap_\" + Random.id();\n      var coll = new Mongo.Collection(collName);\n      coll._createCappedCollection(1000000);\n      self.xs = [];\n      self.expects = [];\n      self.insert = function (fields) {\n        coll.insert(_.extend({ts: new MongoInternals.MongoTimestamp(0, 0)},\n                             fields));\n      };\n\n      // Tailable observe shouldn't show things that are in the initial\n      // contents.\n      self.insert({x: 1});\n      // Wait for one added call before going to the next test function.\n      self.expects.push(expect());\n\n      var cursor = coll.find({y: {$ne: 7}}, {tailable: true});\n      self.handle = cursor.observeChanges({\n        added: function (id, fields) {\n          self.xs.push(fields.x);\n          test.notEqual(self.expects.length, 0);\n          self.expects.pop()();\n        },\n        changed: function () {\n          test.fail({unexpected: \"changed\"});\n        },\n        removed: function () {\n          test.fail({unexpected: \"removed\"});\n        }\n      });\n\n      // Nothing happens synchronously.\n      test.equal(self.xs, []);\n    },\n    function (test, expect) {\n      var self = this;\n      // The cursors sees the first element.\n      test.equal(self.xs, [1]);\n      self.xs = [];\n\n      self.insert({x: 2, y: 3});\n      self.insert({x: 3, y: 7});  // filtered out by the query\n      self.insert({x: 4});\n      // Expect two added calls to happen.\n      self.expects = [expect(), expect()];\n    },\n    function (test, expect) {\n      var self = this;\n      test.equal(self.xs, [2, 4]);\n      self.xs = [];\n      self.handle.stop();\n\n      self.insert({x: 5});\n      // XXX This timeout isn't perfect but it's pretty hard to prove that an\n      // event WON'T happen without something like a write fence.\n      Meteor.setTimeout(expect(), 1000);\n    },\n    function (test, expect) {\n      var self = this;\n      test.equal(self.xs, []);\n    }\n  ]);\n}\n\n\ntestAsyncMulti(\"observeChanges - bad query\", [\n  function (test, expect) {\n    var c = makeCollection();\n    var observeThrows = function () {\n      test.throws(function () {\n        c.find({__id: {$in: null}}).observeChanges({\n          added: function () {\n            test.fail(\"added shouldn't be called\");\n          }\n        });\n      }, '$in needs an array');\n    };\n\n    if (Meteor.isClient) {\n      observeThrows();\n      return;\n    }\n\n    // Test that if two copies of the same bad observeChanges run in parallel\n    // and are de-duped, both observeChanges calls will throw.\n    var Fiber = Npm.require('fibers');\n    var Future = Npm.require('fibers/future');\n    var f1 = new Future;\n    var f2 = new Future;\n    Fiber(function () {\n      // The observeChanges call in here will yield when we talk to mongod,\n      // which will allow the second Fiber to start and observe a duplicate\n      // query.\n      observeThrows();\n      f1['return']();\n    }).run();\n    Fiber(function () {\n      test.isFalse(f1.isResolved());  // first observe hasn't thrown yet\n      observeThrows();\n      f2['return']();\n    }).run();\n    f1.wait();\n    f2.wait();\n  }\n]);\n"]},"hash":"9bad83a2e0a858851de8105a7e0cdf63e7a60c12"}
