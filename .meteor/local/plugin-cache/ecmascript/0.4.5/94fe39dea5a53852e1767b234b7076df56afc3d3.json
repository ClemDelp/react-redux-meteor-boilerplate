{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/random/random_tests.js","filenameRelative":"/packages/random/random_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/random/random_tests.js.map","sourceFileName":"/packages/random/random_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"random_tests"},"ignored":false,"code":"Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});","ast":null,"map":{"version":3,"sources":["/packages/random/random_tests.js"],"names":[],"mappings":"AAAA,SAAS,GAAT,CAAa,QAAb,EAAuB,UAAU,IAAV,EAAgB;;;;;;;;;AASrC,MAAI,SAAS,OAAO,eAAP,CAAuB,CAAvB,CAAb;AACA,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB;AACA,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB;AACA,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB;AACA,OAAK,KAAL,CAAW,OAAO,EAAP,EAAX,EAAwB,mBAAxB;AACD,CAdD;;;;AAkBA,SAAS,GAAT,CAAa,iBAAb,EAAgC,UAAU,IAAV,EAAgB;AAC9C,MAAI,QAAQ,EAAZ;AACA,OAAK,KAAL,CAAW,OAAO,EAAP,GAAY,MAAvB,EAA+B,KAA/B;AACA,OAAK,KAAL,CAAW,OAAO,EAAP,CAAU,EAAV,EAAc,MAAzB,EAAiC,EAAjC;AACA,MAAI,YAAY,CAAhB;AACA,MAAI,SAAS,OAAO,SAAP,CAAiB,SAAjB,CAAb;AACA,OAAK,KAAL,CAAW,OAAO,MAAlB,EAA0B,SAA1B;AACA,WAAS,MAAT,EAAiB,EAAjB,E;AACA,MAAI,OAAO,OAAO,QAAP,EAAX;AACA,OAAK,MAAL,CAAY,OAAO,GAAnB;AACA,OAAK,MAAL,CAAY,QAAQ,GAApB;;AAEA,OAAK,KAAL,CAAW,OAAO,MAAP,GAAgB,MAA3B,EAAmC,EAAnC;AACA,OAAK,KAAL,CAAW,OAAO,MAAP,CAAc,EAAd,EAAkB,MAA7B,EAAqC,EAArC;AACD,CAdD;;AAgBA,SAAS,GAAT,CAAa,8BAAb,EAA6C,UAAU,IAAV,EAAgB;AAC3D,MAAI,OAAO,QAAX,EAAqB;AACnB,SAAK,MAAL,CAAY,OAAO,IAAP,KAAgB,SAA5B;AACD;AACD,MAAI,OAAO,QAAX,EAAqB;AACnB,QAAI,qBAAqB,CAAC,EAAE,OAAO,MAAP,KAAkB,WAAlB,IACxB,OAAO,MADiB,IACP,OAAO,MAAP,CAAc,eADT,CAA1B;AAEA,SAAK,KAAL,CAAW,OAAO,IAAP,KAAgB,SAA3B,EAAsC,kBAAtC;AACD;AACF,CATD;;AAWA,SAAS,GAAT,CAAa,8CAAb,EAA6D,UAAU,IAAV,EAAgB;AAC3E,OAAK,MAAL,CAAY,YAAY;AACtB,WAAO,eAAP;AACD,GAFD;AAGD,CAJD","file":"/packages/random/random_tests.js.map","sourcesContent":["Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" &&\n        window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});\n"]},"hash":"94fe39dea5a53852e1767b234b7076df56afc3d3"}
