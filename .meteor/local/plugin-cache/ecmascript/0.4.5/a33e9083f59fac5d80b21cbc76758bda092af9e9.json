{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/oplog_tests.js","filenameRelative":"/packages/mongo/oplog_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/oplog_tests.js.map","sourceFileName":"/packages/mongo/oplog_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"oplog_tests"},"ignored":false,"code":"var OplogCollection = new Mongo.Collection(\"oplog-\" + Random.id());\n\nTinytest.add(\"mongo-livedata - oplog - cursorSupported\", function (test) {\n  var oplogEnabled = !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  var supported = function supported(expected, selector, options) {\n    var cursor = OplogCollection.find(selector, options);\n    var handle = cursor.observeChanges({ added: function added() {} });\n    // If there's no oplog at all, we shouldn't ever use it.\n    if (!oplogEnabled) expected = false;\n    test.equal(!!handle._multiplexer._observeDriver._usesOplog, expected);\n    handle.stop();\n  };\n\n  supported(true, \"asdf\");\n  supported(true, 1234);\n  supported(true, new Mongo.ObjectID());\n\n  supported(true, { _id: \"asdf\" });\n  supported(true, { _id: 1234 });\n  supported(true, { _id: new Mongo.ObjectID() });\n\n  supported(true, { foo: \"asdf\",\n    bar: 1234,\n    baz: new Mongo.ObjectID(),\n    eeney: true,\n    miney: false,\n    moe: null });\n\n  supported(true, {});\n\n  supported(true, { $and: [{ foo: \"asdf\" }, { bar: \"baz\" }] });\n  supported(true, { foo: { x: 1 } });\n  supported(true, { foo: { $gt: 1 } });\n  supported(true, { foo: [1, 2, 3] });\n\n  // No $where.\n  supported(false, { $where: \"xxx\" });\n  supported(false, { $and: [{ foo: \"adsf\" }, { $where: \"xxx\" }] });\n  // No geoqueries.\n  supported(false, { x: { $near: [1, 1] } });\n  // Nothing Minimongo doesn't understand.  (Minimongo happens to fail to\n  // implement $elemMatch inside $all which MongoDB supports.)\n  supported(false, { x: { $all: [{ $elemMatch: { y: 2 } }] } });\n\n  supported(true, {}, { sort: { x: 1 } });\n  supported(true, {}, { sort: { x: 1 }, limit: 5 });\n  supported(false, {}, { sort: { $natural: 1 }, limit: 5 });\n  supported(false, {}, { limit: 5 });\n  supported(false, {}, { skip: 2, limit: 5 });\n  supported(false, {}, { skip: 2 });\n});\n\nprocess.env.MONGO_OPLOG_URL && testAsyncMulti(\"mongo-livedata - oplog - entry skipping\", [function (test, expect) {\n  var self = this;\n  self.collectionName = Random.id();\n  self.collection = new Mongo.Collection(self.collectionName);\n  self.collection._ensureIndex({ species: 1 });\n\n  // Fill collection with lots of irrelevant objects (red cats) and some\n  // relevant ones (blue dogs).\n  self.IRRELEVANT_SIZE = 15000;\n  self.RELEVANT_SIZE = 10;\n  var docs = [];\n  var i;\n  for (i = 0; i < self.IRRELEVANT_SIZE; ++i) {\n    docs.push({\n      name: \"cat \" + i,\n      species: 'cat',\n      color: 'red'\n    });\n  }\n  for (i = 0; i < self.RELEVANT_SIZE; ++i) {\n    docs.push({\n      name: \"dog \" + i,\n      species: 'dog',\n      color: 'blue'\n    });\n  }\n  // XXX implement bulk insert #1255\n  var rawCollection = self.collection.rawCollection();\n  rawCollection.insert(docs, Meteor.bindEnvironment(expect(function (err) {\n    test.isFalse(err);\n  })));\n}, function (test, expect) {\n  var self = this;\n\n  test.equal(self.collection.find().count(), self.IRRELEVANT_SIZE + self.RELEVANT_SIZE);\n\n  var blueDog5Id = null;\n  var gotSpot = false;\n\n  // Watch for blue dogs.\n  self.subHandle = self.collection.find({ species: 'dog', color: 'blue' }).observeChanges({\n    added: function added(id, fields) {\n      if (fields.name === 'dog 5') blueDog5Id = id;\n    },\n    changed: function changed(id, fields) {\n      if (EJSON.equals(id, blueDog5Id) && fields.name === 'spot') gotSpot = true;\n    }\n  });\n  test.isTrue(self.subHandle._multiplexer._observeDriver._usesOplog);\n  test.isTrue(blueDog5Id);\n  test.isFalse(gotSpot);\n\n  self.skipped = false;\n  self.skipHandle = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle.onSkippedEntries(function () {\n    self.skipped = true;\n  });\n\n  // Dye all the cats blue. This adds lots of oplog mentries that look like\n  // they might in theory be relevant (since they say \"something you didn't\n  // know about is now blue\", and who knows, maybe it's a dog) which puts\n  // the OplogObserveDriver into FETCHING mode, which performs poorly.\n  self.collection.update({ species: 'cat' }, { $set: { color: 'blue' } }, { multi: true });\n  self.collection.update(blueDog5Id, { $set: { name: 'spot' } });\n\n  // We ought to see the spot change soon!  It's important to keep this\n  // timeout relatively small (ie, small enough that if we set\n  // $METEOR_OPLOG_TOO_FAR_BEHIND to something enormous, say 200000, that\n  // the test fails).\n  pollUntil(expect, function () {\n    return gotSpot;\n  }, 2000);\n}, function (test, expect) {\n  var self = this;\n  test.isTrue(self.skipped);\n\n  self.skipHandle.stop();\n  self.subHandle.stop();\n  self.collection.remove({});\n}]);","ast":null,"map":{"version":3,"sources":["/packages/mongo/oplog_tests.js"],"names":[],"mappings":"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","file":"/packages/mongo/oplog_tests.js.map","sourcesContent":["var OplogCollection = new Mongo.Collection(\"oplog-\" + Random.id());\n\nTinytest.add(\"mongo-livedata - oplog - cursorSupported\", function (test) {\n  var oplogEnabled =\n        !!MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n\n  var supported = function (expected, selector, options) {\n    var cursor = OplogCollection.find(selector, options);\n    var handle = cursor.observeChanges({added: function () {}});\n    // If there's no oplog at all, we shouldn't ever use it.\n    if (!oplogEnabled)\n      expected = false;\n    test.equal(!!handle._multiplexer._observeDriver._usesOplog, expected);\n    handle.stop();\n  };\n\n  supported(true, \"asdf\");\n  supported(true, 1234);\n  supported(true, new Mongo.ObjectID());\n\n  supported(true, {_id: \"asdf\"});\n  supported(true, {_id: 1234});\n  supported(true, {_id: new Mongo.ObjectID()});\n\n  supported(true, {foo: \"asdf\",\n                   bar: 1234,\n                   baz: new Mongo.ObjectID(),\n                   eeney: true,\n                   miney: false,\n                   moe: null});\n\n  supported(true, {});\n\n  supported(true, {$and: [{foo: \"asdf\"}, {bar: \"baz\"}]});\n  supported(true, {foo: {x: 1}});\n  supported(true, {foo: {$gt: 1}});\n  supported(true, {foo: [1, 2, 3]});\n\n  // No $where.\n  supported(false, {$where: \"xxx\"});\n  supported(false, {$and: [{foo: \"adsf\"}, {$where: \"xxx\"}]});\n  // No geoqueries.\n  supported(false, {x: {$near: [1,1]}});\n  // Nothing Minimongo doesn't understand.  (Minimongo happens to fail to\n  // implement $elemMatch inside $all which MongoDB supports.)\n  supported(false, {x: {$all: [{$elemMatch: {y: 2}}]}});\n\n  supported(true, {}, { sort: {x:1} });\n  supported(true, {}, { sort: {x:1}, limit: 5 });\n  supported(false, {}, { sort: {$natural:1}, limit: 5 });\n  supported(false, {}, { limit: 5 });\n  supported(false, {}, { skip: 2, limit: 5 });\n  supported(false, {}, { skip: 2 });\n});\n\nprocess.env.MONGO_OPLOG_URL && testAsyncMulti(\n  \"mongo-livedata - oplog - entry skipping\", [\n    function (test, expect) {\n      var self = this;\n      self.collectionName = Random.id();\n      self.collection = new Mongo.Collection(self.collectionName);\n      self.collection._ensureIndex({species: 1});\n\n      // Fill collection with lots of irrelevant objects (red cats) and some\n      // relevant ones (blue dogs).\n      self.IRRELEVANT_SIZE = 15000;\n      self.RELEVANT_SIZE = 10;\n      var docs = [];\n      var i;\n      for (i = 0; i < self.IRRELEVANT_SIZE; ++i) {\n        docs.push({\n          name: \"cat \" + i,\n          species: 'cat',\n          color: 'red'\n        });\n      }\n      for (i = 0; i < self.RELEVANT_SIZE; ++i) {\n        docs.push({\n          name: \"dog \" + i,\n          species: 'dog',\n          color: 'blue'\n        });\n      }\n      // XXX implement bulk insert #1255\n      var rawCollection = self.collection.rawCollection();\n      rawCollection.insert(docs, Meteor.bindEnvironment(expect(function (err) {\n        test.isFalse(err);\n      })));\n    },\n    function (test, expect) {\n      var self = this;\n\n      test.equal(self.collection.find().count(),\n                 self.IRRELEVANT_SIZE + self.RELEVANT_SIZE);\n\n      var blueDog5Id = null;\n      var gotSpot = false;\n\n      // Watch for blue dogs.\n      self.subHandle =\n        self.collection.find({species: 'dog', color: 'blue'}).observeChanges({\n          added: function (id, fields) {\n            if (fields.name === 'dog 5')\n              blueDog5Id = id;\n          },\n          changed: function (id, fields) {\n            if (EJSON.equals(id, blueDog5Id) && fields.name === 'spot')\n              gotSpot = true;\n          }\n        });\n      test.isTrue(self.subHandle._multiplexer._observeDriver._usesOplog);\n      test.isTrue(blueDog5Id);\n      test.isFalse(gotSpot);\n\n      self.skipped = false;\n      self.skipHandle =\n        MongoInternals.defaultRemoteCollectionDriver().mongo\n        ._oplogHandle.onSkippedEntries(function () {\n          self.skipped = true;\n        });\n\n      // Dye all the cats blue. This adds lots of oplog mentries that look like\n      // they might in theory be relevant (since they say \"something you didn't\n      // know about is now blue\", and who knows, maybe it's a dog) which puts\n      // the OplogObserveDriver into FETCHING mode, which performs poorly.\n      self.collection.update({species: 'cat'},\n                             {$set: {color: 'blue'}},\n                             {multi: true});\n      self.collection.update(blueDog5Id, {$set: {name: 'spot'}});\n\n      // We ought to see the spot change soon!  It's important to keep this\n      // timeout relatively small (ie, small enough that if we set\n      // $METEOR_OPLOG_TOO_FAR_BEHIND to something enormous, say 200000, that\n      // the test fails).\n      pollUntil(expect, function () {\n        return gotSpot;\n      }, 2000);\n    },\n    function (test, expect) {\n      var self = this;\n      test.isTrue(self.skipped);\n\n      self.skipHandle.stop();\n      self.subHandle.stop();\n      self.collection.remove({});\n    }\n  ]\n);\n"]},"hash":"a33e9083f59fac5d80b21cbc76758bda092af9e9"}
