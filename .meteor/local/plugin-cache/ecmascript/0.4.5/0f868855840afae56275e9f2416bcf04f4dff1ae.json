{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"body-parser","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"bodyParser"}]},{"source":"../imports/api/Log.js","imported":["Log"],"specifiers":[{"kind":"named","imported":"Log","local":"Log"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/server/main.js","filenameRelative":"/server/main.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/server/main.js.map","sourceFileName":"/server/main.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"main"},"ignored":false,"code":"var Meteor;module.import('meteor/meteor',{\"Meteor\":function(v){Meteor=v}});var bodyParser;module.import('body-parser',{\"default\":function(v){bodyParser=v}});var Log;module.import('../imports/api/Log.js',{\"Log\":function(v){Log=v}});\n\n\nvar Fiber = require('fibers');\n\nif (Meteor.isServer) {\n\tMeteor.startup(function () {\n\n\t\t// Express\n\t\tapp = Express();\n\t\tapp.use(bodyParser.json()); // to support JSON-encoded bodies\n\t\tapp.use(bodyParser.urlencoded({ // to support URL-encoded bodies\n\t\t\textended: true\n\t\t}));\n\n\t\t// Save server launch\n\t\t// Test DB connection\n\t\t// INSERT IN DB\n\t\tFiber(function () {\n\t\t\tLog.insert({\n\t\t\t\tdatetime: new Date()\n\t\t\t}, function (error, response) {\n\t\t\t\tconsole.log('new log (id: ' + response + ') in db, total logs ---> ', Log.find().count());\n\t\t\t});\n\t\t}).run();\n\n\t\t// ROUTE\n\t\tapp.get('/getScoreInRealTime', function (req, res) {\n\t\t\tconsole.log('/getScoreInRealTime');\n\t\t\t// Test sream\n\t\t\tsetInterval(function () {\n\t\t\t\tvar y = Math.floor(Math.random() * 10);\n\t\t\t\tStreamy.broadcast('scoreStream', { 'y': y });\n\t\t\t}, 3000);\n\t\t\tres.json({ data: 'response...' });\n\t\t});\n\t});\n}","ast":null,"map":{"version":3,"sources":["/server/main.js"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,UAAP,MAAuB,aAAvB;AACA,SAAS,GAAT,QAAoB,uBAApB;AACA,IAAM,QAAQ,QAAQ,QAAR,CAAd;;AAEA,IAAG,OAAO,QAAV,EAAoB;AACnB,QAAO,OAAP,CAAe,YAAM;;;AAGpB,QAAM,SAAN;AACA,MAAI,GAAJ,CAAQ,WAAW,IAAX,EAAR,E;AACA,MAAI,GAAJ,CAAQ,WAAW,UAAX,CAAsB,E;AAC5B,aAAU;AADkB,GAAtB,CAAR;;;;;AAOA,QAAM,YAAY;AACjB,OAAI,MAAJ,CAAW;AACV,cAAU,IAAI,IAAJ;AADA,IAAX,EAEG,UAAU,KAAV,EAAiB,QAAjB,EAA2B;AAC7B,YAAQ,GAAR,CAAY,kBAAkB,QAAlB,GAA6B,2BAAzC,EAAsE,IAAI,IAAJ,GAAW,KAAX,EAAtE;AACA,IAJD;AAKA,GAND,EAMG,GANH;;;AASA,MAAI,GAAJ,CAAQ,qBAAR,EAA+B,UAAU,GAAV,EAAe,GAAf,EAAoB;AAClD,WAAQ,GAAR,CAAY,qBAAZ;;AAEA,eAAY,YAAY;AACvB,QAAM,IAAI,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,EAA3B,CAAV;AACA,YAAQ,SAAR,CAAkB,aAAlB,EAAiC,EAAC,KAAK,CAAN,EAAjC;AACA,IAHD,EAGG,IAHH;AAIA,OAAI,IAAJ,CAAS,EAAC,MAAM,aAAP,EAAT;AACA,GARD;AASA,EA9BD;AA+BA","file":"/server/main.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor'\nimport bodyParser from 'body-parser'\nimport { Log } from '../imports/api/Log.js'\nconst Fiber = require('fibers')\n\nif(Meteor.isServer) {\n\tMeteor.startup(() => {\n\n\t\t// Express\n\t\tapp = Express()\n\t\tapp.use(bodyParser.json())       // to support JSON-encoded bodies\n\t\tapp.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n\t\t  extended: true\n\t\t}))\n\n\t\t// Save server launch\n\t\t// Test DB connection\n\t\t// INSERT IN DB\n\t\tFiber(function () {\n\t\t\tLog.insert({\n\t\t\t\tdatetime: new Date()\n\t\t\t}, function (error, response) {\n\t\t\t\tconsole.log('new log (id: ' + response + ') in db, total logs ---> ', Log.find().count())\n\t\t\t})\n\t\t}).run()\n\n\t\t// ROUTE\n\t\tapp.get('/getScoreInRealTime', function (req, res) {\n\t\t\tconsole.log('/getScoreInRealTime')\n\t\t\t// Test sream\n\t\t\tsetInterval(function () {\n\t\t\t\tconst y = Math.floor(Math.random() * 10)\n\t\t\t\tStreamy.broadcast('scoreStream', {'y': y})\n\t\t\t}, 3000)\n\t\t\tres.json({data: 'response...'})\n\t\t})\n\t})\n}\n"]},"hash":"0f868855840afae56275e9f2416bcf04f4dff1ae"}
