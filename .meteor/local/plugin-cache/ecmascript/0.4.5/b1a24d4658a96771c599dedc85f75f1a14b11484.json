{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/ddp-server/crossbar.js","filenameRelative":"/packages/ddp-server/crossbar.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/ddp-server/crossbar.js.map","sourceFileName":"/packages/ddp-server/crossbar.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"crossbar"},"ignored":false,"code":"// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function _collectionForMessage(msg) {\n    var self = this;\n    if (!_.has(msg, 'collection')) {\n      return '';\n    } else if (typeof msg.collection === 'string') {\n      if (msg.collection === '') throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function listen(trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = { trigger: EJSON.clone(trigger), callback: callback };\n    if (!_.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n    }\n    self.listenersByCollection[collection][id] = record;\n\n    if (self.factName && Package.facts) {\n      Package.facts.Facts.incrementServerFact(self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function stop() {\n        if (self.factName && Package.facts) {\n          Package.facts.Facts.incrementServerFact(self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        if (_.isEmpty(self.listenersByCollection[collection])) {\n          delete self.listenersByCollection[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function fire(notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (!_.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function _matches(notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) || EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});","ast":null,"map":{"version":3,"sources":["/packages/ddp-server/crossbar.js"],"names":[],"mappings":"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","file":"/packages/ddp-server/crossbar.js.map","sourcesContent":["// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n    }\n    self.listenersByCollection[collection][id] = record;\n\n    if (self.factName && Package.facts) {\n      Package.facts.Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package.facts) {\n          Package.facts.Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        if (_.isEmpty(self.listenersByCollection[collection])) {\n          delete self.listenersByCollection[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n"]},"hash":"b1a24d4658a96771c599dedc85f75f1a14b11484"}
