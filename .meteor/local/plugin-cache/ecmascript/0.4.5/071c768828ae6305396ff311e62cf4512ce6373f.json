{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/collection_tests.js","filenameRelative":"/packages/mongo/collection_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/collection_tests.js.map","sourceFileName":"/packages/mongo/collection_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"collection_tests"},"ignored":false,"code":"var _typeof2 = require('babel-runtime/helpers/typeof');\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nTinytest.add('collection - call Mongo.Collection without new', function (test) {\n  test.throws(function () {\n    Mongo.Collection(null);\n  }, /use \"new\" to construct a Mongo\\.Collection/);\n});\n\nTinytest.add('collection - call new Mongo.Collection multiple times', function (test) {\n  var collectionName = 'multiple_times_1_' + test.id;\n  new Mongo.Collection(collectionName);\n\n  test.throws(function () {\n    new Mongo.Collection(collectionName);\n  }, /There is already a collection named/);\n});\n\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true', function (test) {\n  var collectionName = 'multiple_times_2_' + test.id;\n  new Mongo.Collection(collectionName);\n\n  try {\n    new Mongo.Collection(collectionName, { _suppressSameNameError: true });\n    test.ok();\n  } catch (error) {\n    console.log(error);\n    test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n  }\n});\n\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false', function (test) {\n  var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n\n  var methodCollectionName = 'hasmethods' + test.id;\n  var hasmethods = new Mongo.Collection(methodCollectionName);\n  test.equal((0, _typeof3['default'])(hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert']), 'function');\n\n  var noMethodCollectionName = 'nomethods' + test.id;\n  var nomethods = new Mongo.Collection(noMethodCollectionName, { defineMutationMethods: false });\n  test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n});\n\nTinytest.add('collection - call find with sort function', function (test) {\n  var initialize = function initialize(collection) {\n    collection.insert({ a: 2 });\n    collection.insert({ a: 3 });\n    collection.insert({ a: 1 });\n  };\n\n  var sorter = function sorter(a, b) {\n    return a.a - b.a;\n  };\n\n  var getSorted = function getSorted(collection) {\n    return collection.find({}, { sort: sorter }).map(function (doc) {\n      return doc.a;\n    });\n  };\n\n  var collectionName = 'sort' + test.id;\n  var localCollection = new Mongo.Collection(null);\n  var namedCollection = new Mongo.Collection(collectionName, { connection: null });\n\n  initialize(localCollection);\n  test.equal(getSorted(localCollection), [1, 2, 3]);\n\n  initialize(namedCollection);\n  test.equal(getSorted(namedCollection), [1, 2, 3]);\n});\n\nTinytest.add('collection - call native find with sort function', function (test) {\n  var collectionName = 'sortNative' + test.id;\n  var nativeCollection = new Mongo.Collection(collectionName);\n\n  if (Meteor.isServer) {\n    test.throws(function () {\n      nativeCollection.find({}, { sort: function sort() {} }).map(function (doc) {\n        return doc.a;\n      });\n    }, /Illegal sort clause/);\n  }\n});","ast":null,"map":{"version":3,"sources":["/packages/mongo/collection_tests.js"],"names":[],"mappings":"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","file":"/packages/mongo/collection_tests.js.map","sourcesContent":["Tinytest.add(\n  'collection - call Mongo.Collection without new',\n  function (test) {\n    test.throws(\n      function () {\n        Mongo.Collection(null);\n      },\n      /use \"new\" to construct a Mongo\\.Collection/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times',\n  function (test) {\n    var collectionName = 'multiple_times_1_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    test.throws(\n      function () {\n        new Mongo.Collection(collectionName);\n      },\n      /There is already a collection named/\n    );\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection multiple times with _suppressSameNameError=true',\n  function (test) {\n    var collectionName = 'multiple_times_2_' + test.id;\n    new Mongo.Collection(collectionName);\n\n    try {\n      new Mongo.Collection(collectionName, {_suppressSameNameError: true});\n      test.ok();\n    } catch (error) {\n      console.log(error);\n      test.fail('Expected new Mongo.Collection not to throw an error when called twice with the same name');\n    }\n  }\n);\n\nTinytest.add('collection - call new Mongo.Collection with defineMutationMethods=false',\n  function (test) {\n    var handlerPropName = Meteor.isClient ? '_methodHandlers' : 'method_handlers';\n\n    var methodCollectionName = 'hasmethods' + test.id;\n    var hasmethods = new Mongo.Collection(methodCollectionName);\n    test.equal(typeof hasmethods._connection[handlerPropName]['/' + methodCollectionName + '/insert'], 'function');\n\n    var noMethodCollectionName = 'nomethods' + test.id;\n    var nomethods = new Mongo.Collection(noMethodCollectionName, {defineMutationMethods: false});\n    test.equal(nomethods._connection[handlerPropName]['/' + noMethodCollectionName + '/insert'], undefined);\n  }\n);\n\nTinytest.add('collection - call find with sort function',\n  function (test) {\n    var initialize = function (collection) {\n      collection.insert({a: 2});\n      collection.insert({a: 3});\n      collection.insert({a: 1});\n    };\n\n    var sorter = function (a, b) {\n      return a.a - b.a;\n    }\n\n    var getSorted = function (collection) {\n      return collection.find({}, {sort: sorter}).map(function (doc) { return doc.a; });\n    };\n\n    var collectionName = 'sort' + test.id;\n    var localCollection = new Mongo.Collection(null);\n    var namedCollection = new Mongo.Collection(collectionName, {connection: null});\n\n    initialize(localCollection);\n    test.equal(getSorted(localCollection), [1, 2, 3]);\n\n    initialize(namedCollection);\n    test.equal(getSorted(namedCollection), [1, 2, 3]);\n  }\n);\n\nTinytest.add('collection - call native find with sort function',\n  function (test) {\n    var collectionName = 'sortNative' + test.id;\n    var nativeCollection = new Mongo.Collection(collectionName);\n\n    if (Meteor.isServer) {\n      test.throws(\n        function () {\n          nativeCollection.find({}, {sort: function(){}}).map(function (doc) { return doc.a; })\n        },\n        /Illegal sort clause/\n      );\n    }\n  }\n);\n"]},"hash":"071c768828ae6305396ff311e62cf4512ce6373f"}
