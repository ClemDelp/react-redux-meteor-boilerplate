{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/oplog_observe_driver.js","filenameRelative":"/packages/mongo/oplog_observe_driver.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/oplog_observe_driver.js.map","sourceFileName":"/packages/mongo/oplog_observe_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"oplog_observe_driver"},"ignored":false,"code":"var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function SwitchedToQuery() {};\nvar finishIfNeedToPollQuery = function finishIfNeedToPollQuery(f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery)) throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function OplogObserveDriver(options) {\n  var self = this;\n  self._usesOplog = true; // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap();\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter) self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap();\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(finishIfNeedToPollQuery(function () {\n    self._needToPollQuery();\n  })));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(trigger, function (notification) {\n      Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n        var op = notification.op;\n        if (notification.dropCollection || notification.dropDatabase) {\n          // Note: this call is not allowed to block on anything (especially\n          // on waiting for oplog entries to catch up) because that will block\n          // onOplogEntry!\n          self._needToPollQuery();\n        } else {\n          // All other operators should be handled depending on phase\n          if (self._phase === PHASE.QUERYING) self._handleOplogEntryQuerying(op);else self._handleOplogEntrySteadyOrFetching(op);\n        }\n      }));\n    }));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(self._cursorDescription, function (notification) {\n    // If we're not in a pre-fire write fence, we don't have to do anything.\n    var fence = DDPServer._CurrentWriteFence.get();\n    if (!fence || fence.fired) return;\n\n    if (fence._oplogObserveDrivers) {\n      fence._oplogObserveDrivers[self._id] = self;\n      return;\n    }\n\n    fence._oplogObserveDrivers = {};\n    fence._oplogObserveDrivers[self._id] = self;\n\n    fence.onBeforeFire(function () {\n      var drivers = fence._oplogObserveDrivers;\n      delete fence._oplogObserveDrivers;\n\n      // This fence cannot fire until we've caught up to \"this point\" in the\n      // oplog, and all observers made it back to the steady state.\n      self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n      _.each(drivers, function (driver) {\n        if (driver._stopped) return;\n\n        var write = fence.beginWrite();\n        if (driver._phase === PHASE.STEADY) {\n          // Make sure that all of the callbacks have made it through the\n          // multiplexer and been delivered to ObserveHandles before committing\n          // writes.\n          driver._multiplexer.onFlush(function () {\n            write.committed();\n          });\n        } else {\n          driver._writesToCommitWhenWeReachSteady.push(write);\n        }\n      });\n    });\n  }));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(function () {\n    self._needToPollQuery();\n  })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function _addPublished(id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" + (self._published.size() - self._limit) + \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function _removePublished(id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (!self._limit || self._published.size() === self._limit) return;\n\n      if (self._published.size() > self._limit) throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING) return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer) return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function _changePublished(id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(projectedNew, projectedOld);\n      if (!_.isEmpty(changed)) self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function _addBuffered(id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function _removeBuffered(id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (!self._unpublishedBuffer.size() && !self._safeAppendToBuffer) self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function _addMatching(doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id)) throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id)) throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = limit && self._published.size() > 0 ? self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = limit && self._unpublishedBuffer.size() > 0 ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId()) : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = !limit || self._published.size() < limit || comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer && self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered && comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function _removeMatching(id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (!self._published.has(id) && !self._limit) throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function _handleDoc(id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = !self._limit || self._unpublishedBuffer.size() === 0 || comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer || maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() && self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = !toPublish && self._safeAppendToBuffer || !toPublish && maxBuffered && comparator(newDoc, maxBuffered) <= 0;\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (!self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function _fetchModifiedDocuments() {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING) throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap();\n          var waiting = 0;\n          var fut = new Future();\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(self._cursorDescription.collectionName, id, cacheKey, finishIfNeedToPollQuery(function (err, doc) {\n              try {\n                if (err) {\n                  Meteor._debug(\"Got exception while fetching documents: \" + err);\n                  // If we get an error from the fetcher (eg, trouble\n                  // connecting to Mongo), let's just abandon the fetch phase\n                  // altogether and fall back to polling. It's not like we're\n                  // getting live updates anyway.\n                  if (self._phase !== PHASE.QUERYING) {\n                    self._needToPollQuery();\n                  }\n                } else if (!self._stopped && self._phase === PHASE.FETCHING && self._fetchGeneration === thisGeneration) {\n                  // We re-check the generation in case we've had an explicit\n                  // _pollQuery call (eg, in another fiber) which should\n                  // effectively cancel this round of fetches.  (_pollQuery\n                  // increments the generation.)\n                  self._handleDoc(id, doc);\n                }\n              } finally {\n                waiting--;\n                // Because fetch() never calls its callback synchronously,\n                // this is safe (ie, we won't call fut.return() before the\n                // forEach is done).\n                if (waiting === 0) fut['return']();\n              }\n            }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING) return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING) self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function _beSteady() {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function _handleOplogEntryQuerying(op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function _handleOplogEntrySteadyOrFetching(op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING && (self._currentlyFetching && self._currentlyFetching.has(id) || self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) || self._limit && self._unpublishedBuffer.has(id)) self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id)) throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id)) throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result) self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc = !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({ _id: id }, op.o));\n        } else if ((publishedBefore || bufferedBefore) && canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id) ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\") throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc || self._matcher.canBecomeTrueByModifier(op.o) || self._sorter && self._sorter.affectedByModifier(op.o)) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY) self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function _runInitialQuery() {\n    var self = this;\n    if (self._stopped) throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({ initial: true }); // yields\n\n    if (self._stopped) return; // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying(); // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function _pollQuery() {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped) return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap();\n      self._currentlyFetching = null;\n      ++self._fetchGeneration; // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function _runQuery(options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped) return;\n\n      newResults = new LocalCollection._IdMap();\n      newBuffer = new LocalCollection._IdMap();\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {\n          // yields\n          if (!self._limit || i < self._limit) newResults.set(doc._id, doc);else newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof e.code === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped) return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function _needToPollQuery() {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped) return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery();\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function _doneQuerying() {\n    var self = this;\n\n    if (self._stopped) return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp(); // yields\n    if (self._stopped) return;\n    if (self._phase !== PHASE.QUERYING) throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function _cursorForQuery(optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(self._cursorDescription.collectionName, self._cursorDescription.selector, options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function _publishNewResults(newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id)) idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\"The Mongo server and the Meteor query disagree on how \" + \"many documents match your query. Maybe it is hitting a Mongo \" + \"edge case? The query is: \" + EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id)) throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function stop() {\n    var self = this;\n    if (self._stopped) return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed(); // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function _registerPhaseChange(phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date();\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog) return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || options.limit && !options.sort) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\") return false;else throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function modifierCanBeDirectlyApplied(modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;","ast":null,"map":{"version":3,"sources":["/packages/mongo/oplog_observe_driver.js"],"names":[],"mappings":"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","file":"/packages/mongo/oplog_observe_driver.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nvar PHASE = {\n  QUERYING: \"QUERYING\",\n  FETCHING: \"FETCHING\",\n  STEADY: \"STEADY\"\n};\n\n// Exception thrown by _needToPollQuery which unrolls the stack up to the\n// enclosing call to finishIfNeedToPollQuery.\nvar SwitchedToQuery = function () {};\nvar finishIfNeedToPollQuery = function (f) {\n  return function () {\n    try {\n      f.apply(this, arguments);\n    } catch (e) {\n      if (!(e instanceof SwitchedToQuery))\n        throw e;\n    }\n  };\n};\n\nvar currentId = 0;\n\n// OplogObserveDriver is an alternative to PollingObserveDriver which follows\n// the Mongo operation log instead of just re-polling the query. It obeys the\n// same simple interface: constructing it starts sending observeChanges\n// callbacks (and a ready() invocation) to the ObserveMultiplexer, and you stop\n// it by calling the stop() method.\nOplogObserveDriver = function (options) {\n  var self = this;\n  self._usesOplog = true;  // tests look at this\n\n  self._id = currentId;\n  currentId++;\n\n  self._cursorDescription = options.cursorDescription;\n  self._mongoHandle = options.mongoHandle;\n  self._multiplexer = options.multiplexer;\n\n  if (options.ordered) {\n    throw Error(\"OplogObserveDriver only supports unordered observeChanges\");\n  }\n\n  var sorter = options.sorter;\n  // We don't support $near and other geo-queries so it's OK to initialize the\n  // comparator only once in the constructor.\n  var comparator = sorter && sorter.getComparator();\n\n  if (options.cursorDescription.options.limit) {\n    // There are several properties ordered driver implements:\n    // - _limit is a positive number\n    // - _comparator is a function-comparator by which the query is ordered\n    // - _unpublishedBuffer is non-null Min/Max Heap,\n    //                      the empty buffer in STEADY phase implies that the\n    //                      everything that matches the queries selector fits\n    //                      into published set.\n    // - _published - Min Heap (also implements IdMap methods)\n\n    var heapOptions = { IdMap: LocalCollection._IdMap };\n    self._limit = self._cursorDescription.options.limit;\n    self._comparator = comparator;\n    self._sorter = sorter;\n    self._unpublishedBuffer = new MinMaxHeap(comparator, heapOptions);\n    // We need something that can find Max value in addition to IdMap interface\n    self._published = new MaxHeap(comparator, heapOptions);\n  } else {\n    self._limit = 0;\n    self._comparator = null;\n    self._sorter = null;\n    self._unpublishedBuffer = null;\n    self._published = new LocalCollection._IdMap;\n  }\n\n  // Indicates if it is safe to insert a new document at the end of the buffer\n  // for this query. i.e. it is known that there are no documents matching the\n  // selector those are not in published or buffer.\n  self._safeAppendToBuffer = false;\n\n  self._stopped = false;\n  self._stopHandles = [];\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"mongo-livedata\", \"observe-drivers-oplog\", 1);\n\n  self._registerPhaseChange(PHASE.QUERYING);\n\n  var selector = self._cursorDescription.selector;\n  self._matcher = options.matcher;\n  var projection = self._cursorDescription.options.fields || {};\n  self._projectionFn = LocalCollection._compileProjection(projection);\n  // Projection function, result of combining important fields for selector and\n  // existing fields projection\n  self._sharedProjection = self._matcher.combineIntoProjection(projection);\n  if (sorter)\n    self._sharedProjection = sorter.combineIntoProjection(self._sharedProjection);\n  self._sharedProjectionFn = LocalCollection._compileProjection(\n    self._sharedProjection);\n\n  self._needToFetch = new LocalCollection._IdMap;\n  self._currentlyFetching = null;\n  self._fetchGeneration = 0;\n\n  self._requeryWhenDoneThisQuery = false;\n  self._writesToCommitWhenWeReachSteady = [];\n\n  // If the oplog handle tells us that it skipped some entries (because it got\n  // behind, say), re-poll.\n  self._stopHandles.push(self._mongoHandle._oplogHandle.onSkippedEntries(\n    finishIfNeedToPollQuery(function () {\n      self._needToPollQuery();\n    })\n  ));\n\n  forEachTrigger(self._cursorDescription, function (trigger) {\n    self._stopHandles.push(self._mongoHandle._oplogHandle.onOplogEntry(\n      trigger, function (notification) {\n        Meteor._noYieldsAllowed(finishIfNeedToPollQuery(function () {\n          var op = notification.op;\n          if (notification.dropCollection || notification.dropDatabase) {\n            // Note: this call is not allowed to block on anything (especially\n            // on waiting for oplog entries to catch up) because that will block\n            // onOplogEntry!\n            self._needToPollQuery();\n          } else {\n            // All other operators should be handled depending on phase\n            if (self._phase === PHASE.QUERYING)\n              self._handleOplogEntryQuerying(op);\n            else\n              self._handleOplogEntrySteadyOrFetching(op);\n          }\n        }));\n      }\n    ));\n  });\n\n  // XXX ordering w.r.t. everything else?\n  self._stopHandles.push(listenAll(\n    self._cursorDescription, function (notification) {\n      // If we're not in a pre-fire write fence, we don't have to do anything.\n      var fence = DDPServer._CurrentWriteFence.get();\n      if (!fence || fence.fired)\n        return;\n\n      if (fence._oplogObserveDrivers) {\n        fence._oplogObserveDrivers[self._id] = self;\n        return;\n      }\n\n      fence._oplogObserveDrivers = {};\n      fence._oplogObserveDrivers[self._id] = self;\n\n      fence.onBeforeFire(function () {\n        var drivers = fence._oplogObserveDrivers;\n        delete fence._oplogObserveDrivers;\n\n        // This fence cannot fire until we've caught up to \"this point\" in the\n        // oplog, and all observers made it back to the steady state.\n        self._mongoHandle._oplogHandle.waitUntilCaughtUp();\n\n        _.each(drivers, function (driver) {\n          if (driver._stopped)\n            return;\n\n          var write = fence.beginWrite();\n          if (driver._phase === PHASE.STEADY) {\n            // Make sure that all of the callbacks have made it through the\n            // multiplexer and been delivered to ObserveHandles before committing\n            // writes.\n            driver._multiplexer.onFlush(function () {\n              write.committed();\n            });\n          } else {\n            driver._writesToCommitWhenWeReachSteady.push(write);\n          }\n        });\n      });\n    }\n  ));\n\n  // When Mongo fails over, we need to repoll the query, in case we processed an\n  // oplog entry that got rolled back.\n  self._stopHandles.push(self._mongoHandle._onFailover(finishIfNeedToPollQuery(\n    function () {\n      self._needToPollQuery();\n    })));\n\n  // Give _observeChanges a chance to add the new ObserveHandle to our\n  // multiplexer, so that the added calls get streamed.\n  Meteor.defer(finishIfNeedToPollQuery(function () {\n    self._runInitialQuery();\n  }));\n};\n\n_.extend(OplogObserveDriver.prototype, {\n  _addPublished: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var fields = _.clone(doc);\n      delete fields._id;\n      self._published.set(id, self._sharedProjectionFn(doc));\n      self._multiplexer.added(id, self._projectionFn(fields));\n\n      // After adding this document, the published set might be overflowed\n      // (exceeding capacity specified by limit). If so, push the maximum\n      // element to the buffer, we might want to save it in memory to reduce the\n      // amount of Mongo lookups in the future.\n      if (self._limit && self._published.size() > self._limit) {\n        // XXX in theory the size of published is no more than limit+1\n        if (self._published.size() !== self._limit + 1) {\n          throw new Error(\"After adding to published, \" +\n                          (self._published.size() - self._limit) +\n                          \" documents are overflowing the set\");\n        }\n\n        var overflowingDocId = self._published.maxElementId();\n        var overflowingDoc = self._published.get(overflowingDocId);\n\n        if (EJSON.equals(overflowingDocId, id)) {\n          throw new Error(\"The document just added is overflowing the published set\");\n        }\n\n        self._published.remove(overflowingDocId);\n        self._multiplexer.removed(overflowingDocId);\n        self._addBuffered(overflowingDocId, overflowingDoc);\n      }\n    });\n  },\n  _removePublished: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.remove(id);\n      self._multiplexer.removed(id);\n      if (! self._limit || self._published.size() === self._limit)\n        return;\n\n      if (self._published.size() > self._limit)\n        throw Error(\"self._published got too big\");\n\n      // OK, we are publishing less than the limit. Maybe we should look in the\n      // buffer to find the next element past what we were publishing before.\n\n      if (!self._unpublishedBuffer.empty()) {\n        // There's something in the buffer; move the first thing in it to\n        // _published.\n        var newDocId = self._unpublishedBuffer.minElementId();\n        var newDoc = self._unpublishedBuffer.get(newDocId);\n        self._removeBuffered(newDocId);\n        self._addPublished(newDocId, newDoc);\n        return;\n      }\n\n      // There's nothing in the buffer.  This could mean one of a few things.\n\n      // (a) We could be in the middle of re-running the query (specifically, we\n      // could be in _publishNewResults). In that case, _unpublishedBuffer is\n      // empty because we clear it at the beginning of _publishNewResults. In\n      // this case, our caller already knows the entire answer to the query and\n      // we don't need to do anything fancy here.  Just return.\n      if (self._phase === PHASE.QUERYING)\n        return;\n\n      // (b) We're pretty confident that the union of _published and\n      // _unpublishedBuffer contain all documents that match selector. Because\n      // _unpublishedBuffer is empty, that means we're confident that _published\n      // contains all documents that match selector. So we have nothing to do.\n      if (self._safeAppendToBuffer)\n        return;\n\n      // (c) Maybe there are other documents out there that should be in our\n      // buffer. But in that case, when we emptied _unpublishedBuffer in\n      // _removeBuffered, we should have called _needToPollQuery, which will\n      // either put something in _unpublishedBuffer or set _safeAppendToBuffer\n      // (or both), and it will put us in QUERYING for that whole time. So in\n      // fact, we shouldn't be able to get here.\n\n      throw new Error(\"Buffer inexplicably empty\");\n    });\n  },\n  _changePublished: function (id, oldDoc, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._published.set(id, self._sharedProjectionFn(newDoc));\n      var projectedNew = self._projectionFn(newDoc);\n      var projectedOld = self._projectionFn(oldDoc);\n      var changed = DiffSequence.makeChangedFields(\n        projectedNew, projectedOld);\n      if (!_.isEmpty(changed))\n        self._multiplexer.changed(id, changed);\n    });\n  },\n  _addBuffered: function (id, doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.set(id, self._sharedProjectionFn(doc));\n\n      // If something is overflowing the buffer, we just remove it from cache\n      if (self._unpublishedBuffer.size() > self._limit) {\n        var maxBufferedId = self._unpublishedBuffer.maxElementId();\n\n        self._unpublishedBuffer.remove(maxBufferedId);\n\n        // Since something matching is removed from cache (both published set and\n        // buffer), set flag to false\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Is called either to remove the doc completely from matching set or to move\n  // it to the published set later.\n  _removeBuffered: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._unpublishedBuffer.remove(id);\n      // To keep the contract \"buffer is never empty in STEADY phase unless the\n      // everything matching fits into published\" true, we poll everything as\n      // soon as we see the buffer becoming empty.\n      if (! self._unpublishedBuffer.size() && ! self._safeAppendToBuffer)\n        self._needToPollQuery();\n    });\n  },\n  // Called when a document has joined the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _addMatching: function (doc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = doc._id;\n      if (self._published.has(id))\n        throw Error(\"tried to add something already published \" + id);\n      if (self._limit && self._unpublishedBuffer.has(id))\n        throw Error(\"tried to add something already existed in buffer \" + id);\n\n      var limit = self._limit;\n      var comparator = self._comparator;\n      var maxPublished = (limit && self._published.size() > 0) ?\n        self._published.get(self._published.maxElementId()) : null;\n      var maxBuffered = (limit && self._unpublishedBuffer.size() > 0)\n        ? self._unpublishedBuffer.get(self._unpublishedBuffer.maxElementId())\n        : null;\n      // The query is unlimited or didn't publish enough documents yet or the\n      // new document would fit into published set pushing the maximum element\n      // out, then we need to publish the doc.\n      var toPublish = ! limit || self._published.size() < limit ||\n        comparator(doc, maxPublished) < 0;\n\n      // Otherwise we might need to buffer it (only in case of limited query).\n      // Buffering is allowed if the buffer is not filled up yet and all\n      // matching docs are either in the published set or in the buffer.\n      var canAppendToBuffer = !toPublish && self._safeAppendToBuffer &&\n        self._unpublishedBuffer.size() < limit;\n\n      // Or if it is small enough to be safely inserted to the middle or the\n      // beginning of the buffer.\n      var canInsertIntoBuffer = !toPublish && maxBuffered &&\n        comparator(doc, maxBuffered) <= 0;\n\n      var toBuffer = canAppendToBuffer || canInsertIntoBuffer;\n\n      if (toPublish) {\n        self._addPublished(id, doc);\n      } else if (toBuffer) {\n        self._addBuffered(id, doc);\n      } else {\n        // dropping it and not saving to the cache\n        self._safeAppendToBuffer = false;\n      }\n    });\n  },\n  // Called when a document leaves the \"Matching\" results set.\n  // Takes responsibility of keeping _unpublishedBuffer in sync with _published\n  // and the effect of limit enforced.\n  _removeMatching: function (id) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (! self._published.has(id) && ! self._limit)\n        throw Error(\"tried to remove something matching but not cached \" + id);\n\n      if (self._published.has(id)) {\n        self._removePublished(id);\n      } else if (self._unpublishedBuffer.has(id)) {\n        self._removeBuffered(id);\n      }\n    });\n  },\n  _handleDoc: function (id, newDoc) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var matchesNow = newDoc && self._matcher.documentMatches(newDoc).result;\n\n      var publishedBefore = self._published.has(id);\n      var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n      var cachedBefore = publishedBefore || bufferedBefore;\n\n      if (matchesNow && !cachedBefore) {\n        self._addMatching(newDoc);\n      } else if (cachedBefore && !matchesNow) {\n        self._removeMatching(id);\n      } else if (cachedBefore && matchesNow) {\n        var oldDoc = self._published.get(id);\n        var comparator = self._comparator;\n        var minBuffered = self._limit && self._unpublishedBuffer.size() &&\n          self._unpublishedBuffer.get(self._unpublishedBuffer.minElementId());\n\n        if (publishedBefore) {\n          // Unlimited case where the document stays in published once it\n          // matches or the case when we don't have enough matching docs to\n          // publish or the changed but matching doc will stay in published\n          // anyways.\n          //\n          // XXX: We rely on the emptiness of buffer. Be sure to maintain the\n          // fact that buffer can't be empty if there are matching documents not\n          // published. Notably, we don't want to schedule repoll and continue\n          // relying on this property.\n          var staysInPublished = ! self._limit ||\n            self._unpublishedBuffer.size() === 0 ||\n            comparator(newDoc, minBuffered) <= 0;\n\n          if (staysInPublished) {\n            self._changePublished(id, oldDoc, newDoc);\n          } else {\n            // after the change doc doesn't stay in the published, remove it\n            self._removePublished(id);\n            // but it can move into buffered now, check it\n            var maxBuffered = self._unpublishedBuffer.get(\n              self._unpublishedBuffer.maxElementId());\n\n            var toBuffer = self._safeAppendToBuffer ||\n                  (maxBuffered && comparator(newDoc, maxBuffered) <= 0);\n\n            if (toBuffer) {\n              self._addBuffered(id, newDoc);\n            } else {\n              // Throw away from both published set and buffer\n              self._safeAppendToBuffer = false;\n            }\n          }\n        } else if (bufferedBefore) {\n          oldDoc = self._unpublishedBuffer.get(id);\n          // remove the old version manually instead of using _removeBuffered so\n          // we don't trigger the querying immediately.  if we end this block\n          // with the buffer empty, we will need to trigger the query poll\n          // manually too.\n          self._unpublishedBuffer.remove(id);\n\n          var maxPublished = self._published.get(\n            self._published.maxElementId());\n          var maxBuffered = self._unpublishedBuffer.size() &&\n                self._unpublishedBuffer.get(\n                  self._unpublishedBuffer.maxElementId());\n\n          // the buffered doc was updated, it could move to published\n          var toPublish = comparator(newDoc, maxPublished) < 0;\n\n          // or stays in buffer even after the change\n          var staysInBuffer = (! toPublish && self._safeAppendToBuffer) ||\n                (!toPublish && maxBuffered &&\n                 comparator(newDoc, maxBuffered) <= 0);\n\n          if (toPublish) {\n            self._addPublished(id, newDoc);\n          } else if (staysInBuffer) {\n            // stays in buffer but changes\n            self._unpublishedBuffer.set(id, newDoc);\n          } else {\n            // Throw away from both published set and buffer\n            self._safeAppendToBuffer = false;\n            // Normally this check would have been done in _removeBuffered but\n            // we didn't use it, so we need to do it ourself now.\n            if (! self._unpublishedBuffer.size()) {\n              self._needToPollQuery();\n            }\n          }\n        } else {\n          throw new Error(\"cachedBefore implies either of publishedBefore or bufferedBefore is true.\");\n        }\n      }\n    });\n  },\n  _fetchModifiedDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.FETCHING);\n      // Defer, because nothing called from the oplog entry handler may yield,\n      // but fetch() yields.\n      Meteor.defer(finishIfNeedToPollQuery(function () {\n        while (!self._stopped && !self._needToFetch.empty()) {\n          if (self._phase === PHASE.QUERYING) {\n            // While fetching, we decided to go into QUERYING mode, and then we\n            // saw another oplog entry, so _needToFetch is not empty. But we\n            // shouldn't fetch these documents until AFTER the query is done.\n            break;\n          }\n\n          // Being in steady phase here would be surprising.\n          if (self._phase !== PHASE.FETCHING)\n            throw new Error(\"phase in fetchModifiedDocuments: \" + self._phase);\n\n          self._currentlyFetching = self._needToFetch;\n          var thisGeneration = ++self._fetchGeneration;\n          self._needToFetch = new LocalCollection._IdMap;\n          var waiting = 0;\n          var fut = new Future;\n          // This loop is safe, because _currentlyFetching will not be updated\n          // during this loop (in fact, it is never mutated).\n          self._currentlyFetching.forEach(function (cacheKey, id) {\n            waiting++;\n            self._mongoHandle._docFetcher.fetch(\n              self._cursorDescription.collectionName, id, cacheKey,\n              finishIfNeedToPollQuery(function (err, doc) {\n                try {\n                  if (err) {\n                    Meteor._debug(\"Got exception while fetching documents: \" +\n                                  err);\n                    // If we get an error from the fetcher (eg, trouble\n                    // connecting to Mongo), let's just abandon the fetch phase\n                    // altogether and fall back to polling. It's not like we're\n                    // getting live updates anyway.\n                    if (self._phase !== PHASE.QUERYING) {\n                      self._needToPollQuery();\n                    }\n                  } else if (!self._stopped && self._phase === PHASE.FETCHING\n                             && self._fetchGeneration === thisGeneration) {\n                    // We re-check the generation in case we've had an explicit\n                    // _pollQuery call (eg, in another fiber) which should\n                    // effectively cancel this round of fetches.  (_pollQuery\n                    // increments the generation.)\n                    self._handleDoc(id, doc);\n                  }\n                } finally {\n                  waiting--;\n                  // Because fetch() never calls its callback synchronously,\n                  // this is safe (ie, we won't call fut.return() before the\n                  // forEach is done).\n                  if (waiting === 0)\n                    fut.return();\n                }\n              }));\n          });\n          fut.wait();\n          // Exit now if we've had a _pollQuery call (here or in another fiber).\n          if (self._phase === PHASE.QUERYING)\n            return;\n          self._currentlyFetching = null;\n        }\n        // We're done fetching, so we can be steady, unless we've had a\n        // _pollQuery call (here or in another fiber).\n        if (self._phase !== PHASE.QUERYING)\n          self._beSteady();\n      }));\n    });\n  },\n  _beSteady: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._registerPhaseChange(PHASE.STEADY);\n      var writes = self._writesToCommitWhenWeReachSteady;\n      self._writesToCommitWhenWeReachSteady = [];\n      self._multiplexer.onFlush(function () {\n        _.each(writes, function (w) {\n          w.committed();\n        });\n      });\n    });\n  },\n  _handleOplogEntryQuerying: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._needToFetch.set(idForOp(op), op.ts.toString());\n    });\n  },\n  _handleOplogEntrySteadyOrFetching: function (op) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var id = idForOp(op);\n      // If we're already fetching this one, or about to, we can't optimize;\n      // make sure that we fetch it again if necessary.\n      if (self._phase === PHASE.FETCHING &&\n          ((self._currentlyFetching && self._currentlyFetching.has(id)) ||\n           self._needToFetch.has(id))) {\n        self._needToFetch.set(id, op.ts.toString());\n        return;\n      }\n\n      if (op.op === 'd') {\n        if (self._published.has(id) ||\n            (self._limit && self._unpublishedBuffer.has(id)))\n          self._removeMatching(id);\n      } else if (op.op === 'i') {\n        if (self._published.has(id))\n          throw new Error(\"insert found for already-existing ID in published\");\n        if (self._unpublishedBuffer && self._unpublishedBuffer.has(id))\n          throw new Error(\"insert found for already-existing ID in buffer\");\n\n        // XXX what if selector yields?  for now it can't but later it could\n        // have $where\n        if (self._matcher.documentMatches(op.o).result)\n          self._addMatching(op.o);\n      } else if (op.op === 'u') {\n        // Is this a modifier ($set/$unset, which may require us to poll the\n        // database to figure out if the whole document matches the selector) or\n        // a replacement (in which case we can just directly re-evaluate the\n        // selector)?\n        var isReplace = !_.has(op.o, '$set') && !_.has(op.o, '$unset');\n        // If this modifier modifies something inside an EJSON custom type (ie,\n        // anything with EJSON$), then we can't try to use\n        // LocalCollection._modify, since that just mutates the EJSON encoding,\n        // not the actual object.\n        var canDirectlyModifyDoc =\n          !isReplace && modifierCanBeDirectlyApplied(op.o);\n\n        var publishedBefore = self._published.has(id);\n        var bufferedBefore = self._limit && self._unpublishedBuffer.has(id);\n\n        if (isReplace) {\n          self._handleDoc(id, _.extend({_id: id}, op.o));\n        } else if ((publishedBefore || bufferedBefore) &&\n                   canDirectlyModifyDoc) {\n          // Oh great, we actually know what the document is, so we can apply\n          // this directly.\n          var newDoc = self._published.has(id)\n            ? self._published.get(id) : self._unpublishedBuffer.get(id);\n          newDoc = EJSON.clone(newDoc);\n\n          newDoc._id = id;\n          try {\n            LocalCollection._modify(newDoc, op.o);\n          } catch (e) {\n            if (e.name !== \"MinimongoError\")\n              throw e;\n            // We didn't understand the modifier.  Re-fetch.\n            self._needToFetch.set(id, op.ts.toString());\n            if (self._phase === PHASE.STEADY) {\n              self._fetchModifiedDocuments();\n            }\n            return;\n          }\n          self._handleDoc(id, self._sharedProjectionFn(newDoc));\n        } else if (!canDirectlyModifyDoc ||\n                   self._matcher.canBecomeTrueByModifier(op.o) ||\n                   (self._sorter && self._sorter.affectedByModifier(op.o))) {\n          self._needToFetch.set(id, op.ts.toString());\n          if (self._phase === PHASE.STEADY)\n            self._fetchModifiedDocuments();\n        }\n      } else {\n        throw Error(\"XXX SURPRISING OPERATION: \" + op);\n      }\n    });\n  },\n  // Yields!\n  _runInitialQuery: function () {\n    var self = this;\n    if (self._stopped)\n      throw new Error(\"oplog stopped surprisingly early\");\n\n    self._runQuery({initial: true});  // yields\n\n    if (self._stopped)\n      return;  // can happen on queryError\n\n    // Allow observeChanges calls to return. (After this, it's possible for\n    // stop() to be called.)\n    self._multiplexer.ready();\n\n    self._doneQuerying();  // yields\n  },\n\n  // In various circumstances, we may just want to stop processing the oplog and\n  // re-run the initial query, just as if we were a PollingObserveDriver.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler.\n  //\n  // XXX We should call this when we detect that we've been in FETCHING for \"too\n  // long\".\n  //\n  // XXX We should call this when we detect Mongo failover (since that might\n  // mean that some of the oplog entries we have processed have been rolled\n  // back). The Node Mongo driver is in the middle of a bunch of huge\n  // refactorings, including the way that it notifies you when primary\n  // changes. Will put off implementing this until driver 1.4 is out.\n  _pollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // Yay, we get to forget about all the things we thought we had to fetch.\n      self._needToFetch = new LocalCollection._IdMap;\n      self._currentlyFetching = null;\n      ++self._fetchGeneration;  // ignore any in-flight fetches\n      self._registerPhaseChange(PHASE.QUERYING);\n\n      // Defer so that we don't yield.  We don't need finishIfNeedToPollQuery\n      // here because SwitchedToQuery is not thrown in QUERYING mode.\n      Meteor.defer(function () {\n        self._runQuery();\n        self._doneQuerying();\n      });\n    });\n  },\n\n  // Yields!\n  _runQuery: function (options) {\n    var self = this;\n    options = options || {};\n    var newResults, newBuffer;\n\n    // This while loop is just to retry failures.\n    while (true) {\n      // If we've been stopped, we don't have to run anything any more.\n      if (self._stopped)\n        return;\n\n      newResults = new LocalCollection._IdMap;\n      newBuffer = new LocalCollection._IdMap;\n\n      // Query 2x documents as the half excluded from the original query will go\n      // into unpublished buffer to reduce additional Mongo lookups in cases\n      // when documents are removed from the published set and need a\n      // replacement.\n      // XXX needs more thought on non-zero skip\n      // XXX 2 is a \"magic number\" meaning there is an extra chunk of docs for\n      // buffer if such is needed.\n      var cursor = self._cursorForQuery({ limit: self._limit * 2 });\n      try {\n        cursor.forEach(function (doc, i) {  // yields\n          if (!self._limit || i < self._limit)\n            newResults.set(doc._id, doc);\n          else\n            newBuffer.set(doc._id, doc);\n        });\n        break;\n      } catch (e) {\n        if (options.initial && typeof(e.code) === 'number') {\n          // This is an error document sent to us by mongod, not a connection\n          // error generated by the client. And we've never seen this query work\n          // successfully. Probably it's a bad selector or something, so we\n          // should NOT retry. Instead, we should halt the observe (which ends\n          // up calling `stop` on us).\n          self._multiplexer.queryError(e);\n          return;\n        }\n\n        // During failover (eg) if we get an exception we should log and retry\n        // instead of crashing.\n        Meteor._debug(\"Got exception while polling query: \" + e);\n        Meteor._sleepForMs(100);\n      }\n    }\n\n    if (self._stopped)\n      return;\n\n    self._publishNewResults(newResults, newBuffer);\n  },\n\n  // Transitions to QUERYING and runs another query, or (if already in QUERYING)\n  // ensures that we will query again later.\n  //\n  // This function may not block, because it is called from an oplog entry\n  // handler. However, if we were not already in the QUERYING phase, it throws\n  // an exception that is caught by the closest surrounding\n  // finishIfNeedToPollQuery call; this ensures that we don't continue running\n  // close that was designed for another phase inside PHASE.QUERYING.\n  //\n  // (It's also necessary whenever logic in this file yields to check that other\n  // phases haven't put us into QUERYING mode, though; eg,\n  // _fetchModifiedDocuments does this.)\n  _needToPollQuery: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      if (self._stopped)\n        return;\n\n      // If we're not already in the middle of a query, we can query now\n      // (possibly pausing FETCHING).\n      if (self._phase !== PHASE.QUERYING) {\n        self._pollQuery();\n        throw new SwitchedToQuery;\n      }\n\n      // We're currently in QUERYING. Set a flag to ensure that we run another\n      // query when we're done.\n      self._requeryWhenDoneThisQuery = true;\n    });\n  },\n\n  // Yields!\n  _doneQuerying: function () {\n    var self = this;\n\n    if (self._stopped)\n      return;\n    self._mongoHandle._oplogHandle.waitUntilCaughtUp();  // yields\n    if (self._stopped)\n      return;\n    if (self._phase !== PHASE.QUERYING)\n      throw Error(\"Phase unexpectedly \" + self._phase);\n\n    Meteor._noYieldsAllowed(function () {\n      if (self._requeryWhenDoneThisQuery) {\n        self._requeryWhenDoneThisQuery = false;\n        self._pollQuery();\n      } else if (self._needToFetch.empty()) {\n        self._beSteady();\n      } else {\n        self._fetchModifiedDocuments();\n      }\n    });\n  },\n\n  _cursorForQuery: function (optionsOverwrite) {\n    var self = this;\n    return Meteor._noYieldsAllowed(function () {\n      // The query we run is almost the same as the cursor we are observing,\n      // with a few changes. We need to read all the fields that are relevant to\n      // the selector, not just the fields we are going to publish (that's the\n      // \"shared\" projection). And we don't want to apply any transform in the\n      // cursor, because observeChanges shouldn't use the transform.\n      var options = _.clone(self._cursorDescription.options);\n\n      // Allow the caller to modify the options. Useful to specify different\n      // skip and limit values.\n      _.extend(options, optionsOverwrite);\n\n      options.fields = self._sharedProjection;\n      delete options.transform;\n      // We are NOT deep cloning fields or selector here, which should be OK.\n      var description = new CursorDescription(\n        self._cursorDescription.collectionName,\n        self._cursorDescription.selector,\n        options);\n      return new Cursor(self._mongoHandle, description);\n    });\n  },\n\n\n  // Replace self._published with newResults (both are IdMaps), invoking observe\n  // callbacks on the multiplexer.\n  // Replace self._unpublishedBuffer with newBuffer.\n  //\n  // XXX This is very similar to LocalCollection._diffQueryUnorderedChanges. We\n  // should really: (a) Unify IdMap and OrderedDict into Unordered/OrderedDict\n  // (b) Rewrite diff.js to use these classes instead of arrays and objects.\n  _publishNewResults: function (newResults, newBuffer) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n\n      // If the query is limited and there is a buffer, shut down so it doesn't\n      // stay in a way.\n      if (self._limit) {\n        self._unpublishedBuffer.clear();\n      }\n\n      // First remove anything that's gone. Be careful not to modify\n      // self._published while iterating over it.\n      var idsToRemove = [];\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          idsToRemove.push(id);\n      });\n      _.each(idsToRemove, function (id) {\n        self._removePublished(id);\n      });\n\n      // Now do adds and changes.\n      // If self has a buffer and limit, the new fetched result will be\n      // limited correctly as the query has sort specifier.\n      newResults.forEach(function (doc, id) {\n        self._handleDoc(id, doc);\n      });\n\n      // Sanity-check that everything we tried to put into _published ended up\n      // there.\n      // XXX if this is slow, remove it later\n      if (self._published.size() !== newResults.size()) {\n        throw Error(\n          \"The Mongo server and the Meteor query disagree on how \" +\n            \"many documents match your query. Maybe it is hitting a Mongo \" +\n            \"edge case? The query is: \" +\n            EJSON.stringify(self._cursorDescription.selector));\n      }\n      self._published.forEach(function (doc, id) {\n        if (!newResults.has(id))\n          throw Error(\"_published has a doc that newResults doesn't; \" + id);\n      });\n\n      // Finally, replace the buffer\n      newBuffer.forEach(function (doc, id) {\n        self._addBuffered(id, doc);\n      });\n\n      self._safeAppendToBuffer = newBuffer.size() < self._limit;\n    });\n  },\n\n  // This stop function is invoked from the onStop of the ObserveMultiplexer, so\n  // it shouldn't actually be possible to call it until the multiplexer is\n  // ready.\n  //\n  // It's important to check self._stopped after every call in this file that\n  // can yield!\n  stop: function () {\n    var self = this;\n    if (self._stopped)\n      return;\n    self._stopped = true;\n    _.each(self._stopHandles, function (handle) {\n      handle.stop();\n    });\n\n    // Note: we *don't* use multiplexer.onFlush here because this stop\n    // callback is actually invoked by the multiplexer itself when it has\n    // determined that there are no handles left. So nothing is actually going\n    // to get flushed (and it's probably not valid to call methods on the\n    // dying multiplexer).\n    _.each(self._writesToCommitWhenWeReachSteady, function (w) {\n      w.committed();  // maybe yields?\n    });\n    self._writesToCommitWhenWeReachSteady = null;\n\n    // Proactively drop references to potentially big things.\n    self._published = null;\n    self._unpublishedBuffer = null;\n    self._needToFetch = null;\n    self._currentlyFetching = null;\n    self._oplogEntryHandle = null;\n    self._listenersHandle = null;\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"mongo-livedata\", \"observe-drivers-oplog\", -1);\n  },\n\n  _registerPhaseChange: function (phase) {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      var now = new Date;\n\n      if (self._phase) {\n        var timeDiff = now - self._phaseStartTime;\n        Package.facts && Package.facts.Facts.incrementServerFact(\n          \"mongo-livedata\", \"time-spent-in-\" + self._phase + \"-phase\", timeDiff);\n      }\n\n      self._phase = phase;\n      self._phaseStartTime = now;\n    });\n  }\n});\n\n// Does our oplog tailing code support this cursor? For now, we are being very\n// conservative and allowing only simple queries with simple options.\n// (This is a \"static method\".)\nOplogObserveDriver.cursorSupported = function (cursorDescription, matcher) {\n  // First, check the options.\n  var options = cursorDescription.options;\n\n  // Did the user say no explicitly?\n  // underscored version of the option is COMPAT with 1.2\n  if (options.disableOplog || options._disableOplog)\n    return false;\n\n  // skip is not supported: to support it we would need to keep track of all\n  // \"skipped\" documents or at least their ids.\n  // limit w/o a sort specifier is not supported: current implementation needs a\n  // deterministic way to order documents.\n  if (options.skip || (options.limit && !options.sort)) return false;\n\n  // If a fields projection option is given check if it is supported by\n  // minimongo (some operators are not supported).\n  if (options.fields) {\n    try {\n      LocalCollection._checkSupportedProjection(options.fields);\n    } catch (e) {\n      if (e.name === \"MinimongoError\")\n        return false;\n      else\n        throw e;\n    }\n  }\n\n  // We don't allow the following selectors:\n  //   - $where (not confident that we provide the same JS environment\n  //             as Mongo, and can yield!)\n  //   - $near (has \"interesting\" properties in MongoDB, like the possibility\n  //            of returning an ID multiple times, though even polling maybe\n  //            have a bug there)\n  //           XXX: once we support it, we would need to think more on how we\n  //           initialize the comparators when we create the driver.\n  return !matcher.hasWhere() && !matcher.hasGeoQuery();\n};\n\nvar modifierCanBeDirectlyApplied = function (modifier) {\n  return _.all(modifier, function (fields, operation) {\n    return _.all(fields, function (value, field) {\n      return !/EJSON\\$/.test(field);\n    });\n  });\n};\n\nMongoInternals.OplogObserveDriver = OplogObserveDriver;\n"]},"hash":"ca84f199a357593ddc3d8893ea3c5e2d4e00492f"}
