{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"/packages/mongo/mongo_livedata_tests.js","filenameRelative":"/packages/mongo/mongo_livedata_tests.js","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"polyfill":false}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/packages/mongo/mongo_livedata_tests.js.map","sourceFileName":"/packages/mongo/mongo_livedata_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"mongo_livedata_tests"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// This is a magic collection that fails its writes on the server when\n// the selector (or inserted document) contains fail: true.\n\nvar TRANSFORMS = {};\n\n// We keep track of the collections, so we can refer to them by name\nvar COLLECTIONS = {};\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    createInsecureCollection: function () {\n      function createInsecureCollection(name, options) {\n        check(name, String);\n        check(options, Match.Optional({\n          transformName: Match.Optional(String),\n          idGeneration: Match.Optional(String)\n        }));\n\n        if (options && options.transformName) {\n          options.transform = TRANSFORMS[options.transformName];\n        }\n        var c = new Mongo.Collection(name, options);\n        COLLECTIONS[name] = c;\n        c._insecure = true;\n        Meteor.publish('c-' + name, function () {\n          return c.find();\n        });\n      }\n\n      return createInsecureCollection;\n    }(),\n    dropInsecureCollection: function () {\n      function dropInsecureCollection(name) {\n        var c = COLLECTIONS[name];\n        c._dropCollection();\n      }\n\n      return dropInsecureCollection;\n    }()\n  });\n}\n\n// We store the generated id, keyed by collection, for each insert\n// This is so we can test the stub and the server generate the same id\nvar INSERTED_IDS = {};\n\nMeteor.methods({\n  insertObjects: function () {\n    function insertObjects(collectionName, doc, count) {\n      var c = COLLECTIONS[collectionName];\n      var ids = [];\n      for (var i = 0; i < count; i++) {\n        var id = c.insert(doc);\n        INSERTED_IDS[collectionName] = (INSERTED_IDS[collectionName] || []).concat([id]);\n        ids.push(id);\n      }\n      return ids;\n    }\n\n    return insertObjects;\n  }(),\n  upsertObject: function () {\n    function upsertObject(collectionName, selector, modifier) {\n      var c = COLLECTIONS[collectionName];\n      return c.upsert(selector, modifier);\n    }\n\n    return upsertObject;\n  }(),\n  doMeteorCall: function () {\n    function doMeteorCall(name /*, arguments */) {\n      var args = Array.prototype.slice.call(arguments);\n\n      return Meteor.call.apply(null, args);\n    }\n\n    return doMeteorCall;\n  }()\n});\n\nvar runInFence = function runInFence(f) {\n  if (Meteor.isClient) {\n    f();\n  } else {\n    var fence = new DDPServer._WriteFence();\n    DDPServer._CurrentWriteFence.withValue(fence, f);\n    fence.armAndWait();\n  }\n};\n\n// Helpers for upsert tests\n\nvar stripId = function stripId(obj) {\n  delete obj._id;\n};\n\nvar compareResults = function compareResults(test, skipIds, actual, expected) {\n  if (skipIds) {\n    _.map(actual, stripId);\n    _.map(expected, stripId);\n  }\n  // (technically should ignore order in comparison)\n  test.equal(actual, expected);\n};\n\nvar upsert = function upsert(coll, useUpdate, query, mod, options, callback) {\n  if (!callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  if (useUpdate) {\n    if (callback) return coll.update(query, mod, _.extend({ upsert: true }, options), function (err, result) {\n      callback(err, !err && {\n        numberAffected: result\n      });\n    });\n    return {\n      numberAffected: coll.update(query, mod, _.extend({ upsert: true }, options))\n    };\n  } else {\n    return coll.upsert(query, mod, options, callback);\n  }\n};\n\nvar upsertTestMethod = \"livedata_upsert_test_method\";\nvar upsertTestMethodColl;\n\n// This is the implementation of the upsert test method on both the client and\n// the server. On the client, we get a test object. On the server, we just throw\n// errors if something doesn't go according to plan, and when the client\n// receives those errors it will cause the test to fail.\n//\n// Client-side exceptions in here will NOT cause the test to fail! Because it's\n// a stub, those exceptions will get caught and logged.\nvar upsertTestMethodImpl = function upsertTestMethodImpl(coll, useUpdate, test) {\n  coll.remove({});\n  var result1 = upsert(coll, useUpdate, { foo: \"bar\" }, { foo: \"bar\" });\n\n  if (!test) {\n    test = {\n      equal: function () {\n        function equal(a, b) {\n          if (!EJSON.equals(a, b)) throw new Error(\"Not equal: \" + JSON.stringify(a) + \", \" + JSON.stringify(b));\n        }\n\n        return equal;\n      }(),\n      isTrue: function () {\n        function isTrue(a) {\n          if (!a) throw new Error(\"Not truthy: \" + JSON.stringify(a));\n        }\n\n        return isTrue;\n      }(),\n      isFalse: function () {\n        function isFalse(a) {\n          if (a) throw new Error(\"Not falsey: \" + JSON.stringify(a));\n        }\n\n        return isFalse;\n      }()\n    };\n  }\n\n  // if we don't test this, then testing result1.numberAffected will throw,\n  // which will get caught and logged and the whole test will pass!\n  test.isTrue(result1);\n\n  test.equal(result1.numberAffected, 1);\n  if (!useUpdate) test.isTrue(result1.insertedId);\n  var fooId = result1.insertedId;\n  var obj = coll.findOne({ foo: \"bar\" });\n  test.isTrue(obj);\n  if (!useUpdate) test.equal(obj._id, result1.insertedId);\n  var result2 = upsert(coll, useUpdate, { _id: fooId }, { $set: { foo: \"baz \" } });\n  test.isTrue(result2);\n  test.equal(result2.numberAffected, 1);\n  test.isFalse(result2.insertedId);\n};\n\nif (Meteor.isServer) {\n  var m = {};\n  m[upsertTestMethod] = function (run, useUpdate, options) {\n    check(run, String);\n    check(useUpdate, Boolean);\n    upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, options);\n    upsertTestMethodImpl(upsertTestMethodColl, useUpdate);\n  };\n  Meteor.methods(m);\n}\n\nMeteor._FailureTestCollection = new Mongo.Collection(\"___meteor_failure_test_collection\");\n\n// For test \"document with a custom type\"\nvar Dog = function Dog(name, color, actions) {\n  var self = this;\n  self.color = color;\n  self.name = name;\n  self.actions = actions || [{ name: \"wag\" }, { name: \"swim\" }];\n};\n_.extend(Dog.prototype, {\n  getName: function () {\n    function getName() {\n      return this.name;\n    }\n\n    return getName;\n  }(),\n  getColor: function () {\n    function getColor() {\n      return this.name;\n    }\n\n    return getColor;\n  }(),\n  equals: function () {\n    function equals(other) {\n      return other.name === this.name && other.color === this.color && EJSON.equals(other.actions, this.actions);\n    }\n\n    return equals;\n  }(),\n  toJSONValue: function () {\n    function toJSONValue() {\n      return { color: this.color, name: this.name, actions: this.actions };\n    }\n\n    return toJSONValue;\n  }(),\n  typeName: function () {\n    function typeName() {\n      return \"dog\";\n    }\n\n    return typeName;\n  }(),\n  clone: function () {\n    function clone() {\n      return new Dog(this.name, this.color);\n    }\n\n    return clone;\n  }(),\n  speak: function () {\n    function speak() {\n      return \"woof\";\n    }\n\n    return speak;\n  }()\n});\nEJSON.addType(\"dog\", function (o) {\n  return new Dog(o.name, o.color, o.actions);\n});\n\n// Parameterize tests.\n_.each(['STRING', 'MONGO'], function (idGeneration) {\n\n  var collectionOptions = { idGeneration: idGeneration };\n\n  testAsyncMulti(\"mongo-livedata - database error reporting. \" + idGeneration, [function (test, expect) {\n    var ftc = Meteor._FailureTestCollection;\n\n    var exception = function exception(err, res) {\n      test.instanceOf(err, Error);\n    };\n\n    _.each([\"insert\", \"remove\", \"update\"], function (op) {\n      var arg = op === \"insert\" ? {} : 'bla';\n      var arg2 = {};\n\n      var callOp = function callOp(callback) {\n        if (op === \"update\") {\n          ftc[op](arg, arg2, callback);\n        } else {\n          ftc[op](arg, callback);\n        }\n      };\n\n      if (Meteor.isServer) {\n        test.throws(function () {\n          callOp();\n        });\n\n        callOp(expect(exception));\n      }\n\n      if (Meteor.isClient) {\n        callOp(expect(exception));\n\n        // This would log to console in normal operation.\n        Meteor._suppress_log(1);\n        callOp();\n      }\n    });\n  }]);\n\n  Tinytest.addAsync(\"mongo-livedata - basics, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll, coll2;\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n      coll2 = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n        coll = new Mongo.Collection(\"livedata_test_collection_\" + run, collectionOptions);\n        coll2 = new Mongo.Collection(\"livedata_test_collection_2_\" + run, collectionOptions);\n      }\n\n    var log = '';\n    var obs = coll.find({ run: run }, { sort: [\"x\"] }).observe({\n      addedAt: function () {\n        function addedAt(doc, before_index, before) {\n          log += 'a(' + doc.x + ',' + before_index + ',' + before + ')';\n        }\n\n        return addedAt;\n      }(),\n      changedAt: function () {\n        function changedAt(new_doc, old_doc, at_index) {\n          log += 'c(' + new_doc.x + ',' + at_index + ',' + old_doc.x + ')';\n        }\n\n        return changedAt;\n      }(),\n      movedTo: function () {\n        function movedTo(doc, old_index, new_index) {\n          log += 'm(' + doc.x + ',' + old_index + ',' + new_index + ')';\n        }\n\n        return movedTo;\n      }(),\n      removedAt: function () {\n        function removedAt(doc, at_index) {\n          log += 'r(' + doc.x + ',' + at_index + ')';\n        }\n\n        return removedAt;\n      }()\n    });\n\n    var captureObserve = function captureObserve(f) {\n      if (Meteor.isClient) {\n        f();\n      } else {\n        var fence = new DDPServer._WriteFence();\n        DDPServer._CurrentWriteFence.withValue(fence, f);\n        fence.armAndWait();\n      }\n\n      var ret = log;\n      log = '';\n      return ret;\n    };\n\n    var expectObserve = function expectObserve(expected, f) {\n      if (!(expected instanceof Array)) expected = [expected];\n\n      test.include(expected, captureObserve(f));\n    };\n\n    test.equal(coll.find({ run: run }).count(), 0);\n    test.equal(coll.findOne(\"abc\"), undefined);\n    test.equal(coll.findOne({ run: run }), undefined);\n\n    expectObserve('a(1,0,null)', function () {\n      var id = coll.insert({ run: run, x: 1 });\n      test.equal(coll.find({ run: run }).count(), 1);\n      test.equal(coll.findOne(id).x, 1);\n      test.equal(coll.findOne({ run: run }).x, 1);\n    });\n\n    expectObserve('a(4,1,null)', function () {\n      var id2 = coll.insert({ run: run, x: 4 });\n      test.equal(coll.find({ run: run }).count(), 2);\n      test.equal(coll.find({ _id: id2 }).count(), 1);\n      test.equal(coll.findOne(id2).x, 4);\n    });\n\n    test.equal(coll.findOne({ run: run }, { sort: [\"x\"], skip: 0 }).x, 1);\n    test.equal(coll.findOne({ run: run }, { sort: [\"x\"], skip: 1 }).x, 4);\n    test.equal(coll.findOne({ run: run }, { sort: { x: -1 }, skip: 0 }).x, 4);\n    test.equal(coll.findOne({ run: run }, { sort: { x: -1 }, skip: 1 }).x, 1);\n\n    var cur = coll.find({ run: run }, { sort: [\"x\"] });\n    var total = 0;\n    var index = 0;\n    var context = {};\n    cur.forEach(function (doc, i, cursor) {\n      test.equal(i, index++);\n      test.isTrue(cursor === cur);\n      test.isTrue(context === this);\n      total *= 10;\n      if (Meteor.isServer) {\n        // Verify that the callbacks from forEach run sequentially and that\n        // forEach waits for them to complete (issue# 321). If they do not run\n        // sequentially, then the second callback could execute during the first\n        // callback's sleep sleep and the *= 10 will occur before the += 1, then\n        // total (at test.equal time) will be 5. If forEach does not wait for the\n        // callbacks to complete, then total (at test.equal time) will be 0.\n        Meteor._sleepForMs(5);\n      }\n      total += doc.x;\n      // verify the meteor environment is set up here\n      coll2.insert({ total: total });\n    }, context);\n    test.equal(total, 14);\n\n    index = 0;\n    test.equal(cur.map(function (doc, i, cursor) {\n      // XXX we could theoretically make map run its iterations in parallel or\n      // something which would make this fail\n      test.equal(i, index++);\n      test.isTrue(cursor === cur);\n      test.isTrue(context === this);\n      return doc.x * 2;\n    }, context), [2, 8]);\n\n    test.equal(_.pluck(coll.find({ run: run }, { sort: { x: -1 } }).fetch(), \"x\"), [4, 1]);\n\n    expectObserve('', function () {\n      var count = coll.update({ run: run, x: -1 }, { $inc: { x: 2 } }, { multi: true });\n      test.equal(count, 0);\n    });\n\n    expectObserve('c(3,0,1)c(6,1,4)', function () {\n      var count = coll.update({ run: run }, { $inc: { x: 2 } }, { multi: true });\n      test.equal(count, 2);\n      test.equal(_.pluck(coll.find({ run: run }, { sort: { x: -1 } }).fetch(), \"x\"), [6, 3]);\n    });\n\n    expectObserve(['c(13,0,3)m(13,0,1)', 'm(6,1,0)c(13,1,3)', 'c(13,0,3)m(6,1,0)', 'm(3,0,1)c(13,1,3)'], function () {\n      coll.update({ run: run, x: 3 }, { $inc: { x: 10 } }, { multi: true });\n      test.equal(_.pluck(coll.find({ run: run }, { sort: { x: -1 } }).fetch(), \"x\"), [13, 6]);\n    });\n\n    expectObserve('r(13,1)', function () {\n      var count = coll.remove({ run: run, x: { $gt: 10 } });\n      test.equal(count, 1);\n      test.equal(coll.find({ run: run }).count(), 1);\n    });\n\n    expectObserve('r(6,0)', function () {\n      coll.remove({ run: run });\n      test.equal(coll.find({ run: run }).count(), 0);\n    });\n\n    expectObserve('', function () {\n      var count = coll.remove({ run: run });\n      test.equal(count, 0);\n      test.equal(coll.find({ run: run }).count(), 0);\n    });\n\n    obs.stop();\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - fuzz test, \" + idGeneration, function (test, onComplete) {\n\n    var run = Random.id();\n    var coll;\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n        coll = new Mongo.Collection(\"livedata_test_collection_\" + run, collectionOptions);\n      }\n\n    // fuzz test of observe(), especially the server-side diffing\n    var actual = [];\n    var correct = [];\n    var counters = { add: 0, change: 0, move: 0, remove: 0 };\n\n    var obs = coll.find({ run: run }, { sort: [\"x\"] }).observe({\n      addedAt: function () {\n        function addedAt(doc, before_index) {\n          counters.add++;\n          actual.splice(before_index, 0, doc.x);\n        }\n\n        return addedAt;\n      }(),\n      changedAt: function () {\n        function changedAt(new_doc, old_doc, at_index) {\n          counters.change++;\n          test.equal(actual[at_index], old_doc.x);\n          actual[at_index] = new_doc.x;\n        }\n\n        return changedAt;\n      }(),\n      movedTo: function () {\n        function movedTo(doc, old_index, new_index) {\n          counters.move++;\n          test.equal(actual[old_index], doc.x);\n          actual.splice(old_index, 1);\n          actual.splice(new_index, 0, doc.x);\n        }\n\n        return movedTo;\n      }(),\n      removedAt: function () {\n        function removedAt(doc, at_index) {\n          counters.remove++;\n          test.equal(actual[at_index], doc.x);\n          actual.splice(at_index, 1);\n        }\n\n        return removedAt;\n      }()\n    });\n\n    if (Meteor.isServer) {\n      // For now, has to be polling (not oplog) because it is ordered observe.\n      test.isTrue(obs._multiplexer._observeDriver._suspendPolling);\n    }\n\n    var step = 0;\n\n    // Use non-deterministic randomness so we can have a shorter fuzz\n    // test (fewer iterations).  For deterministic (fully seeded)\n    // randomness, remove the call to Random.fraction().\n    var seededRandom = new SeededRandom(\"foobard\" + Random.fraction());\n    // Random integer in [0,n)\n    var rnd = function rnd(n) {\n      return seededRandom.nextIntBetween(0, n - 1);\n    };\n\n    var finishObserve = function finishObserve(f) {\n      if (Meteor.isClient) {\n        f();\n      } else {\n        var fence = new DDPServer._WriteFence();\n        DDPServer._CurrentWriteFence.withValue(fence, f);\n        fence.armAndWait();\n      }\n    };\n\n    var doStep = function doStep() {\n      if (step++ === 5) {\n        // run N random tests\n        obs.stop();\n        onComplete();\n        return;\n      }\n\n      var max_counters = _.clone(counters);\n\n      finishObserve(function () {\n        if (Meteor.isServer) obs._multiplexer._observeDriver._suspendPolling();\n\n        // Do a batch of 1-10 operations\n        var batch_count = rnd(10) + 1;\n        for (var i = 0; i < batch_count; i++) {\n          // 25% add, 25% remove, 25% change in place, 25% change and move\n          var op = rnd(4);\n          var which = rnd(correct.length);\n          if (op === 0 || step < 2 || !correct.length) {\n            // Add\n            var x = rnd(1000000);\n            coll.insert({ run: run, x: x });\n            correct.push(x);\n            max_counters.add++;\n          } else if (op === 1 || op === 2) {\n            var x = correct[which];\n            if (op === 1)\n              // Small change, not likely to cause a move\n              var val = x + (rnd(2) ? -1 : 1);else\n              // Large change, likely to cause a move\n              var val = rnd(1000000);\n            coll.update({ run: run, x: x }, { $set: { x: val } });\n            correct[which] = val;\n            max_counters.change++;\n            max_counters.move++;\n          } else {\n            coll.remove({ run: run, x: correct[which] });\n            correct.splice(which, 1);\n            max_counters.remove++;\n          }\n        }\n        if (Meteor.isServer) obs._multiplexer._observeDriver._resumePolling();\n      });\n\n      // Did we actually deliver messages that mutated the array in the\n      // right way?\n      correct.sort(function (a, b) {\n        return a - b;\n      });\n      test.equal(actual, correct);\n\n      // Did we limit ourselves to one 'moved' message per change,\n      // rather than O(results) moved messages?\n      _.each(max_counters, function (v, k) {\n        test.isTrue(max_counters[k] >= counters[k], k);\n      });\n\n      Meteor.defer(doStep);\n    };\n\n    doStep();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - scribbling, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll;\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n        coll = new Mongo.Collection(\"livedata_test_collection_\" + run, collectionOptions);\n      }\n\n    var numAddeds = 0;\n    var handle = coll.find({ run: run }).observe({\n      addedAt: function () {\n        function addedAt(o) {\n          // test that we can scribble on the object we get back from Mongo without\n          // breaking anything.  The worst possible scribble is messing with _id.\n          delete o._id;\n          numAddeds++;\n        }\n\n        return addedAt;\n      }()\n    });\n    _.each([123, 456, 789], function (abc) {\n      runInFence(function () {\n        coll.insert({ run: run, abc: abc });\n      });\n    });\n    handle.stop();\n    // will be 6 (1+2+3) if we broke diffing!\n    test.equal(numAddeds, 3);\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - stop handle in callback, \" + idGeneration, function (test, onComplete) {\n    var run = Random.id();\n    var coll;\n    if (Meteor.isClient) {\n      coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n    } else {\n        coll = new Mongo.Collection(\"stopHandleInCallback-\" + run, collectionOptions);\n      }\n\n    var output = [];\n\n    var handle = coll.find().observe({\n      added: function () {\n        function added(doc) {\n          output.push({ added: doc._id });\n        }\n\n        return added;\n      }(),\n      changed: function () {\n        function changed(newDoc) {\n          output.push('changed');\n          handle.stop();\n        }\n\n        return changed;\n      }()\n    });\n\n    test.equal(output, []);\n\n    // Insert a document. Observe that the added callback is called.\n    var docId;\n    runInFence(function () {\n      docId = coll.insert({ foo: 42 });\n    });\n    test.length(output, 1);\n    test.equal(output.shift(), { added: docId });\n\n    // Update it. Observe that the changed callback is called. This should also\n    // stop the observation.\n    runInFence(function () {\n      coll.update(docId, { $set: { bar: 10 } });\n    });\n    test.length(output, 1);\n    test.equal(output.shift(), 'changed');\n\n    // Update again. This shouldn't call the callback because we stopped the\n    // observation.\n    runInFence(function () {\n      coll.update(docId, { $set: { baz: 40 } });\n    });\n    test.length(output, 0);\n\n    test.equal(coll.find().count(), 1);\n    test.equal(coll.findOne(docId), { _id: docId, foo: 42, bar: 10, baz: 40 });\n\n    onComplete();\n  });\n\n  // This behavior isn't great, but it beats deadlock.\n  if (Meteor.isServer) {\n    Tinytest.addAsync(\"mongo-livedata - recursive observe throws, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeInCallback-\" + run, collectionOptions);\n\n      var callbackCalled = false;\n      var handle = coll.find({}).observe({\n        added: function () {\n          function added(newDoc) {\n            callbackCalled = true;\n            test.throws(function () {\n              coll.find({}).observe();\n            });\n          }\n\n          return added;\n        }()\n      });\n      test.isFalse(callbackCalled);\n      // Insert a document. Observe that the added callback is called.\n      runInFence(function () {\n        coll.insert({ foo: 42 });\n      });\n      test.isTrue(callbackCalled);\n\n      handle.stop();\n\n      onComplete();\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - cursor dedup, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"cursorDedup-\" + run, collectionOptions);\n\n      var observer = function observer(noAdded) {\n        var output = [];\n        var callbacks = {\n          changed: function () {\n            function changed(newDoc) {\n              output.push({ changed: newDoc._id });\n            }\n\n            return changed;\n          }()\n        };\n        if (!noAdded) {\n          callbacks.added = function (doc) {\n            output.push({ added: doc._id });\n          };\n        }\n        var handle = coll.find({ foo: 22 }).observe(callbacks);\n        return { output: output, handle: handle };\n      };\n\n      // Insert a doc and start observing.\n      var docId1 = coll.insert({ foo: 22 });\n      var o1 = observer();\n      // Initial add.\n      test.length(o1.output, 1);\n      test.equal(o1.output.shift(), { added: docId1 });\n\n      // Insert another doc (blocking until observes have fired).\n      var docId2;\n      runInFence(function () {\n        docId2 = coll.insert({ foo: 22, bar: 5 });\n      });\n      // Observed add.\n      test.length(o1.output, 1);\n      test.equal(o1.output.shift(), { added: docId2 });\n\n      // Second identical observe.\n      var o2 = observer();\n      // Initial adds.\n      test.length(o2.output, 2);\n      test.include([docId1, docId2], o2.output[0].added);\n      test.include([docId1, docId2], o2.output[1].added);\n      test.notEqual(o2.output[0].added, o2.output[1].added);\n      o2.output.length = 0;\n      // Original observe not affected.\n      test.length(o1.output, 0);\n\n      // White-box test: both observes should share an ObserveMultiplexer.\n      var observeMultiplexer = o1.handle._multiplexer;\n      test.isTrue(observeMultiplexer);\n      test.isTrue(observeMultiplexer === o2.handle._multiplexer);\n\n      // Update. Both observes fire.\n      runInFence(function () {\n        coll.update(docId1, { $set: { x: 'y' } });\n      });\n      test.length(o1.output, 1);\n      test.length(o2.output, 1);\n      test.equal(o1.output.shift(), { changed: docId1 });\n      test.equal(o2.output.shift(), { changed: docId1 });\n\n      // Stop first handle. Second handle still around.\n      o1.handle.stop();\n      test.length(o1.output, 0);\n      test.length(o2.output, 0);\n\n      // Another update. Just the second handle should fire.\n      runInFence(function () {\n        coll.update(docId2, { $set: { z: 'y' } });\n      });\n      test.length(o1.output, 0);\n      test.length(o2.output, 1);\n      test.equal(o2.output.shift(), { changed: docId2 });\n\n      // Stop second handle. Nothing should happen, but the multiplexer should\n      // be stopped.\n      test.isTrue(observeMultiplexer._handles); // This will change.\n      o2.handle.stop();\n      test.length(o1.output, 0);\n      test.length(o2.output, 0);\n      // White-box: ObserveMultiplexer has nulled its _handles so you can't\n      // accidentally join to it.\n      test.isNull(observeMultiplexer._handles);\n\n      // Start yet another handle on the same query.\n      var o3 = observer();\n      // Initial adds.\n      test.length(o3.output, 2);\n      test.include([docId1, docId2], o3.output[0].added);\n      test.include([docId1, docId2], o3.output[1].added);\n      test.notEqual(o3.output[0].added, o3.output[1].added);\n      // Old observers not called.\n      test.length(o1.output, 0);\n      test.length(o2.output, 0);\n      // White-box: Different ObserveMultiplexer.\n      test.isTrue(observeMultiplexer !== o3.handle._multiplexer);\n\n      // Start another handle with no added callback. Regression test for #589.\n      var o4 = observer(true);\n\n      o3.handle.stop();\n      o4.handle.stop();\n\n      onComplete();\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - async server-side insert, \" + idGeneration, function (test, onComplete) {\n      // Tests that insert returns before the callback runs. Relies on the fact\n      // that mongo does not run the callback before spinning off the event loop.\n      var cname = Random.id();\n      var coll = new Mongo.Collection(cname);\n      var doc = { foo: \"bar\" };\n      var x = 0;\n      coll.insert(doc, function (err, result) {\n        test.equal(err, null);\n        test.equal(x, 1);\n        onComplete();\n      });\n      x++;\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - async server-side update, \" + idGeneration, function (test, onComplete) {\n      // Tests that update returns before the callback runs.\n      var cname = Random.id();\n      var coll = new Mongo.Collection(cname);\n      var doc = { foo: \"bar\" };\n      var x = 0;\n      var id = coll.insert(doc);\n      coll.update(id, { $set: { foo: \"baz\" } }, function (err, result) {\n        test.equal(err, null);\n        test.equal(result, 1);\n        test.equal(x, 1);\n        onComplete();\n      });\n      x++;\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - async server-side remove, \" + idGeneration, function (test, onComplete) {\n      // Tests that remove returns before the callback runs.\n      var cname = Random.id();\n      var coll = new Mongo.Collection(cname);\n      var doc = { foo: \"bar\" };\n      var x = 0;\n      var id = coll.insert(doc);\n      coll.remove(id, function (err, result) {\n        test.equal(err, null);\n        test.isFalse(coll.findOne(id));\n        test.equal(x, 1);\n        onComplete();\n      });\n      x++;\n    });\n\n    // compares arrays a and b w/o looking at order\n    var setsEqual = function setsEqual(a, b) {\n      a = _.map(a, EJSON.stringify);\n      b = _.map(b, EJSON.stringify);\n      return _.isEmpty(_.difference(a, b)) && _.isEmpty(_.difference(b, a));\n    };\n\n    // This test mainly checks the correctness of oplog code dealing with limited\n    // queries. Compitablity with poll-diff is added as well.\n    Tinytest.addAsync(\"mongo-livedata - observe sorted, limited \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeLimit-\" + run, collectionOptions);\n\n      var observer = function observer() {\n        var state = {};\n        var output = [];\n        var callbacks = {\n          changed: function () {\n            function changed(newDoc) {\n              output.push({ changed: newDoc._id });\n              state[newDoc._id] = newDoc;\n            }\n\n            return changed;\n          }(),\n          added: function () {\n            function added(newDoc) {\n              output.push({ added: newDoc._id });\n              state[newDoc._id] = newDoc;\n            }\n\n            return added;\n          }(),\n          removed: function () {\n            function removed(oldDoc) {\n              output.push({ removed: oldDoc._id });\n              delete state[oldDoc._id];\n            }\n\n            return removed;\n          }()\n        };\n        var handle = coll.find({ foo: 22 }, { sort: { bar: 1 }, limit: 3 }).observe(callbacks);\n\n        return { output: output, handle: handle, state: state };\n      };\n      var clearOutput = function clearOutput(o) {\n        o.output.splice(0, o.output.length);\n      };\n\n      var ins = function ins(doc) {\n        var id;runInFence(function () {\n          id = coll.insert(doc);\n        });\n        return id;\n      };\n      var rem = function rem(sel) {\n        runInFence(function () {\n          coll.remove(sel);\n        });\n      };\n      var upd = function upd(sel, mod, opt) {\n        runInFence(function () {\n          coll.update(sel, mod, opt);\n        });\n      };\n      // tests '_id' subfields for all documents in oplog buffer\n      var testOplogBufferIds = function testOplogBufferIds(ids) {\n        if (!usesOplog) return;\n        var bufferIds = [];\n        o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n          bufferIds.push(id);\n        });\n\n        test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n      };\n      var testSafeAppendToBufferFlag = function testSafeAppendToBufferFlag(expected) {\n        if (!usesOplog) return;\n        test.equal(o.handle._multiplexer._observeDriver._safeAppendToBuffer, expected);\n      };\n\n      // We'll describe our state as follows.  5:1 means \"the document with\n      // _id=docId1 and bar=5\".  We list documents as\n      //   [ currently published | in the buffer ] outside the buffer\n      // If safeToAppendToBuffer is true, we'll say ]! instead.\n\n      // Insert a doc and start observing.\n      var docId1 = ins({ foo: 22, bar: 5 });\n      waitUntilOplogCaughtUp();\n\n      // State: [ 5:1 | ]!\n      var o = observer();\n      var usesOplog = o.handle._multiplexer._observeDriver._usesOplog;\n      // Initial add.\n      test.length(o.output, 1);\n      test.equal(o.output.shift(), { added: docId1 });\n      testSafeAppendToBufferFlag(true);\n\n      // Insert another doc (blocking until observes have fired).\n      // State: [ 5:1 6:2 | ]!\n      var docId2 = ins({ foo: 22, bar: 6 });\n      // Observed add.\n      test.length(o.output, 1);\n      test.equal(o.output.shift(), { added: docId2 });\n      testSafeAppendToBufferFlag(true);\n\n      var docId3 = ins({ foo: 22, bar: 3 });\n      // State: [ 3:3 5:1 6:2 | ]!\n      test.length(o.output, 1);\n      test.equal(o.output.shift(), { added: docId3 });\n      testSafeAppendToBufferFlag(true);\n\n      // Add a non-matching document\n      ins({ foo: 13 });\n      // It shouldn't be added\n      test.length(o.output, 0);\n\n      // Add something that matches but is too big to fit in\n      var docId4 = ins({ foo: 22, bar: 7 });\n      // State: [ 3:3 5:1 6:2 | 7:4 ]!\n      // It shouldn't be added but should end up in the buffer.\n      test.length(o.output, 0);\n      testOplogBufferIds([docId4]);\n      testSafeAppendToBufferFlag(true);\n\n      // Let's add something small enough to fit in\n      var docId5 = ins({ foo: 22, bar: -1 });\n      // State: [ -1:5 3:3 5:1 | 6:2 7:4 ]!\n      // We should get an added and a removed events\n      test.length(o.output, 2);\n      // doc 2 was removed from the published set as it is too big to be in\n      test.isTrue(setsEqual(o.output, [{ added: docId5 }, { removed: docId2 }]));\n      clearOutput(o);\n      testOplogBufferIds([docId2, docId4]);\n      testSafeAppendToBufferFlag(true);\n\n      // Now remove something and that doc 2 should be right back\n      rem(docId5);\n      // State: [ 3:3 5:1 6:2 | 7:4 ]!\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{ removed: docId5 }, { added: docId2 }]));\n      clearOutput(o);\n      testOplogBufferIds([docId4]);\n      testSafeAppendToBufferFlag(true);\n\n      // Add some negative numbers overflowing the buffer.\n      // New documents will take the published place, [3 5 6] will take the buffer\n      // and 7 will be outside of the buffer in MongoDB.\n      var docId6 = ins({ foo: 22, bar: -1 });\n      var docId7 = ins({ foo: 22, bar: -2 });\n      var docId8 = ins({ foo: 22, bar: -3 });\n      // State: [ -3:8 -2:7 -1:6 | 3:3 5:1 6:2 ] 7:4\n      test.length(o.output, 6);\n      var expected = [{ added: docId6 }, { removed: docId2 }, { added: docId7 }, { removed: docId1 }, { added: docId8 }, { removed: docId3 }];\n      test.isTrue(setsEqual(o.output, expected));\n      clearOutput(o);\n      testOplogBufferIds([docId1, docId2, docId3]);\n      testSafeAppendToBufferFlag(false);\n\n      // If we update first 3 docs (increment them by 20), it would be\n      // interesting.\n      upd({ bar: { $lt: 0 } }, { $inc: { bar: 20 } }, { multi: true });\n      // State: [ 3:3 5:1 6:2 | ] 7:4 17:8 18:7 19:6\n      //   which triggers re-poll leaving us at\n      // State: [ 3:3 5:1 6:2 | 7:4 17:8 18:7 ] 19:6\n\n      // The updated documents can't find their place in published and they can't\n      // be buffered as we are not aware of the situation outside of the buffer.\n      // But since our buffer becomes empty, it will be refilled partially with\n      // updated documents.\n      test.length(o.output, 6);\n      var expectedRemoves = [{ removed: docId6 }, { removed: docId7 }, { removed: docId8 }];\n      var expectedAdds = [{ added: docId3 }, { added: docId1 }, { added: docId2 }];\n\n      test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n      clearOutput(o);\n      testOplogBufferIds([docId4, docId7, docId8]);\n      testSafeAppendToBufferFlag(false);\n\n      // Remove first 4 docs (3, 1, 2, 4) forcing buffer to become empty and\n      // schedule a repoll.\n      rem({ bar: { $lt: 10 } });\n      // State: [ 17:8 18:7 19:6 | ]!\n\n      // XXX the oplog code analyzes the events one by one: one remove after\n      // another. Poll-n-diff code, on the other side, analyzes the batch action\n      // of multiple remove. Because of that difference, expected outputs differ.\n      if (usesOplog) {\n        var expectedRemoves = [{ removed: docId3 }, { removed: docId1 }, { removed: docId2 }, { removed: docId4 }];\n        var expectedAdds = [{ added: docId4 }, { added: docId8 }, { added: docId7 }, { added: docId6 }];\n\n        test.length(o.output, 8);\n      } else {\n        var expectedRemoves = [{ removed: docId3 }, { removed: docId1 }, { removed: docId2 }];\n        var expectedAdds = [{ added: docId8 }, { added: docId7 }, { added: docId6 }];\n\n        test.length(o.output, 6);\n      }\n\n      test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n      clearOutput(o);\n      testOplogBufferIds([]);\n      testSafeAppendToBufferFlag(true);\n\n      var docId9 = ins({ foo: 22, bar: 21 });\n      var docId10 = ins({ foo: 22, bar: 31 });\n      var docId11 = ins({ foo: 22, bar: 41 });\n      var docId12 = ins({ foo: 22, bar: 51 });\n      // State: [ 17:8 18:7 19:6 | 21:9 31:10 41:11 ] 51:12\n\n      testOplogBufferIds([docId9, docId10, docId11]);\n      testSafeAppendToBufferFlag(false);\n      test.length(o.output, 0);\n      upd({ bar: { $lt: 20 } }, { $inc: { bar: 5 } }, { multi: true });\n      // State: [ 21:9 22:8 23:7 | 24:6 31:10 41:11 ] 51:12\n      test.length(o.output, 4);\n      test.isTrue(setsEqual(o.output, [{ removed: docId6 }, { added: docId9 }, { changed: docId7 }, { changed: docId8 }]));\n      clearOutput(o);\n      testOplogBufferIds([docId6, docId10, docId11]);\n      testSafeAppendToBufferFlag(false);\n\n      rem(docId9);\n      // State: [ 22:8 23:7 24:6 | 31:10 41:11 ] 51:12\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{ removed: docId9 }, { added: docId6 }]));\n      clearOutput(o);\n      testOplogBufferIds([docId10, docId11]);\n      testSafeAppendToBufferFlag(false);\n\n      upd({ bar: { $gt: 25 } }, { $inc: { bar: -7.5 } }, { multi: true });\n      // State: [ 22:8 23:7 23.5:10 | 24:6 ] 33.5:11 43.5:12\n      // 33.5 doesn't update in-place in buffer, because it the driver is not sure\n      // it can do it: because the buffer does not have the safe append flag set,\n      // for all it knows there is a different doc which is less than 33.5.\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{ removed: docId6 }, { added: docId10 }]));\n      clearOutput(o);\n      testOplogBufferIds([docId6]);\n      testSafeAppendToBufferFlag(false);\n\n      // Force buffer objects to be moved into published set so we can check them\n      rem(docId7);\n      rem(docId8);\n      rem(docId10);\n      // State: [ 24:6 | ] 33.5:11 43.5:12\n      //    triggers repoll\n      // State: [ 24:6 33.5:11 43.5:12 | ]!\n      test.length(o.output, 6);\n      test.isTrue(setsEqual(o.output, [{ removed: docId7 }, { removed: docId8 }, { removed: docId10 }, { added: docId6 }, { added: docId11 }, { added: docId12 }]));\n\n      test.length(_.keys(o.state), 3);\n      test.equal(o.state[docId6], { _id: docId6, foo: 22, bar: 24 });\n      test.equal(o.state[docId11], { _id: docId11, foo: 22, bar: 33.5 });\n      test.equal(o.state[docId12], { _id: docId12, foo: 22, bar: 43.5 });\n      clearOutput(o);\n      testOplogBufferIds([]);\n      testSafeAppendToBufferFlag(true);\n\n      var docId13 = ins({ foo: 22, bar: 50 });\n      var docId14 = ins({ foo: 22, bar: 51 });\n      var docId15 = ins({ foo: 22, bar: 52 });\n      var docId16 = ins({ foo: 22, bar: 53 });\n      // State: [ 24:6 33.5:11 43.5:12 | 50:13 51:14 52:15 ] 53:16\n      test.length(o.output, 0);\n      testOplogBufferIds([docId13, docId14, docId15]);\n      testSafeAppendToBufferFlag(false);\n\n      // Update something that's outside the buffer to be in the buffer, writing\n      // only to the sort key.\n      upd(docId16, { $set: { bar: 10 } });\n      // State: [ 10:16 24:6 33.5:11 | 43.5:12 50:13 51:14 ] 52:15\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{ removed: docId12 }, { added: docId16 }]));\n      clearOutput(o);\n      testOplogBufferIds([docId12, docId13, docId14]);\n      testSafeAppendToBufferFlag(false);\n\n      o.handle.stop();\n      onComplete();\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, sort fields \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeLimit-\" + run, collectionOptions);\n\n      var observer = function observer() {\n        var state = {};\n        var output = [];\n        var callbacks = {\n          changed: function () {\n            function changed(newDoc) {\n              output.push({ changed: newDoc._id });\n              state[newDoc._id] = newDoc;\n            }\n\n            return changed;\n          }(),\n          added: function () {\n            function added(newDoc) {\n              output.push({ added: newDoc._id });\n              state[newDoc._id] = newDoc;\n            }\n\n            return added;\n          }(),\n          removed: function () {\n            function removed(oldDoc) {\n              output.push({ removed: oldDoc._id });\n              delete state[oldDoc._id];\n            }\n\n            return removed;\n          }()\n        };\n        var handle = coll.find({}, { sort: { x: 1 },\n          limit: 2,\n          fields: { y: 1 } }).observe(callbacks);\n\n        return { output: output, handle: handle, state: state };\n      };\n      var clearOutput = function clearOutput(o) {\n        o.output.splice(0, o.output.length);\n      };\n      var ins = function ins(doc) {\n        var id;runInFence(function () {\n          id = coll.insert(doc);\n        });\n        return id;\n      };\n      var rem = function rem(id) {\n        runInFence(function () {\n          coll.remove(id);\n        });\n      };\n\n      var o = observer();\n\n      var docId1 = ins({ x: 1, y: 1222 });\n      var docId2 = ins({ x: 5, y: 5222 });\n\n      test.length(o.output, 2);\n      test.equal(o.output, [{ added: docId1 }, { added: docId2 }]);\n      clearOutput(o);\n\n      var docId3 = ins({ x: 7, y: 7222 });\n      test.length(o.output, 0);\n\n      var docId4 = ins({ x: -1, y: -1222 });\n\n      // Becomes [docId4 docId1 | docId2 docId3]\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{ added: docId4 }, { removed: docId2 }]));\n\n      test.equal(_.size(o.state), 2);\n      test.equal(o.state[docId4], { _id: docId4, y: -1222 });\n      test.equal(o.state[docId1], { _id: docId1, y: 1222 });\n      clearOutput(o);\n\n      rem(docId2);\n      // Becomes [docId4 docId1 | docId3]\n      test.length(o.output, 0);\n\n      rem(docId4);\n      // Becomes [docId1 docId3]\n      test.length(o.output, 2);\n      test.isTrue(setsEqual(o.output, [{ added: docId3 }, { removed: docId4 }]));\n\n      test.equal(_.size(o.state), 2);\n      test.equal(o.state[docId3], { _id: docId3, y: 7222 });\n      test.equal(o.state[docId1], { _id: docId1, y: 1222 });\n      clearOutput(o);\n\n      onComplete();\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, big initial set\" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"observeLimit-\" + run, collectionOptions);\n\n      var observer = function observer() {\n        var state = {};\n        var output = [];\n        var callbacks = {\n          changed: function () {\n            function changed(newDoc) {\n              output.push({ changed: newDoc._id });\n              state[newDoc._id] = newDoc;\n            }\n\n            return changed;\n          }(),\n          added: function () {\n            function added(newDoc) {\n              output.push({ added: newDoc._id });\n              state[newDoc._id] = newDoc;\n            }\n\n            return added;\n          }(),\n          removed: function () {\n            function removed(oldDoc) {\n              output.push({ removed: oldDoc._id });\n              delete state[oldDoc._id];\n            }\n\n            return removed;\n          }()\n        };\n        var handle = coll.find({}, { sort: { x: 1, y: 1 }, limit: 3 }).observe(callbacks);\n\n        return { output: output, handle: handle, state: state };\n      };\n      var clearOutput = function clearOutput(o) {\n        o.output.splice(0, o.output.length);\n      };\n      var ins = function ins(doc) {\n        var id;runInFence(function () {\n          id = coll.insert(doc);\n        });\n        return id;\n      };\n      var rem = function rem(id) {\n        runInFence(function () {\n          coll.remove(id);\n        });\n      };\n      // tests '_id' subfields for all documents in oplog buffer\n      var testOplogBufferIds = function testOplogBufferIds(ids) {\n        var bufferIds = [];\n        o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n          bufferIds.push(id);\n        });\n\n        test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n      };\n      var testSafeAppendToBufferFlag = function testSafeAppendToBufferFlag(expected) {\n        if (expected) test.isTrue(o.handle._multiplexer._observeDriver._safeAppendToBuffer);else test.isFalse(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n      };\n\n      var ids = {};\n      _.each([2, 4, 1, 3, 5, 5, 9, 1, 3, 2, 5], function (x, i) {\n        ids[i] = ins({ x: x, y: i });\n      });\n\n      // Ensure that we are past all the 'i' entries before we run the query, so\n      // that we get the expected phase transitions.\n      waitUntilOplogCaughtUp();\n\n      var o = observer();\n      var usesOplog = o.handle._multiplexer._observeDriver._usesOplog;\n      //  x: [1 1 2 | 2 3 3] 4 5 5 5  9\n      // id: [2 7 0 | 9 3 8] 1 4 5 10 6\n\n      test.length(o.output, 3);\n      test.isTrue(setsEqual([{ added: ids[2] }, { added: ids[7] }, { added: ids[0] }], o.output));\n      usesOplog && testOplogBufferIds([ids[9], ids[3], ids[8]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n\n      rem(ids[0]);\n      //  x: [1 1 2 | 3 3] 4 5 5 5  9\n      // id: [2 7 9 | 3 8] 1 4 5 10 6\n      test.length(o.output, 2);\n      test.isTrue(setsEqual([{ removed: ids[0] }, { added: ids[9] }], o.output));\n      usesOplog && testOplogBufferIds([ids[3], ids[8]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n\n      rem(ids[7]);\n      //  x: [1 2 3 | 3] 4 5 5 5  9\n      // id: [2 9 3 | 8] 1 4 5 10 6\n      test.length(o.output, 2);\n      test.isTrue(setsEqual([{ removed: ids[7] }, { added: ids[3] }], o.output));\n      usesOplog && testOplogBufferIds([ids[8]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n\n      rem(ids[3]);\n      //  x: [1 2 3 | 4 5 5] 5  9\n      // id: [2 9 8 | 1 4 5] 10 6\n      test.length(o.output, 2);\n      test.isTrue(setsEqual([{ removed: ids[3] }, { added: ids[8] }], o.output));\n      usesOplog && testOplogBufferIds([ids[1], ids[4], ids[5]]);\n      usesOplog && testSafeAppendToBufferFlag(false);\n      clearOutput(o);\n\n      rem({ x: { $lt: 4 } });\n      //  x: [4 5 5 | 5  9]\n      // id: [1 4 5 | 10 6]\n      test.length(o.output, 6);\n      test.isTrue(setsEqual([{ removed: ids[2] }, { removed: ids[9] }, { removed: ids[8] }, { added: ids[5] }, { added: ids[4] }, { added: ids[1] }], o.output));\n      usesOplog && testOplogBufferIds([ids[10], ids[6]]);\n      usesOplog && testSafeAppendToBufferFlag(true);\n      clearOutput(o);\n\n      onComplete();\n    });\n  }\n\n  testAsyncMulti('mongo-livedata - empty documents, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n\n    coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n    }));\n  }]);\n\n  // Regression test for #2413.\n  testAsyncMulti('mongo-livedata - upsert without callback, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n\n    // No callback!  Before fixing #2413, this method never returned and\n    // so no future DDP methods worked either.\n    coll.upsert('foo', { bar: 1 });\n    // Do something else on the same method and expect it to actually work.\n    // (If the bug comes back, this will 'async batch timeout'.)\n    coll.insert({}, expect(function () {}));\n  }]);\n\n  // See https://github.com/meteor/meteor/issues/594.\n  testAsyncMulti('mongo-livedata - document with length, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    var coll = self.coll = new Mongo.Collection(self.collectionName, collectionOptions);\n\n    coll.insert({ foo: 'x', length: 0 }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.docId = id;\n      test.equal(coll.findOne(self.docId), { _id: self.docId, foo: 'x', length: 0 });\n    }));\n  }, function (test, expect) {\n    var self = this;\n    var coll = self.coll;\n    coll.update(self.docId, { $set: { length: 5 } }, expect(function (err) {\n      test.isFalse(err);\n      test.equal(coll.findOne(self.docId), { _id: self.docId, foo: 'x', length: 5 });\n    }));\n  }]);\n\n  testAsyncMulti('mongo-livedata - document with a date, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({ d: new Date(1356152390004) }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      test.equal(coll.findOne().d.getFullYear(), 2012);\n    }));\n  }]);\n\n  testAsyncMulti('mongo-livedata - document goes through a transform, ' + idGeneration, [function (test, expect) {\n    var self = this;\n    var seconds = function seconds(doc) {\n      doc.seconds = function () {\n        return doc.d.getSeconds();\n      };\n      return doc;\n    };\n    TRANSFORMS[\"seconds\"] = seconds;\n    self.collectionOptions = {\n      idGeneration: idGeneration,\n      transform: seconds,\n      transformName: \"seconds\"\n    };\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(self.collectionName, self.collectionOptions);\n    var obs;\n    var expectAdd = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n    });\n    var expectRemove = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n      obs.stop();\n    });\n    self.coll.insert({ d: new Date(1356152390004) }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = self.coll.find();\n      obs = cursor.observe({\n        added: expectAdd,\n        removed: expectRemove\n      });\n      test.equal(cursor.count(), 1);\n      test.equal(cursor.fetch()[0].seconds(), 50);\n      test.equal(self.coll.findOne().seconds(), 50);\n      test.equal(self.coll.findOne({}, { transform: null }).seconds, undefined);\n      test.equal(self.coll.findOne({}, {\n        transform: function () {\n          function transform(doc) {\n            return { seconds: doc.d.getSeconds() };\n          }\n\n          return transform;\n        }()\n      }).seconds, 50);\n      self.coll.remove(id);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.insert({ d: new Date(1356152390004) }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id1 = id;\n    }));\n    self.coll.insert({ d: new Date(1356152391004) }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id2 = id;\n    }));\n  }]);\n\n  testAsyncMulti('mongo-livedata - transform sets _id if not present, ' + idGeneration, [function (test, expect) {\n    var self = this;\n    var justId = function justId(doc) {\n      return _.omit(doc, '_id');\n    };\n    TRANSFORMS[\"justId\"] = justId;\n    var collectionOptions = {\n      idGeneration: idGeneration,\n      transform: justId,\n      transformName: \"justId\"\n    };\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    self.coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      test.equal(self.coll.findOne()._id, id);\n    }));\n  }]);\n\n  var bin = Base64.decode(\"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyBy\" + \"ZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJv\" + \"bSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhl\" + \"IG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdo\" + \"dCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdl\" + \"bmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9y\" + \"dCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\");\n\n  testAsyncMulti('mongo-livedata - document with binary data, ' + idGeneration, [function (test, expect) {\n    // XXX probably shouldn't use EJSON's private test symbols\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({ b: bin }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = coll.findOne();\n      test.isTrue(EJSON.isBinary(inColl.b));\n      test.equal(inColl.b, bin);\n    }));\n  }]);\n\n  testAsyncMulti('mongo-livedata - document with a custom type, ' + idGeneration, [function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    // Dog is implemented at the top of the file, outside of the idGeneration\n    // loop (so that we only call EJSON.addType once).\n    var d = new Dog(\"reginald\", \"purple\");\n    self.coll.insert({ d: d }, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      self.docId = docId;\n      var cursor = self.coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = self.coll.findOne();\n      test.isTrue(inColl);\n      inColl && test.equal(inColl.d.speak(), \"woof\");\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.insert(new Dog(\"rover\", \"orange\"), expect(function (err, id) {\n      test.isTrue(err);\n      test.isFalse(id);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.update(self.docId, new Dog(\"rover\", \"orange\"), expect(function (err) {\n      test.isTrue(err);\n    }));\n  }]);\n\n  if (Meteor.isServer) {\n    Tinytest.addAsync(\"mongo-livedata - update return values, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_update_result_\" + run, collectionOptions);\n\n      coll.insert({ foo: \"bar\" });\n      coll.insert({ foo: \"baz\" });\n      test.equal(coll.update({}, { $set: { foo: \"qux\" } }, { multi: true }), 2);\n      coll.update({}, { $set: { foo: \"quux\" } }, { multi: true }, function (err, result) {\n        test.isFalse(err);\n        test.equal(result, 2);\n        onComplete();\n      });\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - remove return values, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_update_result_\" + run, collectionOptions);\n\n      coll.insert({ foo: \"bar\" });\n      coll.insert({ foo: \"baz\" });\n      test.equal(coll.remove({}), 2);\n      coll.insert({ foo: \"bar\" });\n      coll.insert({ foo: \"baz\" });\n      coll.remove({}, function (err, result) {\n        test.isFalse(err);\n        test.equal(result, 2);\n        onComplete();\n      });\n    });\n\n    Tinytest.addAsync(\"mongo-livedata - id-based invalidation, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_invalidation_collection_\" + run, collectionOptions);\n\n      coll.allow({\n        update: function () {\n          function update() {\n            return true;\n          }\n\n          return update;\n        }(),\n        remove: function () {\n          function remove() {\n            return true;\n          }\n\n          return remove;\n        }()\n      });\n\n      var id1 = coll.insert({ x: 42, is1: true });\n      var id2 = coll.insert({ x: 50, is2: true });\n\n      var polls = {};\n      var handlesToStop = [];\n      var observe = function observe(name, query) {\n        var handle = coll.find(query).observeChanges({\n          // Make sure that we only poll on invalidation, not due to time, and\n          // keep track of when we do. Note: this option disables the use of\n          // oplogs (which admittedly is somewhat irrelevant to this feature).\n          _testOnlyPollCallback: function () {\n            function _testOnlyPollCallback() {\n              polls[name] = name in polls ? polls[name] + 1 : 1;\n            }\n\n            return _testOnlyPollCallback;\n          }()\n        });\n        handlesToStop.push(handle);\n      };\n\n      observe(\"all\", {});\n      observe(\"id1Direct\", id1);\n      observe(\"id1InQuery\", { _id: id1, z: null });\n      observe(\"id2Direct\", id2);\n      observe(\"id2InQuery\", { _id: id2, z: null });\n      observe(\"bothIds\", { _id: { $in: [id1, id2] } });\n\n      var resetPollsAndRunInFence = function resetPollsAndRunInFence(f) {\n        polls = {};\n        runInFence(f);\n      };\n\n      // Update id1 directly. This should poll all but the \"id2\" queries. \"all\"\n      // and \"bothIds\" increment by 2 because they are looking at both.\n      resetPollsAndRunInFence(function () {\n        coll.update(id1, { $inc: { x: 1 } });\n      });\n      test.equal(polls, { all: 1, id1Direct: 1, id1InQuery: 1, bothIds: 1 });\n\n      // Update id2 using a funny query. This should poll all but the \"id1\"\n      // queries.\n      resetPollsAndRunInFence(function () {\n        coll.update({ _id: id2, q: null }, { $inc: { x: 1 } });\n      });\n      test.equal(polls, { all: 1, id2Direct: 1, id2InQuery: 1, bothIds: 1 });\n\n      // Update both using a $in query. Should poll each of them exactly once.\n      resetPollsAndRunInFence(function () {\n        coll.update({ _id: { $in: [id1, id2] }, q: null }, { $inc: { x: 1 } });\n      });\n      test.equal(polls, { all: 1, id1Direct: 1, id1InQuery: 1, id2Direct: 1, id2InQuery: 1,\n        bothIds: 1 });\n\n      _.each(handlesToStop, function (h) {\n        h.stop();\n      });\n      onComplete();\n    });\n\n    Tinytest.add(\"mongo-livedata - upsert error parse, \" + idGeneration, function (test) {\n      var run = test.runId();\n      var coll = new Mongo.Collection(\"livedata_upsert_errorparse_collection_\" + run, collectionOptions);\n\n      coll.insert({ _id: 'foobar' });\n      var err;\n      try {\n        coll.update({ _id: 'foobar' }, { _id: 'cowbar' });\n      } catch (e) {\n        err = e;\n      }\n      test.isTrue(err);\n      test.isTrue(MongoInternals.Connection._isCannotChangeIdError(err));\n\n      try {\n        coll.insert({ _id: 'foobar' });\n      } catch (e) {\n        err = e;\n      }\n      test.isTrue(err);\n      // duplicate id error is not same as change id error\n      test.isFalse(MongoInternals.Connection._isCannotChangeIdError(err));\n    });\n  } // end Meteor.isServer\n\n  // This test is duplicated below (with some changes) for async upserts that go\n  // over the network.\n  _.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n    _.each([true, false], function (useUpdate) {\n      _.each([true, false], function (useDirectCollection) {\n        Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert\" + (minimongo ? \" minimongo\" : \"\") + (useDirectCollection ? \" direct collection \" : \"\") + \", \" + idGeneration, function (test) {\n          var run = test.runId();\n          var options = collectionOptions;\n          // We don't get ids back when we use update() to upsert, or when we are\n          // directly calling MongoConnection.upsert().\n          var skipIds = useUpdate || !minimongo && useDirectCollection;\n          if (minimongo) options = _.extend({}, collectionOptions, { connection: null });\n          var coll = new Mongo.Collection(\"livedata_upsert_collection_\" + run + (useUpdate ? \"_update_\" : \"\") + (minimongo ? \"_minimongo_\" : \"\") + (useDirectCollection ? \"_direct_\" : \"\") + \"\", options);\n          if (useDirectCollection) coll = coll._collection;\n\n          var result1 = upsert(coll, useUpdate, { foo: 'bar' }, { foo: 'bar' });\n          test.equal(result1.numberAffected, 1);\n          if (!skipIds) test.isTrue(result1.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{ foo: 'bar', _id: result1.insertedId }]);\n\n          var result2 = upsert(coll, useUpdate, { foo: 'bar' }, { foo: 'baz' });\n          test.equal(result2.numberAffected, 1);\n          if (!skipIds) test.isFalse(result2.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{ foo: 'baz', _id: result1.insertedId }]);\n\n          coll.remove({});\n\n          // Test values that require transformation to go into Mongo:\n\n          var t1 = new Mongo.ObjectID();\n          var t2 = new Mongo.ObjectID();\n          var result3 = upsert(coll, useUpdate, { foo: t1 }, { foo: t1 });\n          test.equal(result3.numberAffected, 1);\n          if (!skipIds) test.isTrue(result3.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{ foo: t1, _id: result3.insertedId }]);\n\n          var result4 = upsert(coll, useUpdate, { foo: t1 }, { foo: t2 });\n          test.equal(result2.numberAffected, 1);\n          if (!skipIds) test.isFalse(result2.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{ foo: t2, _id: result3.insertedId }]);\n\n          coll.remove({});\n\n          // Test modification by upsert\n\n          var result5 = upsert(coll, useUpdate, { name: 'David' }, { $set: { foo: 1 } });\n          test.equal(result5.numberAffected, 1);\n          if (!skipIds) test.isTrue(result5.insertedId);\n          var davidId = result5.insertedId;\n          compareResults(test, skipIds, coll.find().fetch(), [{ name: 'David', foo: 1, _id: davidId }]);\n\n          test.throws(function () {\n            // test that bad modifier fails fast\n            upsert(coll, useUpdate, { name: 'David' }, { $blah: { foo: 2 } });\n          });\n\n          var result6 = upsert(coll, useUpdate, { name: 'David' }, { $set: { foo: 2 } });\n          test.equal(result6.numberAffected, 1);\n          if (!skipIds) test.isFalse(result6.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{ name: 'David', foo: 2,\n            _id: result5.insertedId }]);\n\n          var emilyId = coll.insert({ name: 'Emily', foo: 2 });\n          compareResults(test, skipIds, coll.find().fetch(), [{ name: 'David', foo: 2, _id: davidId }, { name: 'Emily', foo: 2, _id: emilyId }]);\n\n          // multi update by upsert\n          var result7 = upsert(coll, useUpdate, { foo: 2 }, { $set: { bar: 7 },\n            $setOnInsert: { name: 'Fred', foo: 2 } }, { multi: true });\n          test.equal(result7.numberAffected, 2);\n          if (!skipIds) test.isFalse(result7.insertedId);\n          compareResults(test, skipIds, coll.find().fetch(), [{ name: 'David', foo: 2, bar: 7, _id: davidId }, { name: 'Emily', foo: 2, bar: 7, _id: emilyId }]);\n\n          // insert by multi upsert\n          var result8 = upsert(coll, useUpdate, { foo: 3 }, { $set: { bar: 7 },\n            $setOnInsert: { name: 'Fred', foo: 2 } }, { multi: true });\n          test.equal(result8.numberAffected, 1);\n          if (!skipIds) test.isTrue(result8.insertedId);\n          var fredId = result8.insertedId;\n          compareResults(test, skipIds, coll.find().fetch(), [{ name: 'David', foo: 2, bar: 7, _id: davidId }, { name: 'Emily', foo: 2, bar: 7, _id: emilyId }, { name: 'Fred', foo: 2, bar: 7, _id: fredId }]);\n\n          // test `insertedId` option\n          var result9 = upsert(coll, useUpdate, { name: 'Steve' }, { name: 'Steve' }, { insertedId: 'steve' });\n          test.equal(result9.numberAffected, 1);\n          if (!skipIds) test.equal(result9.insertedId, 'steve');\n          compareResults(test, skipIds, coll.find().fetch(), [{ name: 'David', foo: 2, bar: 7, _id: davidId }, { name: 'Emily', foo: 2, bar: 7, _id: emilyId }, { name: 'Fred', foo: 2, bar: 7, _id: fredId }, { name: 'Steve', _id: 'steve' }]);\n          test.isTrue(coll.findOne('steve'));\n          test.isFalse(coll.findOne('fred'));\n\n          // Test $ operator in selectors.\n\n          var result10 = upsert(coll, useUpdate, { $or: [{ name: 'David' }, { name: 'Emily' }] }, { $set: { foo: 3 } }, { multi: true });\n          test.equal(result10.numberAffected, 2);\n          if (!skipIds) test.isFalse(result10.insertedId);\n          compareResults(test, skipIds, [coll.findOne({ name: 'David' }), coll.findOne({ name: 'Emily' })], [{ name: 'David', foo: 3, bar: 7, _id: davidId }, { name: 'Emily', foo: 3, bar: 7, _id: emilyId }]);\n\n          var result11 = upsert(coll, useUpdate, {\n            name: 'Charlie',\n            $or: [{ foo: 2 }, { bar: 7 }]\n          }, { $set: { foo: 3 } });\n          test.equal(result11.numberAffected, 1);\n          if (!skipIds) test.isTrue(result11.insertedId);\n          var charlieId = result11.insertedId;\n          compareResults(test, skipIds, coll.find({ name: 'Charlie' }).fetch(), [{ name: 'Charlie', foo: 3, _id: charlieId }]);\n        });\n      });\n    });\n  });\n\n  var asyncUpsertTestName = function asyncUpsertTestName(useNetwork, useDirectCollection, useUpdate, idGeneration) {\n    return \"mongo-livedata - async \" + (useUpdate ? \"update \" : \"\") + \"upsert \" + (useNetwork ? \"over network \" : \"\") + (useDirectCollection ? \", direct collection \" : \"\") + idGeneration;\n  };\n\n  // This is a duplicate of the test above, with some changes to make it work for\n  // callback style. On the client, we test server-backed and in-memory\n  // collections, and run the tests for both the Mongo.Collection and the\n  // LocalCollection. On the server, we test mongo-backed collections, for both\n  // the Mongo.Collection and the MongoConnection.\n  //\n  // XXX Rewrite with testAsyncMulti, that would simplify things a lot!\n  _.each(Meteor.isServer ? [false] : [true, false], function (useNetwork) {\n    _.each(useNetwork ? [false] : [true, false], function (useDirectCollection) {\n      _.each([true, false], function (useUpdate) {\n        Tinytest.addAsync(asyncUpsertTestName(useNetwork, useDirectCollection, useUpdate, idGeneration), function (test, onComplete) {\n          var coll;\n          var run = test.runId();\n          var collName = \"livedata_upsert_collection_\" + run + (useUpdate ? \"_update_\" : \"\") + (useNetwork ? \"_network_\" : \"\") + (useDirectCollection ? \"_direct_\" : \"\");\n\n          var next0 = function next0() {\n            // Test starts here.\n            upsert(coll, useUpdate, { _id: 'foo' }, { _id: 'foo', foo: 'bar' }, next1);\n          };\n\n          if (useNetwork) {\n            Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n            coll = new Mongo.Collection(collName, collectionOptions);\n            Meteor.subscribe(\"c-\" + collName, next0);\n          } else {\n            var opts = _.clone(collectionOptions);\n            if (Meteor.isClient) opts.connection = null;\n            coll = new Mongo.Collection(collName, opts);\n            if (useDirectCollection) coll = coll._collection;\n          }\n\n          var result1;\n          var next1 = function next1(err, result) {\n            result1 = result;\n            test.equal(result1.numberAffected, 1);\n            if (!useUpdate) {\n              test.isTrue(result1.insertedId);\n              test.equal(result1.insertedId, 'foo');\n            }\n            compareResults(test, useUpdate, coll.find().fetch(), [{ foo: 'bar', _id: 'foo' }]);\n            upsert(coll, useUpdate, { _id: 'foo' }, { foo: 'baz' }, next2);\n          };\n\n          if (!useNetwork) {\n            next0();\n          }\n\n          var t1, t2, result2;\n          var next2 = function next2(err, result) {\n            result2 = result;\n            test.equal(result2.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result2.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{ foo: 'baz', _id: result1.insertedId }]);\n            coll.remove({ _id: 'foo' });\n            compareResults(test, useUpdate, coll.find().fetch(), []);\n\n            // Test values that require transformation to go into Mongo:\n\n            t1 = new Mongo.ObjectID();\n            t2 = new Mongo.ObjectID();\n            upsert(coll, useUpdate, { _id: t1 }, { _id: t1, foo: 'bar' }, next3);\n          };\n\n          var result3;\n          var next3 = function next3(err, result) {\n            result3 = result;\n            test.equal(result3.numberAffected, 1);\n            if (!useUpdate) {\n              test.isTrue(result3.insertedId);\n              test.equal(t1, result3.insertedId);\n            }\n            compareResults(test, useUpdate, coll.find().fetch(), [{ _id: t1, foo: 'bar' }]);\n\n            upsert(coll, useUpdate, { _id: t1 }, { foo: t2 }, next4);\n          };\n\n          var next4 = function next4(err, result4) {\n            test.equal(result2.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result2.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{ foo: t2, _id: result3.insertedId }]);\n\n            coll.remove({ _id: t1 });\n\n            // Test modification by upsert\n            upsert(coll, useUpdate, { _id: 'David' }, { $set: { foo: 1 } }, next5);\n          };\n\n          var result5;\n          var next5 = function next5(err, result) {\n            result5 = result;\n            test.equal(result5.numberAffected, 1);\n            if (!useUpdate) {\n              test.isTrue(result5.insertedId);\n              test.equal(result5.insertedId, 'David');\n            }\n            var davidId = result5.insertedId;\n            compareResults(test, useUpdate, coll.find().fetch(), [{ foo: 1, _id: davidId }]);\n\n            if (!Meteor.isClient && useDirectCollection) {\n              // test that bad modifier fails\n              // The stub throws an exception about the invalid modifier, which\n              // livedata logs (so we suppress it).\n              Meteor._suppress_log(1);\n              upsert(coll, useUpdate, { _id: 'David' }, { $blah: { foo: 2 } }, function (err) {\n                if (!(Meteor.isClient && useDirectCollection)) test.isTrue(err);\n                upsert(coll, useUpdate, { _id: 'David' }, { $set: { foo: 2 } }, next6);\n              });\n            } else {\n              // XXX skip this test for now for LocalCollection; the fact that\n              // we're in a nested sequence of callbacks means we're inside a\n              // Meteor.defer, which means the exception just gets\n              // logged. Something should be done about this at some point?  Maybe\n              // LocalCollection callbacks don't really have to be deferred.\n              upsert(coll, useUpdate, { _id: 'David' }, { $set: { foo: 2 } }, next6);\n            }\n          };\n\n          var result6;\n          var next6 = function next6(err, result) {\n            result6 = result;\n            test.equal(result6.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result6.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'David', foo: 2 }]);\n\n            var emilyId = coll.insert({ _id: 'Emily', foo: 2 });\n            compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'David', foo: 2 }, { _id: 'Emily', foo: 2 }]);\n\n            // multi update by upsert.\n            // We can't actually update multiple documents since we have to do it by\n            // id, but at least make sure the multi flag doesn't mess anything up.\n            upsert(coll, useUpdate, { _id: 'Emily' }, { $set: { bar: 7 },\n              $setOnInsert: { name: 'Fred', foo: 2 } }, { multi: true }, next7);\n          };\n\n          var result7;\n          var next7 = function next7(err, result) {\n            result7 = result;\n            test.equal(result7.numberAffected, 1);\n            if (!useUpdate) test.isFalse(result7.insertedId);\n            compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'David', foo: 2 }, { _id: 'Emily', foo: 2, bar: 7 }]);\n\n            // insert by multi upsert\n            upsert(coll, useUpdate, { _id: 'Fred' }, { $set: { bar: 7 },\n              $setOnInsert: { name: 'Fred', foo: 2 } }, { multi: true }, next8);\n          };\n\n          var result8;\n          var next8 = function next8(err, result) {\n            result8 = result;\n\n            test.equal(result8.numberAffected, 1);\n            if (!useUpdate) {\n              test.isTrue(result8.insertedId);\n              test.equal(result8.insertedId, 'Fred');\n            }\n            var fredId = result8.insertedId;\n            compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'David', foo: 2 }, { _id: 'Emily', foo: 2, bar: 7 }, { name: 'Fred', foo: 2, bar: 7, _id: fredId }]);\n            onComplete();\n          };\n        });\n      });\n    });\n  });\n\n  if (Meteor.isClient) {\n    Tinytest.addAsync(\"mongo-livedata - async update/remove return values over network \" + idGeneration, function (test, onComplete) {\n      var coll;\n      var run = test.runId();\n      var collName = \"livedata_upsert_collection_\" + run;\n      Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n      coll = new Mongo.Collection(collName, collectionOptions);\n      Meteor.subscribe(\"c-\" + collName, function () {\n        coll.insert({ _id: \"foo\" });\n        coll.insert({ _id: \"bar\" });\n        coll.update({ _id: \"foo\" }, { $set: { foo: 1 } }, { multi: true }, function (err, result) {\n          test.isFalse(err);\n          test.equal(result, 1);\n          coll.update({ _id: \"foo\" }, { _id: \"foo\", foo: 2 }, function (err, result) {\n            test.isFalse(err);\n            test.equal(result, 1);\n            coll.update({ _id: \"baz\" }, { $set: { foo: 1 } }, function (err, result) {\n              test.isFalse(err);\n              test.equal(result, 0);\n              coll.remove({ _id: \"foo\" }, function (err, result) {\n                test.equal(result, 1);\n                coll.remove({ _id: \"baz\" }, function (err, result) {\n                  test.equal(result, 0);\n                  onComplete();\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  }\n\n  // Runs a method and its stub which do some upserts. The method throws an error\n  // if we don't get the right return values.\n  if (Meteor.isClient) {\n    _.each([true, false], function (useUpdate) {\n      Tinytest.addAsync(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert in method, \" + idGeneration, function (test, onComplete) {\n        var run = test.runId();\n        upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, collectionOptions);\n        var m = {};\n        delete Meteor.connection._methodHandlers[upsertTestMethod];\n        m[upsertTestMethod] = function (run, useUpdate, options) {\n          upsertTestMethodImpl(upsertTestMethodColl, useUpdate, test);\n        };\n        Meteor.methods(m);\n        Meteor.call(upsertTestMethod, run, useUpdate, collectionOptions, function (err, result) {\n          test.isFalse(err);\n          onComplete();\n        });\n      });\n    });\n  }\n\n  _.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n    _.each([true, false], function (useUpdate) {\n      Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert by id\" + (minimongo ? \" minimongo\" : \"\") + \", \" + idGeneration, function (test) {\n        var run = test.runId();\n        var options = collectionOptions;\n        if (minimongo) options = _.extend({}, collectionOptions, { connection: null });\n        var coll = new Mongo.Collection(\"livedata_upsert_by_id_collection_\" + run, options);\n\n        var ret;\n        ret = upsert(coll, useUpdate, { _id: 'foo' }, { $set: { x: 1 } });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.equal(ret.insertedId, 'foo');\n        compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'foo', x: 1 }]);\n\n        ret = upsert(coll, useUpdate, { _id: 'foo' }, { $set: { x: 2 } });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.isFalse(ret.insertedId);\n        compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'foo', x: 2 }]);\n\n        ret = upsert(coll, useUpdate, { _id: 'bar' }, { $set: { x: 1 } });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.equal(ret.insertedId, 'bar');\n        compareResults(test, useUpdate, coll.find().fetch(), [{ _id: 'foo', x: 2 }, { _id: 'bar', x: 1 }]);\n\n        coll.remove({});\n        ret = upsert(coll, useUpdate, { _id: 'traq' }, { x: 1 });\n\n        test.equal(ret.numberAffected, 1);\n        var myId = ret.insertedId;\n        if (useUpdate) {\n          myId = coll.findOne()._id;\n        }\n        // Starting with Mongo 2.6, upsert with entire document takes _id from the\n        // query, so the above upsert actually does an insert with _id traq\n        // instead of a random _id.  Whenever we are using our simulated upsert,\n        // we have this behavior (whether running against Mongo 2.4 or 2.6).\n        // https://jira.mongodb.org/browse/SERVER-5289\n        test.equal(myId, 'traq');\n        compareResults(test, useUpdate, coll.find().fetch(), [{ x: 1, _id: 'traq' }]);\n\n        // this time, insert as _id 'traz'\n        ret = upsert(coll, useUpdate, { _id: 'traz' }, { _id: 'traz', x: 2 });\n        test.equal(ret.numberAffected, 1);\n        if (!useUpdate) test.equal(ret.insertedId, 'traz');\n        compareResults(test, useUpdate, coll.find().fetch(), [{ x: 1, _id: 'traq' }, { x: 2, _id: 'traz' }]);\n\n        // now update _id 'traz'\n        ret = upsert(coll, useUpdate, { _id: 'traz' }, { x: 3 });\n        test.equal(ret.numberAffected, 1);\n        test.isFalse(ret.insertedId);\n        compareResults(test, useUpdate, coll.find().fetch(), [{ x: 1, _id: 'traq' }, { x: 3, _id: 'traz' }]);\n\n        // now update, passing _id (which is ok as long as it's the same)\n        ret = upsert(coll, useUpdate, { _id: 'traz' }, { _id: 'traz', x: 4 });\n        test.equal(ret.numberAffected, 1);\n        test.isFalse(ret.insertedId);\n        compareResults(test, useUpdate, coll.find().fetch(), [{ x: 1, _id: 'traq' }, { x: 4, _id: 'traz' }]);\n      });\n    });\n  });\n}); // end idGeneration parametrization\n\nTinytest.add('mongo-livedata - rewrite selector', function (test) {\n  test.equal(Mongo.Collection._rewriteSelector({ x: /^o+B/im }), { x: { $regex: '^o+B', $options: 'im' } });\n  test.equal(Mongo.Collection._rewriteSelector({ x: { $regex: /^o+B/im } }), { x: { $regex: '^o+B', $options: 'im' } });\n  test.equal(Mongo.Collection._rewriteSelector({ x: /^o+B/ }), { x: { $regex: '^o+B' } });\n  test.equal(Mongo.Collection._rewriteSelector({ x: { $regex: /^o+B/ } }), { x: { $regex: '^o+B' } });\n  test.equal(Mongo.Collection._rewriteSelector('foo'), { _id: 'foo' });\n\n  test.equal(Mongo.Collection._rewriteSelector({ '$or': [{ x: /^o/ }, { y: /^p/ }, { z: 'q' }, { w: { $regex: /^r/ } }] }), { '$or': [{ x: { $regex: '^o' } }, { y: { $regex: '^p' } }, { z: 'q' }, { w: { $regex: '^r' } }] });\n\n  test.equal(Mongo.Collection._rewriteSelector({ '$or': [{ '$and': [{ x: /^a/i }, { y: /^b/ }, { z: { $regex: /^c/i } }, { w: { $regex: '^[abc]', $options: 'i' } }, // make sure we don't break vanilla selectors\n      { v: { $regex: /O/, $options: 'i' } }, // $options should override the ones on the RegExp object\n      { u: { $regex: /O/m, $options: 'i' } } // $options should override the ones on the RegExp object\n      ] }, { '$nor': [{ s: /^d/ }, { t: /^e/i }, { u: { $regex: /^f/i } },\n      // even empty string overrides built-in flags\n      { v: { $regex: /^g/i, $options: '' } }] }] }), { '$or': [{ '$and': [{ x: { $regex: '^a', $options: 'i' } }, { y: { $regex: '^b' } }, { z: { $regex: '^c', $options: 'i' } }, { w: { $regex: '^[abc]', $options: 'i' } }, { v: { $regex: 'O', $options: 'i' } }, { u: { $regex: 'O', $options: 'i' } }] }, { '$nor': [{ s: { $regex: '^d' } }, { t: { $regex: '^e', $options: 'i' } }, { u: { $regex: '^f', $options: 'i' } }, { v: { $regex: '^g', $options: '' } }] }] });\n\n  var oid = new Mongo.ObjectID();\n  test.equal(Mongo.Collection._rewriteSelector(oid), { _id: oid });\n});\n\ntestAsyncMulti('mongo-livedata - specified _id', [function (test, expect) {\n  this.collectionName = Random.id();\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', this.collectionName);\n    Meteor.subscribe('c-' + this.collectionName, expect());\n  }\n}, function (test, expect) {\n  var expectError = expect(function (err, result) {\n    test.isTrue(err);\n    var doc = coll.findOne();\n    test.equal(doc.name, \"foo\");\n  });\n  var coll = new Mongo.Collection(this.collectionName);\n  coll.insert({ _id: \"foo\", name: \"foo\" }, expect(function (err1, id) {\n    test.equal(id, \"foo\");\n    var doc = coll.findOne();\n    test.equal(doc._id, \"foo\");\n    Meteor._suppress_log(1);\n    coll.insert({ _id: \"foo\", name: \"bar\" }, expectError);\n  }));\n}]);\n\n// Consistent id generation tests\nfunction collectionInsert(test, expect, coll, index) {\n  var clientSideId = coll.insert({ name: \"foo\" }, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction collectionUpsert(test, expect, coll, index) {\n  var upsertId = '123456' + index;\n\n  coll.upsert(upsertId, { $set: { name: \"foo\" } }, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction collectionUpsertExisting(test, expect, coll, index) {\n  var clientSideId = coll.insert({ name: \"foo\" }, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    // We're not testing sequencing/visibility rules here, so skip this check\n    // test.equal(o.name, 'foo');\n  }));\n\n  coll.upsert(clientSideId, { $set: { name: \"bar\" } }, expect(function (err1, result) {\n    test.equal(result.insertedId, clientSideId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(clientSideId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n};\n\nfunction functionCallsInsert(test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, { name: \"foo\" }, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionCallsUpsert(test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"upsertObject\", coll._name, upsertId, { $set: { name: \"foo\" } }, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionCallsUpsertExisting(test, expect, coll, index) {\n  var id = coll.insert({ name: \"foo\" });\n\n  var o = coll.findOne(id);\n  test.notEqual(null, o);\n  test.equal(o.name, 'foo');\n\n  Meteor.call(\"upsertObject\", coll._name, id, { $set: { name: \"bar\" } }, expect(function (err1, result) {\n    test.equal(result.numberAffected, 1);\n    test.equal(result.insertedId, undefined);\n\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n};\n\nfunction functionCalls3Inserts(test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, { name: \"foo\" }, 3, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    test.equal(ids.length, 3);\n\n    for (var i = 0; i < 3; i++) {\n      var stubId = INSERTED_IDS[coll._name][3 * index + i];\n      test.equal(ids[i], stubId);\n\n      var o = coll.findOne(stubId);\n      test.isTrue(_.isObject(o));\n      test.equal(o.name, 'foo');\n    }\n  }));\n};\n\nfunction functionChainInsert(test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"insertObjects\", coll._name, { name: \"foo\" }, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionChain2Insert(test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"insertObjects\", coll._name, { name: \"foo\" }, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionChain2Upsert(test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"upsertObject\", coll._name, upsertId, { $set: { name: \"foo\" } }, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\n_.each({ collectionInsert: collectionInsert,\n  collectionUpsert: collectionUpsert,\n  functionCallsInsert: functionCallsInsert,\n  functionCallsUpsert: functionCallsUpsert,\n  functionCallsUpsertExisting: functionCallsUpsertExisting,\n  functionCalls3Insert: functionCalls3Inserts,\n  functionChainInsert: functionChainInsert,\n  functionChain2Insert: functionChain2Insert,\n  functionChain2Upsert: functionChain2Upsert }, function (fn, name) {\n  _.each([1, 3], function (repetitions) {\n    _.each([1, 3], function (collectionCount) {\n      _.each(['STRING', 'MONGO'], function (idGeneration) {\n\n        testAsyncMulti('mongo-livedata - consistent _id generation ' + name + ', ' + repetitions + ' repetitions on ' + collectionCount + ' collections, idGeneration=' + idGeneration, [function (test, expect) {\n          var collectionOptions = { idGeneration: idGeneration };\n\n          var cleanups = this.cleanups = [];\n          this.collections = _.times(collectionCount, function () {\n            var collectionName = \"consistentid_\" + Random.id();\n            if (Meteor.isClient) {\n              Meteor.call('createInsecureCollection', collectionName, collectionOptions);\n              Meteor.subscribe('c-' + collectionName, expect());\n              cleanups.push(function (expect) {\n                Meteor.call('dropInsecureCollection', collectionName, expect(function () {}));\n              });\n            }\n\n            var collection = new Mongo.Collection(collectionName, collectionOptions);\n            if (Meteor.isServer) {\n              cleanups.push(function () {\n                collection._dropCollection();\n              });\n            }\n            COLLECTIONS[collectionName] = collection;\n            return collection;\n          });\n        }, function (test, expect) {\n          // now run the actual test\n          for (var i = 0; i < repetitions; i++) {\n            for (var j = 0; j < collectionCount; j++) {\n              fn(test, expect, this.collections[j], i);\n            }\n          }\n        }, function (test, expect) {\n          // Run any registered cleanup functions (e.g. to drop collections)\n          _.each(this.cleanups, function (cleanup) {\n            cleanup(expect);\n          });\n        }]);\n      });\n    });\n  });\n});\n\ntestAsyncMulti('mongo-livedata - empty string _id', [function (test, expect) {\n  var self = this;\n  self.collectionName = Random.id();\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', self.collectionName);\n    Meteor.subscribe('c-' + self.collectionName, expect());\n  }\n  self.coll = new Mongo.Collection(self.collectionName);\n  try {\n    self.coll.insert({ _id: \"\", f: \"foo\" });\n    test.fail(\"Insert with an empty _id should fail\");\n  } catch (e) {\n    // ok\n  }\n  self.coll.insert({ _id: \"realid\", f: \"bar\" }, expect(function (err, res) {\n    test.equal(res, \"realid\");\n  }));\n}, function (test, expect) {\n  var self = this;\n  var docs = self.coll.find().fetch();\n  test.equal(docs, [{ _id: \"realid\", f: \"bar\" }]);\n}, function (test, expect) {\n  var self = this;\n  if (Meteor.isServer) {\n    self.coll._collection.insert({ _id: \"\", f: \"baz\" });\n    test.equal(self.coll.find().fetch().length, 2);\n  }\n}]);\n\nif (Meteor.isServer) {\n\n  testAsyncMulti(\"mongo-livedata - minimongo on server to server connection\", [function (test, expect) {\n    var self = this;\n    Meteor._debug(\"connection setup\");\n    self.id = Random.id();\n    var C = self.C = new Mongo.Collection(\"ServerMinimongo_\" + self.id);\n    C.allow({\n      insert: function () {\n        function insert() {\n          return true;\n        }\n\n        return insert;\n      }(),\n      update: function () {\n        function update() {\n          return true;\n        }\n\n        return update;\n      }(),\n      remove: function () {\n        function remove() {\n          return true;\n        }\n\n        return remove;\n      }()\n    });\n    C.insert({ a: 0, b: 1 });\n    C.insert({ a: 0, b: 2 });\n    C.insert({ a: 1, b: 3 });\n    Meteor.publish(self.id, function () {\n      return C.find({ a: 0 });\n    });\n\n    self.conn = DDP.connect(Meteor.absoluteUrl());\n    pollUntil(expect, function () {\n      return self.conn.status().connected;\n    }, 10000);\n  }, function (test, expect) {\n    var self = this;\n    if (self.conn.status().connected) {\n      self.miniC = new Mongo.Collection(\"ServerMinimongo_\" + self.id, {\n        connection: self.conn\n      });\n      var exp = expect(function (err) {\n        test.isFalse(err);\n      });\n      self.conn.subscribe(self.id, {\n        onError: exp,\n        onReady: exp\n      });\n    }\n  }, function (test, expect) {\n    var self = this;\n    if (self.miniC) {\n      var contents = self.miniC.find().fetch();\n      test.equal(contents.length, 2);\n      test.equal(contents[0].a, 0);\n    }\n  }, function (test, expect) {\n    var self = this;\n    if (!self.miniC) return;\n    self.miniC.insert({ a: 0, b: 3 });\n    var contents = self.miniC.find({ b: 3 }).fetch();\n    test.equal(contents.length, 1);\n    test.equal(contents[0].a, 0);\n  }]);\n\n  testAsyncMulti(\"mongo-livedata - minimongo observe on server\", [function (test, expect) {\n    var self = this;\n    self.id = Random.id();\n    self.C = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id);\n    self.events = [];\n\n    Meteor.publish(self.id, function () {\n      return self.C.find();\n    });\n\n    self.conn = DDP.connect(Meteor.absoluteUrl());\n    pollUntil(expect, function () {\n      return self.conn.status().connected;\n    }, 10000);\n  }, function (test, expect) {\n    var self = this;\n    if (self.conn.status().connected) {\n      self.miniC = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id, {\n        connection: self.conn\n      });\n      var exp = expect(function (err) {\n        test.isFalse(err);\n      });\n      self.conn.subscribe(self.id, {\n        onError: exp,\n        onReady: exp\n      });\n    }\n  }, function (test, expect) {\n    var self = this;\n    if (self.miniC) {\n      self.obs = self.miniC.find().observeChanges({\n        added: function () {\n          function added(id, fields) {\n            self.events.push({ evt: \"a\", id: id });\n            Meteor._sleepForMs(200);\n            self.events.push({ evt: \"b\", id: id });\n          }\n\n          return added;\n        }()\n      });\n      self.one = self.C.insert({});\n      self.two = self.C.insert({});\n      pollUntil(expect, function () {\n        return self.events.length === 4;\n      }, 10000);\n    }\n  }, function (test, expect) {\n    var self = this;\n    if (self.miniC) {\n      test.equal(self.events, [{ evt: \"a\", id: self.one }, { evt: \"b\", id: self.one }, { evt: \"a\", id: self.two }, { evt: \"b\", id: self.two }]);\n    }\n    self.obs && self.obs.stop();\n  }]);\n}\n\nTinytest.addAsync(\"mongo-livedata - local collections with different connections\", function (test, onComplete) {\n  var cname = Random.id();\n  var cname2 = Random.id();\n  var coll1 = new Mongo.Collection(cname);\n  var doc = { foo: \"bar\" };\n  var coll2 = new Mongo.Collection(cname2, { connection: null });\n  coll2.insert(doc, function (err, id) {\n    test.equal(coll1.find(doc).count(), 0);\n    test.equal(coll2.find(doc).count(), 1);\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/ callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, { connection: null });\n  var doc = { foo: \"bar\" };\n  var docId = coll1.insert(doc, function (err, id) {\n    test.equal(docId, id);\n    test.equal(coll1.findOne(doc)._id, id);\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/o callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, { connection: null });\n  var doc = { foo: \"bar\" };\n  var docId = coll1.insert(doc);\n  test.equal(coll1.findOne(doc)._id, docId);\n  onComplete();\n});\n\ntestAsyncMulti(\"mongo-livedata - update handles $push with $each correctly\", [function (test, expect) {\n  var self = this;\n  var collectionName = Random.id();\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', collectionName);\n    Meteor.subscribe('c-' + collectionName, expect());\n  }\n\n  self.collection = new Mongo.Collection(collectionName);\n\n  self.id = self.collection.insert({ name: 'jens', elements: ['X', 'Y'] }, expect(function (err, res) {\n    test.isFalse(err);\n    test.equal(self.id, res);\n  }));\n}, function (test, expect) {\n  var self = this;\n  self.collection.update(self.id, {\n    $push: {\n      elements: {\n        $each: ['A', 'B', 'C'],\n        $slice: -4\n      } } }, expect(function (err, res) {\n    test.isFalse(err);\n    test.equal(self.collection.findOne(self.id), { _id: self.id, name: 'jens', elements: ['Y', 'A', 'B', 'C'] });\n  }));\n}]);\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - upsert handles $push with $each correctly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    var result = collection.upsert({ name: 'jens' }, { $push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        } } });\n\n    test.equal(collection.findOne(result.insertedId), { _id: result.insertedId,\n      name: 'jens',\n      elements: ['A', 'B', 'C'] });\n\n    var id = collection.insert({ name: \"david\", elements: ['X', 'Y'] });\n    result = collection.upsert({ name: 'david' }, { $push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        } } });\n\n    test.equal(collection.findOne(id), { _id: id,\n      name: 'david',\n      elements: ['Y', 'A', 'B', 'C'] });\n  });\n\n  Tinytest.add(\"mongo-livedata - upsert handles dotted selectors corrrectly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    var result1 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: { message: \"upsert 1\" }\n    });\n\n    test.equal(collection.findOne(result1.insertedId), {\n      _id: result1.insertedId,\n      subdocument: { a: 1 },\n      message: \"upsert 1\"\n    });\n\n    var result2 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: { message: \"upsert 2\" }\n    });\n\n    test.equal(result2, { numberAffected: 1 });\n\n    test.equal(collection.findOne(result1.insertedId), {\n      _id: result1.insertedId,\n      subdocument: { a: 1 },\n      message: \"upsert 2\"\n    });\n\n    var result3 = collection.upsert({\n      \"subdocument.a.b\": 1,\n      \"subdocument.c\": 2\n    }, {\n      $set: { message: \"upsert3\" }\n    });\n\n    test.equal(collection.findOne(result3.insertedId), {\n      _id: result3.insertedId,\n      subdocument: { a: { b: 1 }, c: 2 },\n      message: \"upsert3\"\n    });\n\n    var result4 = collection.upsert({\n      \"subdocument.a\": 4\n    }, {\n      $set: { \"subdocument.a\": \"upsert 4\" }\n    });\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: { a: \"upsert 4\" }\n    });\n\n    var result5 = collection.upsert({\n      \"subdocument.a\": \"upsert 4\"\n    }, {\n      $set: { \"subdocument.a\": \"upsert 5\" }\n    });\n\n    test.equal(result5, { numberAffected: 1 });\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: { a: \"upsert 5\" }\n    });\n\n    var result6 = collection.upsert({\n      \"subdocument.a\": \"upsert 5\"\n    }, {\n      $set: { \"subdocument\": \"upsert 6\" }\n    });\n\n    test.equal(result6, { numberAffected: 1 });\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: \"upsert 6\"\n    });\n\n    var result7 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert7\"\n      }\n    });\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: { b: 7, c: \"upsert7\" }\n      }\n    });\n\n    var result8 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert8\"\n      }\n    });\n\n    test.equal(result8, { numberAffected: 1 });\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: { b: 7, c: \"upsert8\" }\n      }\n    });\n\n    var result9 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.b\": \"upsert9\"\n      }\n    });\n\n    test.equal(result9, { numberAffected: 1 });\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: { b: \"upsert9\", c: \"upsert8\" }\n      }\n    });\n  });\n}\n\n// This is a VERY white-box test.\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - _disableOplog\", function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection(collName);\n  if (MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle) {\n    var observeWithOplog = coll.find({ x: 5 }).observeChanges({ added: function () {\n        function added() {}\n\n        return added;\n      }() });\n    test.isTrue(observeWithOplog._multiplexer._observeDriver._usesOplog);\n    observeWithOplog.stop();\n  }\n  var observeWithoutOplog = coll.find({ x: 6 }, { _disableOplog: true }).observeChanges({ added: function () {\n      function added() {}\n\n      return added;\n    }() });\n  test.isFalse(observeWithoutOplog._multiplexer._observeDriver._usesOplog);\n  observeWithoutOplog.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - include selector fields\", function (test) {\n  var collName = \"includeSelector\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  var docId = coll.insert({ a: 1, b: [3, 2], c: 'foo' });\n  test.isTrue(docId);\n\n  // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n  waitUntilOplogCaughtUp();\n\n  var output = [];\n  var handle = coll.find({ a: 1, b: 2 }, { fields: { c: 1 } }).observeChanges({\n    added: function () {\n      function added(id, fields) {\n        output.push(['added', id, fields]);\n      }\n\n      return added;\n    }(),\n    changed: function () {\n      function changed(id, fields) {\n        output.push(['changed', id, fields]);\n      }\n\n      return changed;\n    }(),\n    removed: function () {\n      function removed(id) {\n        output.push(['removed', id]);\n      }\n\n      return removed;\n    }()\n  });\n  // Initially should match the document.\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', docId, { c: 'foo' }]);\n\n  // Update in such a way that, if we only knew about the published field 'c'\n  // and the changed field 'b' (but not the field 'a'), we would think it didn't\n  // match any more.  (This is a regression test for a bug that existed because\n  // we used to not use the shared projection in the initial query.)\n  runInFence(function () {\n    coll.update(docId, { $set: { 'b.0': 2, c: 'bar' } });\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), ['changed', docId, { c: 'bar' }]);\n\n  handle.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - transform\", function (test) {\n  var collName = \"oplogTransform\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  var docId = coll.insert({ a: 25, x: { x: 5, y: 9 } });\n  test.isTrue(docId);\n\n  // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n  waitUntilOplogCaughtUp();\n\n  var cursor = coll.find({}, { transform: function () {\n      function transform(doc) {\n        return doc.x;\n      }\n\n      return transform;\n    }() });\n\n  var changesOutput = [];\n  var changesHandle = cursor.observeChanges({\n    added: function () {\n      function added(id, fields) {\n        changesOutput.push(['added', fields]);\n      }\n\n      return added;\n    }()\n  });\n  // We should get untransformed fields via observeChanges.\n  test.length(changesOutput, 1);\n  test.equal(changesOutput.shift(), ['added', { a: 25, x: { x: 5, y: 9 } }]);\n  changesHandle.stop();\n\n  var transformedOutput = [];\n  var transformedHandle = cursor.observe({\n    added: function () {\n      function added(doc) {\n        transformedOutput.push(['added', doc]);\n      }\n\n      return added;\n    }()\n  });\n  test.length(transformedOutput, 1);\n  test.equal(transformedOutput.shift(), ['added', { x: 5, y: 9 }]);\n  transformedHandle.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - drop collection/db\", function (test) {\n  // This test uses a random database, so it can be dropped without affecting\n  // anything else.\n  var mongodbUri = Npm.require('mongodb-uri');\n  var parsedUri = mongodbUri.parse(process.env.MONGO_URL);\n  parsedUri.database = 'dropDB' + Random.id();\n  var driver = new MongoInternals.RemoteCollectionDriver(mongodbUri.format(parsedUri), {\n    oplogUrl: process.env.MONGO_OPLOG_URL\n  });\n\n  var collName = \"dropCollection\" + Random.id();\n  var coll = new Mongo.Collection(collName, { _driver: driver });\n\n  var doc1Id = coll.insert({ a: 'foo', c: 1 });\n  var doc2Id = coll.insert({ b: 'bar' });\n  var doc3Id = coll.insert({ a: 'foo', c: 2 });\n  var tmp;\n\n  var output = [];\n  var handle = coll.find({ a: 'foo' }).observeChanges({\n    added: function () {\n      function added(id, fields) {\n        output.push(['added', id, fields]);\n      }\n\n      return added;\n    }(),\n    changed: function () {\n      function changed(id) {\n        output.push(['changed']);\n      }\n\n      return changed;\n    }(),\n    removed: function () {\n      function removed(id) {\n        output.push(['removed', id]);\n      }\n\n      return removed;\n    }()\n  });\n  test.length(output, 2);\n  // make order consistent\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n  test.equal(output.shift(), ['added', doc1Id, { a: 'foo', c: 1 }]);\n  test.equal(output.shift(), ['added', doc3Id, { a: 'foo', c: 2 }]);\n\n  // Wait until we've processed the insert oplog entry, so that we are in a\n  // steady state (and we don't see the dropped docs because we are FETCHING).\n  waitUntilOplogCaughtUp();\n\n  // Drop the collection. Should remove all docs.\n  runInFence(function () {\n    coll._dropCollection();\n  });\n\n  test.length(output, 2);\n  // make order consistent\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n  test.equal(output.shift(), ['removed', doc1Id]);\n  test.equal(output.shift(), ['removed', doc3Id]);\n\n  // Put something back in.\n  var doc4Id;\n  runInFence(function () {\n    doc4Id = coll.insert({ a: 'foo', c: 3 });\n  });\n\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', doc4Id, { a: 'foo', c: 3 }]);\n\n  // XXX: this was intermittently failing for unknown reasons.\n  // Now drop the database. Should remove all docs again.\n  // runInFence(function () {\n  //   driver.mongo.dropDatabase();\n  // });\n  //\n  // test.length(output, 1);\n  // test.equal(output.shift(), ['removed', doc4Id]);\n\n  handle.stop();\n  driver.mongo.close();\n});\n\nvar TestCustomType = function TestCustomType(head, tail) {\n  // use different field names on the object than in JSON, to ensure we are\n  // actually treating this as an opaque object.\n  this.myHead = head;\n  this.myTail = tail;\n};\n_.extend(TestCustomType.prototype, {\n  clone: function () {\n    function clone() {\n      return new TestCustomType(this.myHead, this.myTail);\n    }\n\n    return clone;\n  }(),\n  equals: function () {\n    function equals(other) {\n      return other instanceof TestCustomType && EJSON.equals(this.myHead, other.myHead) && EJSON.equals(this.myTail, other.myTail);\n    }\n\n    return equals;\n  }(),\n  typeName: function () {\n    function typeName() {\n      return 'someCustomType';\n    }\n\n    return typeName;\n  }(),\n  toJSONValue: function () {\n    function toJSONValue() {\n      return { head: this.myHead, tail: this.myTail };\n    }\n\n    return toJSONValue;\n  }()\n});\n\nEJSON.addType('someCustomType', function (json) {\n  return new TestCustomType(json.head, json.tail);\n});\n\ntestAsyncMulti(\"mongo-livedata - oplog - update EJSON\", [function (test, expect) {\n  var self = this;\n  var collectionName = \"ejson\" + Random.id();\n  if (Meteor.isClient) {\n    Meteor.call('createInsecureCollection', collectionName);\n    Meteor.subscribe('c-' + collectionName, expect());\n  }\n\n  self.collection = new Mongo.Collection(collectionName);\n  self.date = new Date();\n  self.objId = new Mongo.ObjectID();\n\n  self.id = self.collection.insert({ d: self.date, oi: self.objId,\n    custom: new TestCustomType('a', 'b') }, expect(function (err, res) {\n    test.isFalse(err);\n    test.equal(self.id, res);\n  }));\n}, function (test, expect) {\n  var self = this;\n  self.changes = [];\n  self.handle = self.collection.find({}).observeChanges({\n    added: function () {\n      function added(id, fields) {\n        self.changes.push(['a', id, fields]);\n      }\n\n      return added;\n    }(),\n    changed: function () {\n      function changed(id, fields) {\n        self.changes.push(['c', id, fields]);\n      }\n\n      return changed;\n    }(),\n    removed: function () {\n      function removed(id) {\n        self.changes.push(['r', id]);\n      }\n\n      return removed;\n    }()\n  });\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['a', self.id, { d: self.date, oi: self.objId,\n    custom: new TestCustomType('a', 'b') }]);\n\n  // First, replace the entire custom object.\n  // (runInFence is useful for the server, using expect() is useful for the\n  // client)\n  runInFence(function () {\n    self.collection.update(self.id, { $set: { custom: new TestCustomType('a', 'c') } }, expect(function (err) {\n      test.isFalse(err);\n    }));\n  });\n}, function (test, expect) {\n  var self = this;\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['c', self.id, { custom: new TestCustomType('a', 'c') }]);\n\n  // Now, sneakily replace just a piece of it. Meteor won't do this, but\n  // perhaps you are accessing Mongo directly.\n  runInFence(function () {\n    self.collection.update(self.id, { $set: { 'custom.EJSON$value.EJSONtail': 'd' } }, expect(function (err) {\n      test.isFalse(err);\n    }));\n  });\n}, function (test, expect) {\n  var self = this;\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['c', self.id, { custom: new TestCustomType('a', 'd') }]);\n\n  // Update a date and an ObjectID too.\n  self.date2 = new Date(self.date.valueOf() + 1000);\n  self.objId2 = new Mongo.ObjectID();\n  runInFence(function () {\n    self.collection.update(self.id, { $set: { d: self.date2, oi: self.objId2 } }, expect(function (err) {\n      test.isFalse(err);\n    }));\n  });\n}, function (test, expect) {\n  var self = this;\n  test.length(self.changes, 1);\n  test.equal(self.changes.shift(), ['c', self.id, { d: self.date2, oi: self.objId2 }]);\n\n  self.handle.stop();\n}]);\n\nvar waitUntilOplogCaughtUp = function waitUntilOplogCaughtUp() {\n  var oplogHandle = MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n  if (oplogHandle) oplogHandle.waitUntilCaughtUp();\n};\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - cursor dedup stop\", function (test) {\n  var coll = new Mongo.Collection(Random.id());\n  _.times(100, function () {\n    coll.insert({ foo: 'baz' });\n  });\n  var handler = coll.find({}).observeChanges({\n    added: function () {\n      function added(id) {\n        coll.update(id, { $set: { foo: 'bar' } });\n      }\n\n      return added;\n    }()\n  });\n  handler.stop();\n  // Previously, this would print\n  //    Exception in queued task: TypeError: Object.keys called on non-object\n  // Unfortunately, this test didn't fail before the bugfix, but it at least\n  // would print the error and no longer does.\n  // See https://github.com/meteor/meteor/issues/2070\n});\n\ntestAsyncMulti(\"mongo-livedata - undefined find options\", [function (test, expect) {\n  var self = this;\n  self.collName = Random.id();\n  if (Meteor.isClient) {\n    Meteor.call(\"createInsecureCollection\", self.collName);\n    Meteor.subscribe(\"c-\" + self.collName, expect());\n  }\n}, function (test, expect) {\n  var self = this;\n  self.coll = new Mongo.Collection(self.collName);\n  self.doc = { foo: 1, bar: 2, _id: \"foobar\" };\n  self.coll.insert(self.doc, expect(function (err, id) {\n    test.isFalse(err);\n  }));\n}, function (test, expect) {\n  var self = this;\n  var result = self.coll.findOne({ foo: 1 }, {\n    fields: undefined,\n    sort: undefined,\n    limit: undefined,\n    skip: undefined\n  });\n  test.equal(result, self.doc);\n}]);\n\n// Regression test for #2274.\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - observe limit bug\", [function (test, expect) {\n  var self = this;\n  self.coll = new Mongo.Collection(Random.id());\n  var state = {};\n  var callbacks = {\n    changed: function () {\n      function changed(newDoc) {\n        state[newDoc._id] = newDoc;\n      }\n\n      return changed;\n    }(),\n    added: function () {\n      function added(newDoc) {\n        state[newDoc._id] = newDoc;\n      }\n\n      return added;\n    }(),\n    removed: function () {\n      function removed(oldDoc) {\n        delete state[oldDoc._id];\n      }\n\n      return removed;\n    }()\n  };\n  self.observe = self.coll.find({}, { limit: 1, sort: { sortField: -1 } }).observe(callbacks);\n\n  // Insert some documents.\n  runInFence(function () {\n    self.id0 = self.coll.insert({ sortField: 0, toDelete: true });\n    self.id1 = self.coll.insert({ sortField: 1, toDelete: true });\n    self.id2 = self.coll.insert({ sortField: 2, toDelete: true });\n  });\n  test.equal(_.keys(state), [self.id2]);\n\n  // Mutate the one in the unpublished buffer and the one below the\n  // buffer. Before the fix for #2274, this left the observe state machine in\n  // a broken state where the buffer was empty but it wasn't try to re-fill\n  // it.\n  runInFence(function () {\n    self.coll.update({ _id: { $ne: self.id2 } }, { $set: { toDelete: false } }, { multi: 1 });\n  });\n  test.equal(_.keys(state), [self.id2]);\n\n  // Now remove the one published document. This should slide up id1 from the\n  // buffer, but this didn't work before the #2274 fix.\n  runInFence(function () {\n    self.coll.remove({ toDelete: true });\n  });\n  test.equal(_.keys(state), [self.id1]);\n}]);\n\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - update with replace forbidden\", [function (test, expect) {\n  var c = new Mongo.Collection(Random.id());\n\n  var id = c.insert({ foo: \"bar\" });\n\n  c.update(id, { foo2: \"bar2\" });\n  test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n\n  test.throws(function () {\n    c.update(id, { foo3: \"bar3\" }, { _forbidReplace: true });\n  }, \"Replacements are forbidden\");\n  test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n\n  test.throws(function () {\n    c.update(id, { foo3: \"bar3\", $set: { blah: 1 } });\n  }, \"cannot have both modifier and non-modifier fields\");\n  test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n}]);\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - connection failure throws\", function (test) {\n  test.throws(function () {\n    new MongoInternals.Connection('mongodb://this-does-not-exist.test/asdf');\n  });\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(MongoInternals.NpmModules.mongodb.version, /^1\\.(\\d+)\\.(\\d+)/);\n  test.equal((0, _typeof3[\"default\"])(MongoInternals.NpmModules.mongodb.module), 'function');\n  test.equal((0, _typeof3[\"default\"])(MongoInternals.NpmModules.mongodb.module.connect), 'function');\n  test.equal((0, _typeof3[\"default\"])(MongoInternals.NpmModules.mongodb.module.ObjectID), 'function');\n\n  var c = new Mongo.Collection(Random.id());\n  var rawCollection = c.rawCollection();\n  test.isTrue(rawCollection);\n  test.isTrue(rawCollection.findAndModify);\n  var rawDb = c.rawDatabase();\n  test.isTrue(rawDb);\n  test.isTrue(rawDb.admin);\n});\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - update/remove don't accept an array as a selector #4804\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    _.times(10, function () {\n      collection.insert({ data: \"Hello\" });\n    });\n\n    test.equal(collection.find().count(), 10);\n\n    // Test several array-related selectors\n    _.each([[], [1, 2, 3], [{}]], function (selector) {\n      test.throws(function () {\n        collection.remove(selector);\n      });\n\n      test.throws(function () {\n        collection.update(selector, { $set: 5 });\n      });\n    });\n\n    test.equal(collection.find().count(), 10);\n  });\n}\n\n// This is a regression test for https://github.com/meteor/meteor/issues/4839.\n// Prior to fixing the issue (but after applying\n// https://github.com/meteor/meteor/pull/4694), doing a Mongo write from a\n// timeout that ran after a method body (invoked via the client) would throw an\n// error \"fence has already activated -- too late to add a callback\" and not\n// properly call the Mongo write's callback.  In this test:\n//  - The client invokes a method (fenceOnBeforeFireError1) which\n//    - Starts an observe on a query\n//    - Creates a timeout (which shares a write fence with the method)\n//    - Lets the method return (firing the write fence)\n//  - The timeout runs and does a Mongo write. This write is inside a write\n//    fence (because timeouts preserve the fence, see dcd26415) but the write\n//    fence already fired.\n//  - The Mongo write's callback confirms that there is no error. This was\n//    not the case before fixing the bug!  (Note that the observe was necessary\n//    for the error to occur, because the error was thrown from the observe's\n//    crossbar listener callback).  It puts the confirmation into a Future.\n//  - The client invokes another method which reads the confirmation from\n//    the future. (Well, the invocation happened earlier but the use of the\n//    Future sequences it so that the confirmation only gets read at this point.)\nif (Meteor.isClient) {\n  testAsyncMulti(\"mongo-livedata - fence onBeforeFire error\", [function (test, expect) {\n    var self = this;\n    self.nonce = Random.id();\n    Meteor.call('fenceOnBeforeFireError1', self.nonce, expect(function (err) {\n      test.isFalse(err);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call('fenceOnBeforeFireError2', self.nonce, expect(function (err, success) {\n      test.isFalse(err);\n      test.isTrue(success);\n    }));\n  }]);\n} else {\n  var fenceOnBeforeFireErrorCollection = new Mongo.Collection(\"FOBFE\");\n  var Future = Npm.require('fibers/future');\n  var futuresByNonce = {};\n  Meteor.methods({\n    fenceOnBeforeFireError1: function () {\n      function fenceOnBeforeFireError1(nonce) {\n        futuresByNonce[nonce] = new Future();\n        var observe = fenceOnBeforeFireErrorCollection.find({ nonce: nonce }).observeChanges({ added: function () {\n            function added() {}\n\n            return added;\n          }() });\n        Meteor.setTimeout(function () {\n          fenceOnBeforeFireErrorCollection.insert({ nonce: nonce }, function (err, result) {\n            var success = !err && result;\n            futuresByNonce[nonce][\"return\"](success);\n            observe.stop();\n          });\n        }, 10);\n      }\n\n      return fenceOnBeforeFireError1;\n    }(),\n    fenceOnBeforeFireError2: function () {\n      function fenceOnBeforeFireError2(nonce) {\n        try {\n          return futuresByNonce[nonce].wait();\n        } finally {\n          delete futuresByNonce[nonce];\n        }\n      }\n\n      return fenceOnBeforeFireError2;\n    }()\n  });\n}","ast":null,"map":{"version":3,"sources":["/packages/mongo/mongo_livedata_tests.js"],"names":[],"mappings":";;;;;;;;;AAGA,IAAI,aAAa,EAAjB;;;AAGA,IAAI,cAAc,EAAlB;;AAEA,IAAI,OAAO,QAAX,EAAqB;AACnB,SAAO,OAAP,CAAe;AACb;AAA0B,wCAAU,IAAV,EAAgB,OAAhB,EAAyB;AACjD,cAAM,IAAN,EAAY,MAAZ;AACA,cAAM,OAAN,EAAe,MAAM,QAAN,CAAe;AAC5B,yBAAe,MAAM,QAAN,CAAe,MAAf,CADa;AAE5B,wBAAc,MAAM,QAAN,CAAe,MAAf;AAFc,SAAf,CAAf;;AAKA,YAAI,WAAW,QAAQ,aAAvB,EAAsC;AACpC,kBAAQ,SAAR,GAAoB,WAAW,QAAQ,aAAnB,CAApB;AACD;AACD,YAAI,IAAI,IAAI,MAAM,UAAV,CAAqB,IAArB,EAA2B,OAA3B,CAAR;AACA,oBAAY,IAAZ,IAAoB,CAApB;AACA,UAAE,SAAF,GAAc,IAAd;AACA,eAAO,OAAP,CAAe,OAAO,IAAtB,EAA4B,YAAY;AACtC,iBAAO,EAAE,IAAF,EAAP;AACD,SAFD;AAGD;;AAhBD;AAAA,OADa;AAkBb;AAAwB,sCAAS,IAAT,EAAe;AACrC,YAAI,IAAI,YAAY,IAAZ,CAAR;AACA,UAAE,eAAF;AACD;;AAHD;AAAA;AAlBa,GAAf;AAuBD;;;;AAID,IAAI,eAAe,EAAnB;;AAEA,OAAO,OAAP,CAAe;AACb;AAAe,2BAAU,cAAV,EAA0B,GAA1B,EAA+B,KAA/B,EAAsC;AACnD,UAAI,IAAI,YAAY,cAAZ,CAAR;AACA,UAAI,MAAM,EAAV;AACA,WAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,KAApB,EAA2B,GAA3B,EAAgC;AAC9B,YAAI,KAAK,EAAE,MAAF,CAAS,GAAT,CAAT;AACA,qBAAa,cAAb,IAA+B,CAAC,aAAa,cAAb,KAAgC,EAAjC,EAAqC,MAArC,CAA4C,CAAC,EAAD,CAA5C,CAA/B;AACA,YAAI,IAAJ,CAAS,EAAT;AACD;AACD,aAAO,GAAP;AACD;;AATD;AAAA,KADa;AAWb;AAAc,0BAAU,cAAV,EAA0B,QAA1B,EAAoC,QAApC,EAA8C;AAC1D,UAAI,IAAI,YAAY,cAAZ,CAAR;AACA,aAAO,EAAE,MAAF,CAAS,QAAT,EAAmB,QAAnB,CAAP;AACD;;AAHD;AAAA,KAXa;AAeb;AAAc,0BAAU,I,iBAAV,EAAiC;AAC7C,UAAI,OAAO,MAAM,SAAN,CAAgB,KAAhB,CAAsB,IAAtB,CAA2B,SAA3B,CAAX;;AAEA,aAAO,OAAO,IAAP,CAAY,KAAZ,CAAkB,IAAlB,EAAwB,IAAxB,CAAP;AACD;;AAJD;AAAA;AAfa,CAAf;;AAsBA,IAAI,aAAa,SAAb,UAAa,CAAU,CAAV,EAAa;AAC5B,MAAI,OAAO,QAAX,EAAqB;AACnB;AACD,GAFD,MAEO;AACL,QAAI,QAAQ,IAAI,UAAU,WAAd,EAAZ;AACA,cAAU,kBAAV,CAA6B,SAA7B,CAAuC,KAAvC,EAA8C,CAA9C;AACA,UAAM,UAAN;AACD;AACF,CARD;;;;AAYA,IAAI,UAAU,SAAV,OAAU,CAAU,GAAV,EAAe;AAC3B,SAAO,IAAI,GAAX;AACD,CAFD;;AAIA,IAAI,iBAAiB,SAAjB,cAAiB,CAAU,IAAV,EAAgB,OAAhB,EAAyB,MAAzB,EAAiC,QAAjC,EAA2C;AAC9D,MAAI,OAAJ,EAAa;AACX,MAAE,GAAF,CAAM,MAAN,EAAc,OAAd;AACA,MAAE,GAAF,CAAM,QAAN,EAAgB,OAAhB;AACD;;AAED,OAAK,KAAL,CAAW,MAAX,EAAmB,QAAnB;AACD,CAPD;;AASA,IAAI,SAAS,SAAT,MAAS,CAAU,IAAV,EAAgB,SAAhB,EAA2B,KAA3B,EAAkC,GAAlC,EAAuC,OAAvC,EAAgD,QAAhD,EAA0D;AACrE,MAAI,CAAE,QAAF,IAAc,OAAO,OAAP,KAAmB,UAArC,EAAiD;AAC/C,eAAW,OAAX;AACA,cAAU,EAAV;AACD;;AAED,MAAI,SAAJ,EAAe;AACb,QAAI,QAAJ,EACE,OAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,GAAnB,EACY,EAAE,MAAF,CAAS,EAAE,QAAQ,IAAV,EAAT,EAA2B,OAA3B,CADZ,EAEY,UAAU,GAAV,EAAe,MAAf,EAAuB;AACrB,eAAS,GAAT,EAAc,CAAE,GAAF,IAAS;AACrB,wBAAgB;AADK,OAAvB;AAGD,KANb,CAAP;AAOF,WAAO;AACL,sBAAgB,KAAK,MAAL,CAAY,KAAZ,EAAmB,GAAnB,EACY,EAAE,MAAF,CAAS,EAAE,QAAQ,IAAV,EAAT,EAA2B,OAA3B,CADZ;AADX,KAAP;AAID,GAbD,MAaO;AACL,WAAO,KAAK,MAAL,CAAY,KAAZ,EAAmB,GAAnB,EAAwB,OAAxB,EAAiC,QAAjC,CAAP;AACD;AACF,CAtBD;;AAwBA,IAAI,mBAAmB,6BAAvB;AACA,IAAI,oBAAJ;;;;;;;;;AASA,IAAI,uBAAuB,SAAvB,oBAAuB,CAAU,IAAV,EAAgB,SAAhB,EAA2B,IAA3B,EAAiC;AAC1D,OAAK,MAAL,CAAY,EAAZ;AACA,MAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAE,KAAK,KAAP,EAAxB,EAAwC,EAAE,KAAK,KAAP,EAAxC,CAAd;;AAEA,MAAI,CAAE,IAAN,EAAY;AACV,WAAO;AACL;AAAO,uBAAU,CAAV,EAAa,CAAb,EAAgB;AACrB,cAAI,CAAE,MAAM,MAAN,CAAa,CAAb,EAAgB,CAAhB,CAAN,EACE,MAAM,IAAI,KAAJ,CAAU,gBACA,KAAK,SAAL,CAAe,CAAf,CADA,GACoB,IADpB,GAC2B,KAAK,SAAL,CAAe,CAAf,CADrC,CAAN;AAEH;;AAJD;AAAA,SADK;AAML;AAAQ,wBAAU,CAAV,EAAa;AACnB,cAAI,CAAE,CAAN,EACE,MAAM,IAAI,KAAJ,CAAU,iBAAiB,KAAK,SAAL,CAAe,CAAf,CAA3B,CAAN;AACH;;AAHD;AAAA,SANK;AAUL;AAAS,yBAAU,CAAV,EAAa;AACpB,cAAI,CAAJ,EACE,MAAM,IAAI,KAAJ,CAAU,iBAAiB,KAAK,SAAL,CAAe,CAAf,CAA3B,CAAN;AACH;;AAHD;AAAA;AAVK,KAAP;AAeD;;;;AAID,OAAK,MAAL,CAAY,OAAZ;;AAEA,OAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,MAAI,CAAE,SAAN,EACE,KAAK,MAAL,CAAY,QAAQ,UAApB;AACF,MAAI,QAAQ,QAAQ,UAApB;AACA,MAAI,MAAM,KAAK,OAAL,CAAa,EAAE,KAAK,KAAP,EAAb,CAAV;AACA,OAAK,MAAL,CAAY,GAAZ;AACA,MAAI,CAAE,SAAN,EACE,KAAK,KAAL,CAAW,IAAI,GAAf,EAAoB,QAAQ,UAA5B;AACF,MAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAE,KAAK,KAAP,EAAxB,EACO,EAAE,MAAM,EAAE,KAAK,MAAP,EAAR,EADP,CAAd;AAEA,OAAK,MAAL,CAAY,OAAZ;AACA,OAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,OAAK,OAAL,CAAa,QAAQ,UAArB;AACD,CAvCD;;AAyCA,IAAI,OAAO,QAAX,EAAqB;AACnB,MAAI,IAAI,EAAR;AACA,IAAE,gBAAF,IAAsB,UAAU,GAAV,EAAe,SAAf,EAA0B,OAA1B,EAAmC;AACvD,UAAM,GAAN,EAAW,MAAX;AACA,UAAM,SAAN,EAAiB,OAAjB;AACA,2BAAuB,IAAI,MAAM,UAAV,CAAqB,mBAAmB,cAAnB,GAAoC,GAAzD,EAA8D,OAA9D,CAAvB;AACA,yBAAqB,oBAArB,EAA2C,SAA3C;AACD,GALD;AAMA,SAAO,OAAP,CAAe,CAAf;AACD;;AAED,OAAO,sBAAP,GACE,IAAI,MAAM,UAAV,CAAqB,mCAArB,CADF;;;AAIA,IAAI,MAAM,SAAN,GAAM,CAAU,IAAV,EAAgB,KAAhB,EAAuB,OAAvB,EAAgC;AACxC,MAAI,OAAO,IAAX;AACA,OAAK,KAAL,GAAa,KAAb;AACA,OAAK,IAAL,GAAY,IAAZ;AACA,OAAK,OAAL,GAAe,WAAW,CAAC,EAAC,MAAM,KAAP,EAAD,EAAgB,EAAC,MAAM,MAAP,EAAhB,CAA1B;AACD,CALD;AAMA,EAAE,MAAF,CAAS,IAAI,SAAb,EAAwB;AACtB;AAAS,uBAAY;AAAE,aAAO,KAAK,IAAZ;AAAkB;;AAAzC;AAAA,KADsB;AAEtB;AAAU,wBAAY;AAAE,aAAO,KAAK,IAAZ;AAAkB;;AAA1C;AAAA,KAFsB;AAGtB;AAAQ,oBAAU,KAAV,EAAiB;AAAE,aAAO,MAAM,IAAN,KAAe,KAAK,IAApB,IACP,MAAM,KAAN,KAAgB,KAAK,KADd,IAEP,MAAM,MAAN,CAAa,MAAM,OAAnB,EAA4B,KAAK,OAAjC,CAFA;AAE2C;;AAFtE;AAAA,KAHsB;AAMtB;AAAa,2BAAY;AAAE,aAAO,EAAC,OAAO,KAAK,KAAb,EAAoB,MAAM,KAAK,IAA/B,EAAqC,SAAS,KAAK,OAAnD,EAAP;AAAoE;;AAA/F;AAAA,KANsB;AAOtB;AAAU,wBAAY;AAAE,aAAO,KAAP;AAAe;;AAAvC;AAAA,KAPsB;AAQtB;AAAO,qBAAY;AAAE,aAAO,IAAI,GAAJ,CAAQ,KAAK,IAAb,EAAmB,KAAK,KAAxB,CAAP;AAAwC;;AAA7D;AAAA,KARsB;AAStB;AAAO,qBAAY;AAAE,aAAO,MAAP;AAAgB;;AAArC;AAAA;AATsB,CAAxB;AAWA,MAAM,OAAN,CAAc,KAAd,EAAqB,UAAU,CAAV,EAAa;AAAE,SAAO,IAAI,GAAJ,CAAQ,EAAE,IAAV,EAAgB,EAAE,KAAlB,EAAyB,EAAE,OAA3B,CAAP;AAA4C,CAAhF;;;AAIA,EAAE,IAAF,CAAQ,CAAC,QAAD,EAAW,OAAX,CAAR,EAA6B,UAAS,YAAT,EAAuB;;AAEpD,MAAI,oBAAoB,EAAE,cAAc,YAAhB,EAAxB;;AAEA,iBAAe,gDAAgD,YAA/D,EAA6E,CAC3E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,MAAM,OAAO,sBAAjB;;AAEA,QAAI,YAAY,SAAZ,SAAY,CAAU,GAAV,EAAe,GAAf,EAAoB;AAClC,WAAK,UAAL,CAAgB,GAAhB,EAAqB,KAArB;AACD,KAFD;;AAIA,MAAE,IAAF,CAAO,CAAC,QAAD,EAAW,QAAX,EAAqB,QAArB,CAAP,EAAuC,UAAU,EAAV,EAAc;AACnD,UAAI,MAAO,OAAO,QAAP,GAAkB,EAAlB,GAAuB,KAAlC;AACA,UAAI,OAAO,EAAX;;AAEA,UAAI,SAAS,SAAT,MAAS,CAAU,QAAV,EAAoB;AAC/B,YAAI,OAAO,QAAX,EAAqB;AACnB,cAAI,EAAJ,EAAQ,GAAR,EAAa,IAAb,EAAmB,QAAnB;AACD,SAFD,MAEO;AACL,cAAI,EAAJ,EAAQ,GAAR,EAAa,QAAb;AACD;AACF,OAND;;AAQA,UAAI,OAAO,QAAX,EAAqB;AACnB,aAAK,MAAL,CAAY,YAAY;AACtB;AACD,SAFD;;AAIA,eAAO,OAAO,SAAP,CAAP;AACD;;AAED,UAAI,OAAO,QAAX,EAAqB;AACnB,eAAO,OAAO,SAAP,CAAP;;;AAGA,eAAO,aAAP,CAAqB,CAArB;AACA;AACD;AACF,KA3BD;AA4BD,GApC0E,CAA7E;;AAwCA,WAAS,QAAT,CAAkB,8BAA8B,YAAhD,EAA8D,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACxF,QAAI,MAAM,KAAK,KAAL,EAAV;AACA,QAAI,IAAJ,EAAU,KAAV;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAI,MAAM,UAAV,CAAqB,IAArB,EAA2B,iBAA3B,CAAP,C;AACA,cAAQ,IAAI,MAAM,UAAV,CAAqB,IAArB,EAA2B,iBAA3B,CAAR,C;AACD,KAHD,MAGO;AACL,eAAO,IAAI,MAAM,UAAV,CAAqB,8BAA4B,GAAjD,EAAsD,iBAAtD,CAAP;AACA,gBAAQ,IAAI,MAAM,UAAV,CAAqB,gCAA8B,GAAnD,EAAwD,iBAAxD,CAAR;AACD;;AAED,QAAI,MAAM,EAAV;AACA,QAAI,MAAM,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,EAAC,MAAM,CAAC,GAAD,CAAP,EAAtB,EAAqC,OAArC,CAA6C;AACrD;AAAS,yBAAU,GAAV,EAAe,YAAf,EAA6B,MAA7B,EAAqC;AAC5C,iBAAO,OAAO,IAAI,CAAX,GAAe,GAAf,GAAqB,YAArB,GAAoC,GAApC,GAA0C,MAA1C,GAAmD,GAA1D;AACD;;AAFD;AAAA,SADqD;AAIrD;AAAW,2BAAU,OAAV,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC;AAC/C,iBAAO,OAAO,QAAQ,CAAf,GAAmB,GAAnB,GAAyB,QAAzB,GAAoC,GAApC,GAA0C,QAAQ,CAAlD,GAAsD,GAA7D;AACD;;AAFD;AAAA,SAJqD;AAOrD;AAAS,yBAAU,GAAV,EAAe,SAAf,EAA0B,SAA1B,EAAqC;AAC5C,iBAAO,OAAO,IAAI,CAAX,GAAe,GAAf,GAAqB,SAArB,GAAiC,GAAjC,GAAuC,SAAvC,GAAmD,GAA1D;AACD;;AAFD;AAAA,SAPqD;AAUrD;AAAW,2BAAU,GAAV,EAAe,QAAf,EAAyB;AAClC,iBAAO,OAAO,IAAI,CAAX,GAAe,GAAf,GAAqB,QAArB,GAAgC,GAAvC;AACD;;AAFD;AAAA;AAVqD,KAA7C,CAAV;;AAeA,QAAI,iBAAiB,SAAjB,cAAiB,CAAU,CAAV,EAAa;AAChC,UAAI,OAAO,QAAX,EAAqB;AACnB;AACD,OAFD,MAEO;AACL,YAAI,QAAQ,IAAI,UAAU,WAAd,EAAZ;AACA,kBAAU,kBAAV,CAA6B,SAA7B,CAAuC,KAAvC,EAA8C,CAA9C;AACA,cAAM,UAAN;AACD;;AAED,UAAI,MAAM,GAAV;AACA,YAAM,EAAN;AACA,aAAO,GAAP;AACD,KAZD;;AAcA,QAAI,gBAAgB,SAAhB,aAAgB,CAAU,QAAV,EAAoB,CAApB,EAAuB;AACzC,UAAI,EAAE,oBAAoB,KAAtB,CAAJ,EACE,WAAW,CAAC,QAAD,CAAX;;AAEF,WAAK,OAAL,CAAa,QAAb,EAAuB,eAAe,CAAf,CAAvB;AACD,KALD;;AAOA,SAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAb,CAAX,EAAgC,SAAhC;AACA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAC,KAAK,GAAN,EAAb,CAAX,EAAqC,SAArC;;AAEA,kBAAc,aAAd,EAA6B,YAAY;AACvC,UAAI,KAAK,KAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,CAAd,EAAZ,CAAT;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACA,WAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAb,EAAiB,CAA5B,EAA+B,CAA/B;AACA,WAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAC,KAAK,GAAN,EAAb,EAAyB,CAApC,EAAuC,CAAvC;AACD,KALD;;AAOA,kBAAc,aAAd,EAA6B,YAAY;AACvC,UAAI,MAAM,KAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,CAAd,EAAZ,CAAV;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACA,WAAK,KAAL,CAAW,KAAK,OAAL,CAAa,GAAb,EAAkB,CAA7B,EAAgC,CAAhC;AACD,KALD;;AAOA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAC,KAAK,GAAN,EAAb,EAAyB,EAAC,MAAM,CAAC,GAAD,CAAP,EAAc,MAAM,CAApB,EAAzB,EAAiD,CAA5D,EAA+D,CAA/D;AACA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAC,KAAK,GAAN,EAAb,EAAyB,EAAC,MAAM,CAAC,GAAD,CAAP,EAAc,MAAM,CAApB,EAAzB,EAAiD,CAA5D,EAA+D,CAA/D;AACA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAC,KAAK,GAAN,EAAb,EAAyB,EAAC,MAAM,EAAC,GAAG,CAAC,CAAL,EAAP,EAAgB,MAAM,CAAtB,EAAzB,EAAmD,CAA9D,EAAiE,CAAjE;AACA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,EAAC,KAAK,GAAN,EAAb,EAAyB,EAAC,MAAM,EAAC,GAAG,CAAC,CAAL,EAAP,EAAgB,MAAM,CAAtB,EAAzB,EAAmD,CAA9D,EAAiE,CAAjE;;AAGA,QAAI,MAAM,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,EAAC,MAAM,CAAC,GAAD,CAAP,EAAtB,CAAV;AACA,QAAI,QAAQ,CAAZ;AACA,QAAI,QAAQ,CAAZ;AACA,QAAI,UAAU,EAAd;AACA,QAAI,OAAJ,CAAY,UAAU,GAAV,EAAe,CAAf,EAAkB,MAAlB,EAA0B;AACpC,WAAK,KAAL,CAAW,CAAX,EAAc,OAAd;AACA,WAAK,MAAL,CAAY,WAAW,GAAvB;AACA,WAAK,MAAL,CAAY,YAAY,IAAxB;AACA,eAAS,EAAT;AACA,UAAI,OAAO,QAAX,EAAqB;;;;;;;AAOnB,eAAO,WAAP,CAAmB,CAAnB;AACD;AACD,eAAS,IAAI,CAAb;;AAEA,YAAM,MAAN,CAAa,EAAC,OAAM,KAAP,EAAb;AACD,KAjBD,EAiBG,OAjBH;AAkBA,SAAK,KAAL,CAAW,KAAX,EAAkB,EAAlB;;AAEA,YAAQ,CAAR;AACA,SAAK,KAAL,CAAW,IAAI,GAAJ,CAAQ,UAAU,GAAV,EAAe,CAAf,EAAkB,MAAlB,EAA0B;;;AAG3C,WAAK,KAAL,CAAW,CAAX,EAAc,OAAd;AACA,WAAK,MAAL,CAAY,WAAW,GAAvB;AACA,WAAK,MAAL,CAAY,YAAY,IAAxB;AACA,aAAO,IAAI,CAAJ,GAAQ,CAAf;AACD,KAPU,EAOR,OAPQ,CAAX,EAOa,CAAC,CAAD,EAAI,CAAJ,CAPb;;AASA,SAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,EAAC,MAAM,EAAC,GAAG,CAAC,CAAL,EAAP,EAAtB,EAAuC,KAAvC,EAAR,EAAwD,GAAxD,CAAX,EACW,CAAC,CAAD,EAAI,CAAJ,CADX;;AAGA,kBAAc,EAAd,EAAkB,YAAY;AAC5B,UAAI,QAAQ,KAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,CAAC,CAAf,EAAZ,EAA+B,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAA/B,EAA+C,EAAC,OAAO,IAAR,EAA/C,CAAZ;AACA,WAAK,KAAL,CAAW,KAAX,EAAkB,CAAlB;AACD,KAHD;;AAKA,kBAAc,kBAAd,EAAkC,YAAY;AAC5C,UAAI,QAAQ,KAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAZ,EAAwB,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAAxB,EAAwC,EAAC,OAAO,IAAR,EAAxC,CAAZ;AACA,WAAK,KAAL,CAAW,KAAX,EAAkB,CAAlB;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,EAAC,MAAM,EAAC,GAAG,CAAC,CAAL,EAAP,EAAtB,EAAuC,KAAvC,EAAR,EAAwD,GAAxD,CAAX,EACW,CAAC,CAAD,EAAI,CAAJ,CADX;AAED,KALD;;AAOA,kBAAc,CAAC,oBAAD,EAAuB,mBAAvB,EACC,mBADD,EACsB,mBADtB,CAAd,EAC0D,YAAY;AACpE,WAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,CAAd,EAAZ,EAA8B,EAAC,MAAM,EAAC,GAAG,EAAJ,EAAP,EAA9B,EAA+C,EAAC,OAAO,IAAR,EAA/C;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,EAAC,MAAM,EAAC,GAAG,CAAC,CAAL,EAAP,EAAtB,EAAuC,KAAvC,EAAR,EAAwD,GAAxD,CAAX,EACW,CAAC,EAAD,EAAK,CAAL,CADX;AAED,KALD;;AAOA,kBAAc,SAAd,EAAyB,YAAY;AACnC,UAAI,QAAQ,KAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,EAAC,KAAK,EAAN,EAAd,EAAZ,CAAZ;AACA,WAAK,KAAL,CAAW,KAAX,EAAkB,CAAlB;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACD,KAJD;;AAMA,kBAAc,QAAd,EAAwB,YAAY;AAClC,WAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAZ;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACD,KAHD;;AAKA,kBAAc,EAAd,EAAkB,YAAY;AAC5B,UAAI,QAAQ,KAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAZ,CAAZ;AACA,WAAK,KAAL,CAAW,KAAX,EAAkB,CAAlB;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,KAAtB,EAAX,EAA0C,CAA1C;AACD,KAJD;;AAMA,QAAI,IAAJ;AACA;AACD,GAnJD;;AAqJA,WAAS,QAAT,CAAkB,iCAAiC,YAAnD,EAAiE,UAAS,IAAT,EAAe,UAAf,EAA2B;;AAE1F,QAAI,MAAM,OAAO,EAAP,EAAV;AACA,QAAI,IAAJ;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAI,MAAM,UAAV,CAAqB,IAArB,EAA2B,iBAA3B,CAAP,C;AACD,KAFD,MAEO;AACL,eAAO,IAAI,MAAM,UAAV,CAAqB,8BAA4B,GAAjD,EAAsD,iBAAtD,CAAP;AACD;;;AAGD,QAAI,SAAS,EAAb;AACA,QAAI,UAAU,EAAd;AACA,QAAI,WAAW,EAAC,KAAK,CAAN,EAAS,QAAQ,CAAjB,EAAoB,MAAM,CAA1B,EAA6B,QAAQ,CAArC,EAAf;;AAEA,QAAI,MAAM,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,EAAC,MAAM,CAAC,GAAD,CAAP,EAAtB,EAAqC,OAArC,CAA6C;AACrD;AAAS,yBAAU,GAAV,EAAe,YAAf,EAA6B;AACpC,mBAAS,GAAT;AACA,iBAAO,MAAP,CAAc,YAAd,EAA4B,CAA5B,EAA+B,IAAI,CAAnC;AACD;;AAHD;AAAA,SADqD;AAKrD;AAAW,2BAAU,OAAV,EAAmB,OAAnB,EAA4B,QAA5B,EAAsC;AAC/C,mBAAS,MAAT;AACA,eAAK,KAAL,CAAW,OAAO,QAAP,CAAX,EAA6B,QAAQ,CAArC;AACA,iBAAO,QAAP,IAAmB,QAAQ,CAA3B;AACD;;AAJD;AAAA,SALqD;AAUrD;AAAS,yBAAU,GAAV,EAAe,SAAf,EAA0B,SAA1B,EAAqC;AAC5C,mBAAS,IAAT;AACA,eAAK,KAAL,CAAW,OAAO,SAAP,CAAX,EAA8B,IAAI,CAAlC;AACA,iBAAO,MAAP,CAAc,SAAd,EAAyB,CAAzB;AACA,iBAAO,MAAP,CAAc,SAAd,EAAyB,CAAzB,EAA4B,IAAI,CAAhC;AACD;;AALD;AAAA,SAVqD;AAgBrD;AAAW,2BAAU,GAAV,EAAe,QAAf,EAAyB;AAClC,mBAAS,MAAT;AACA,eAAK,KAAL,CAAW,OAAO,QAAP,CAAX,EAA6B,IAAI,CAAjC;AACA,iBAAO,MAAP,CAAc,QAAd,EAAwB,CAAxB;AACD;;AAJD;AAAA;AAhBqD,KAA7C,CAAV;;AAuBA,QAAI,OAAO,QAAX,EAAqB;;AAEnB,WAAK,MAAL,CAAY,IAAI,YAAJ,CAAiB,cAAjB,CAAgC,eAA5C;AACD;;AAED,QAAI,OAAO,CAAX;;;;;AAKA,QAAI,eAAe,IAAI,YAAJ,CAAiB,YAAY,OAAO,QAAP,EAA7B,CAAnB;;AAEA,QAAI,MAAM,SAAN,GAAM,CAAU,CAAV,EAAa;AACrB,aAAO,aAAa,cAAb,CAA4B,CAA5B,EAA+B,IAAE,CAAjC,CAAP;AACD,KAFD;;AAIA,QAAI,gBAAgB,SAAhB,aAAgB,CAAU,CAAV,EAAa;AAC/B,UAAI,OAAO,QAAX,EAAqB;AACnB;AACD,OAFD,MAEO;AACL,YAAI,QAAQ,IAAI,UAAU,WAAd,EAAZ;AACA,kBAAU,kBAAV,CAA6B,SAA7B,CAAuC,KAAvC,EAA8C,CAA9C;AACA,cAAM,UAAN;AACD;AACF,KARD;;AAUA,QAAI,SAAS,SAAT,MAAS,GAAY;AACvB,UAAI,WAAW,CAAf,EAAkB;;AAChB,YAAI,IAAJ;AACA;AACA;AACD;;AAED,UAAI,eAAe,EAAE,KAAF,CAAQ,QAAR,CAAnB;;AAEA,oBAAc,YAAY;AACxB,YAAI,OAAO,QAAX,EACE,IAAI,YAAJ,CAAiB,cAAjB,CAAgC,eAAhC;;;AAGF,YAAI,cAAc,IAAI,EAAJ,IAAU,CAA5B;AACA,aAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAApB,EAAiC,GAAjC,EAAsC;;AAEpC,cAAI,KAAK,IAAI,CAAJ,CAAT;AACA,cAAI,QAAQ,IAAI,QAAQ,MAAZ,CAAZ;AACA,cAAI,OAAO,CAAP,IAAY,OAAO,CAAnB,IAAwB,CAAC,QAAQ,MAArC,EAA6C;;AAE3C,gBAAI,IAAI,IAAI,OAAJ,CAAR;AACA,iBAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,CAAd,EAAZ;AACA,oBAAQ,IAAR,CAAa,CAAb;AACA,yBAAa,GAAb;AACD,WAND,MAMO,IAAI,OAAO,CAAP,IAAY,OAAO,CAAvB,EAA0B;AAC/B,gBAAI,IAAI,QAAQ,KAAR,CAAR;AACA,gBAAI,OAAO,CAAX;;AAEE,kBAAI,MAAM,KAAK,IAAI,CAAJ,IAAS,CAAC,CAAV,GAAc,CAAnB,CAAV,CAFF;;AAKE,kBAAI,MAAM,IAAI,OAAJ,CAAV;AACF,iBAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,CAAd,EAAZ,EAA8B,EAAC,MAAM,EAAC,GAAG,GAAJ,EAAP,EAA9B;AACA,oBAAQ,KAAR,IAAiB,GAAjB;AACA,yBAAa,MAAb;AACA,yBAAa,IAAb;AACD,WAZM,MAYA;AACL,iBAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,QAAQ,KAAR,CAAd,EAAZ;AACA,oBAAQ,MAAR,CAAe,KAAf,EAAsB,CAAtB;AACA,yBAAa,MAAb;AACD;AACF;AACD,YAAI,OAAO,QAAX,EACE,IAAI,YAAJ,CAAiB,cAAjB,CAAgC,cAAhC;AAEH,OArCD;;;;AAyCA,cAAQ,IAAR,CAAa,UAAU,CAAV,EAAY,CAAZ,EAAe;AAAC,eAAO,IAAE,CAAT;AAAY,OAAzC;AACA,WAAK,KAAL,CAAW,MAAX,EAAmB,OAAnB;;;;AAIA,QAAE,IAAF,CAAO,YAAP,EAAqB,UAAU,CAAV,EAAa,CAAb,EAAgB;AACnC,aAAK,MAAL,CAAY,aAAa,CAAb,KAAmB,SAAS,CAAT,CAA/B,EAA4C,CAA5C;AACD,OAFD;;AAIA,aAAO,KAAP,CAAa,MAAb;AACD,KA5DD;;AA8DA;AAED,GAhID;;AAkIA,WAAS,QAAT,CAAkB,kCAAkC,YAApD,EAAkE,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AAC5F,QAAI,MAAM,KAAK,KAAL,EAAV;AACA,QAAI,IAAJ;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAI,MAAM,UAAV,CAAqB,IAArB,EAA2B,iBAA3B,CAAP,C;AACD,KAFD,MAEO;AACL,eAAO,IAAI,MAAM,UAAV,CAAqB,8BAA4B,GAAjD,EAAsD,iBAAtD,CAAP;AACD;;AAED,QAAI,YAAY,CAAhB;AACA,QAAI,SAAS,KAAK,IAAL,CAAU,EAAC,KAAK,GAAN,EAAV,EAAsB,OAAtB,CAA8B;AACzC;AAAS,yBAAU,CAAV,EAAa;;;AAGpB,iBAAO,EAAE,GAAT;AACA;AACD;;AALD;AAAA;AADyC,KAA9B,CAAb;AAQA,MAAE,IAAF,CAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAAP,EAAwB,UAAU,GAAV,EAAe;AACrC,iBAAW,YAAY;AACrB,aAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,KAAK,GAAhB,EAAZ;AACD,OAFD;AAGD,KAJD;AAKA,WAAO,IAAP;;AAEA,SAAK,KAAL,CAAW,SAAX,EAAsB,CAAtB;;AAEA;AACD,GA5BD;;AA8BA,WAAS,QAAT,CAAkB,+CAA+C,YAAjE,EAA+E,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACzG,QAAI,MAAM,OAAO,EAAP,EAAV;AACA,QAAI,IAAJ;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAI,MAAM,UAAV,CAAqB,IAArB,EAA2B,iBAA3B,CAAP,C;AACD,KAFD,MAEO;AACL,eAAO,IAAI,MAAM,UAAV,CAAqB,0BAAwB,GAA7C,EAAkD,iBAAlD,CAAP;AACD;;AAED,QAAI,SAAS,EAAb;;AAEA,QAAI,SAAS,KAAK,IAAL,GAAY,OAAZ,CAAoB;AAC/B;AAAO,uBAAU,GAAV,EAAe;AACpB,iBAAO,IAAP,CAAY,EAAC,OAAO,IAAI,GAAZ,EAAZ;AACD;;AAFD;AAAA,SAD+B;AAI/B;AAAS,yBAAU,MAAV,EAAkB;AACzB,iBAAO,IAAP,CAAY,SAAZ;AACA,iBAAO,IAAP;AACD;;AAHD;AAAA;AAJ+B,KAApB,CAAb;;AAUA,SAAK,KAAL,CAAW,MAAX,EAAmB,EAAnB;;;AAGA,QAAI,KAAJ;AACA,eAAW,YAAY;AACrB,cAAQ,KAAK,MAAL,CAAY,EAAC,KAAK,EAAN,EAAZ,CAAR;AACD,KAFD;AAGA,SAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;AACA,SAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,EAAC,OAAO,KAAR,EAA3B;;;;AAIA,eAAW,YAAW;AACpB,WAAK,MAAL,CAAY,KAAZ,EAAmB,EAAC,MAAM,EAAC,KAAK,EAAN,EAAP,EAAnB;AACD,KAFD;AAGA,SAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;AACA,SAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,SAA3B;;;;AAIA,eAAW,YAAW;AACpB,WAAK,MAAL,CAAY,KAAZ,EAAmB,EAAC,MAAM,EAAC,KAAK,EAAN,EAAP,EAAnB;AACD,KAFD;AAGA,SAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;;AAEA,SAAK,KAAL,CAAW,KAAK,IAAL,GAAY,KAAZ,EAAX,EAAgC,CAAhC;AACA,SAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAb,CAAX,EACW,EAAC,KAAK,KAAN,EAAa,KAAK,EAAlB,EAAsB,KAAK,EAA3B,EAA+B,KAAK,EAApC,EADX;;AAGA;AACD,GAnDD;;;AAsDA,MAAI,OAAO,QAAX,EAAqB;AACnB,aAAS,QAAT,CAAkB,gDAAgD,YAAlE,EAAgF,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AAC1G,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,uBAAqB,GAA1C,EAA+C,iBAA/C,CAAX;;AAEA,UAAI,iBAAiB,KAArB;AACA,UAAI,SAAS,KAAK,IAAL,CAAU,EAAV,EAAc,OAAd,CAAsB;AACjC;AAAO,yBAAU,MAAV,EAAkB;AACvB,6BAAiB,IAAjB;AACA,iBAAK,MAAL,CAAY,YAAY;AACtB,mBAAK,IAAL,CAAU,EAAV,EAAc,OAAd;AACD,aAFD;AAGD;;AALD;AAAA;AADiC,OAAtB,CAAb;AAQA,WAAK,OAAL,CAAa,cAAb;;AAEA,iBAAW,YAAY;AACrB,aAAK,MAAL,CAAY,EAAC,KAAK,EAAN,EAAZ;AACD,OAFD;AAGA,WAAK,MAAL,CAAY,cAAZ;;AAEA,aAAO,IAAP;;AAEA;AACD,KAvBD;;AAyBA,aAAS,QAAT,CAAkB,oCAAoC,YAAtD,EAAoE,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AAC9F,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,iBAAe,GAApC,EAAyC,iBAAzC,CAAX;;AAEA,UAAI,WAAW,SAAX,QAAW,CAAU,OAAV,EAAmB;AAChC,YAAI,SAAS,EAAb;AACA,YAAI,YAAY;AACd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACD;;AAFD;AAAA;AADc,SAAhB;AAKA,YAAI,CAAC,OAAL,EAAc;AACZ,oBAAU,KAAV,GAAkB,UAAU,GAAV,EAAe;AAC/B,mBAAO,IAAP,CAAY,EAAC,OAAO,IAAI,GAAZ,EAAZ;AACD,WAFD;AAGD;AACD,YAAI,SAAS,KAAK,IAAL,CAAU,EAAC,KAAK,EAAN,EAAV,EAAqB,OAArB,CAA6B,SAA7B,CAAb;AACA,eAAO,EAAC,QAAQ,MAAT,EAAiB,QAAQ,MAAzB,EAAP;AACD,OAdD;;;AAiBA,UAAI,SAAS,KAAK,MAAL,CAAY,EAAC,KAAK,EAAN,EAAZ,CAAb;AACA,UAAI,KAAK,UAAT;;AAEA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,KAAL,CAAW,GAAG,MAAH,CAAU,KAAV,EAAX,EAA8B,EAAC,OAAO,MAAR,EAA9B;;;AAGA,UAAI,MAAJ;AACA,iBAAW,YAAY;AACrB,iBAAS,KAAK,MAAL,CAAY,EAAC,KAAK,EAAN,EAAU,KAAK,CAAf,EAAZ,CAAT;AACD,OAFD;;AAIA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,KAAL,CAAW,GAAG,MAAH,CAAU,KAAV,EAAX,EAA8B,EAAC,OAAO,MAAR,EAA9B;;;AAGA,UAAI,KAAK,UAAT;;AAEA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,OAAL,CAAa,CAAC,MAAD,EAAS,MAAT,CAAb,EAA+B,GAAG,MAAH,CAAU,CAAV,EAAa,KAA5C;AACA,WAAK,OAAL,CAAa,CAAC,MAAD,EAAS,MAAT,CAAb,EAA+B,GAAG,MAAH,CAAU,CAAV,EAAa,KAA5C;AACA,WAAK,QAAL,CAAc,GAAG,MAAH,CAAU,CAAV,EAAa,KAA3B,EAAkC,GAAG,MAAH,CAAU,CAAV,EAAa,KAA/C;AACA,SAAG,MAAH,CAAU,MAAV,GAAmB,CAAnB;;AAEA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;;;AAGA,UAAI,qBAAqB,GAAG,MAAH,CAAU,YAAnC;AACA,WAAK,MAAL,CAAY,kBAAZ;AACA,WAAK,MAAL,CAAY,uBAAuB,GAAG,MAAH,CAAU,YAA7C;;;AAGA,iBAAW,YAAY;AACrB,aAAK,MAAL,CAAY,MAAZ,EAAoB,EAAC,MAAM,EAAC,GAAG,GAAJ,EAAP,EAApB;AACD,OAFD;AAGA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,KAAL,CAAW,GAAG,MAAH,CAAU,KAAV,EAAX,EAA8B,EAAC,SAAS,MAAV,EAA9B;AACA,WAAK,KAAL,CAAW,GAAG,MAAH,CAAU,KAAV,EAAX,EAA8B,EAAC,SAAS,MAAV,EAA9B;;;AAGA,SAAG,MAAH,CAAU,IAAV;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;;;AAGA,iBAAW,YAAY;AACrB,aAAK,MAAL,CAAY,MAAZ,EAAoB,EAAC,MAAM,EAAC,GAAG,GAAJ,EAAP,EAApB;AACD,OAFD;AAGA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,KAAL,CAAW,GAAG,MAAH,CAAU,KAAV,EAAX,EAA8B,EAAC,SAAS,MAAV,EAA9B;;;;AAIA,WAAK,MAAL,CAAY,mBAAmB,QAA/B,E;AACA,SAAG,MAAH,CAAU,IAAV;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;;;AAGA,WAAK,MAAL,CAAY,mBAAmB,QAA/B;;;AAGA,UAAI,KAAK,UAAT;;AAEA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,OAAL,CAAa,CAAC,MAAD,EAAS,MAAT,CAAb,EAA+B,GAAG,MAAH,CAAU,CAAV,EAAa,KAA5C;AACA,WAAK,OAAL,CAAa,CAAC,MAAD,EAAS,MAAT,CAAb,EAA+B,GAAG,MAAH,CAAU,CAAV,EAAa,KAA5C;AACA,WAAK,QAAL,CAAc,GAAG,MAAH,CAAU,CAAV,EAAa,KAA3B,EAAkC,GAAG,MAAH,CAAU,CAAV,EAAa,KAA/C;;AAEA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;AACA,WAAK,MAAL,CAAY,GAAG,MAAf,EAAuB,CAAvB;;AAEA,WAAK,MAAL,CAAY,uBAAuB,GAAG,MAAH,CAAU,YAA7C;;;AAGA,UAAI,KAAK,SAAS,IAAT,CAAT;;AAEA,SAAG,MAAH,CAAU,IAAV;AACA,SAAG,MAAH,CAAU,IAAV;;AAEA;AACD,KAxGD;;AA0GA,aAAS,QAAT,CAAkB,gDAAgD,YAAlE,EAAgF,UAAU,IAAV,EAAgB,UAAhB,EAA4B;;;AAG1G,UAAI,QAAQ,OAAO,EAAP,EAAZ;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAArB,CAAX;AACA,UAAI,MAAM,EAAE,KAAK,KAAP,EAAV;AACA,UAAI,IAAI,CAAR;AACA,WAAK,MAAL,CAAY,GAAZ,EAAiB,UAAU,GAAV,EAAe,MAAf,EAAuB;AACtC,aAAK,KAAL,CAAW,GAAX,EAAgB,IAAhB;AACA,aAAK,KAAL,CAAW,CAAX,EAAc,CAAd;AACA;AACD,OAJD;AAKA;AACD,KAbD;;AAeA,aAAS,QAAT,CAAkB,gDAAgD,YAAlE,EAAgF,UAAU,IAAV,EAAgB,UAAhB,EAA4B;;AAE1G,UAAI,QAAQ,OAAO,EAAP,EAAZ;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAArB,CAAX;AACA,UAAI,MAAM,EAAE,KAAK,KAAP,EAAV;AACA,UAAI,IAAI,CAAR;AACA,UAAI,KAAK,KAAK,MAAL,CAAY,GAAZ,CAAT;AACA,WAAK,MAAL,CAAY,EAAZ,EAAgB,EAAE,MAAM,EAAE,KAAK,KAAP,EAAR,EAAhB,EAA0C,UAAU,GAAV,EAAe,MAAf,EAAuB;AAC/D,aAAK,KAAL,CAAW,GAAX,EAAgB,IAAhB;AACA,aAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA,aAAK,KAAL,CAAW,CAAX,EAAc,CAAd;AACA;AACD,OALD;AAMA;AACD,KAdD;;AAgBA,aAAS,QAAT,CAAkB,gDAAgD,YAAlE,EAAgF,UAAU,IAAV,EAAgB,UAAhB,EAA4B;;AAE1G,UAAI,QAAQ,OAAO,EAAP,EAAZ;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAArB,CAAX;AACA,UAAI,MAAM,EAAE,KAAK,KAAP,EAAV;AACA,UAAI,IAAI,CAAR;AACA,UAAI,KAAK,KAAK,MAAL,CAAY,GAAZ,CAAT;AACA,WAAK,MAAL,CAAY,EAAZ,EAAgB,UAAU,GAAV,EAAe,MAAf,EAAuB;AACrC,aAAK,KAAL,CAAW,GAAX,EAAgB,IAAhB;AACA,aAAK,OAAL,CAAa,KAAK,OAAL,CAAa,EAAb,CAAb;AACA,aAAK,KAAL,CAAW,CAAX,EAAc,CAAd;AACA;AACD,OALD;AAMA;AACD,KAdD;;;AAiBA,QAAI,YAAY,SAAZ,SAAY,CAAU,CAAV,EAAa,CAAb,EAAgB;AAC9B,UAAI,EAAE,GAAF,CAAM,CAAN,EAAS,MAAM,SAAf,CAAJ;AACA,UAAI,EAAE,GAAF,CAAM,CAAN,EAAS,MAAM,SAAf,CAAJ;AACA,aAAO,EAAE,OAAF,CAAU,EAAE,UAAF,CAAa,CAAb,EAAgB,CAAhB,CAAV,KAAiC,EAAE,OAAF,CAAU,EAAE,UAAF,CAAa,CAAb,EAAgB,CAAhB,CAAV,CAAxC;AACD,KAJD;;;;AAQA,aAAS,QAAT,CAAkB,8CAA8C,YAAhE,EAA8E,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACxG,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,kBAAgB,GAArC,EAA0C,iBAA1C,CAAX;;AAEA,UAAI,WAAW,SAAX,QAAW,GAAY;AACzB,YAAI,QAAQ,EAAZ;AACA,YAAI,SAAS,EAAb;AACA,YAAI,YAAY;AACd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACA,oBAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAHD;AAAA,aADc;AAKd;AAAO,2BAAU,MAAV,EAAkB;AACvB,qBAAO,IAAP,CAAY,EAAC,OAAO,OAAO,GAAf,EAAZ;AACA,oBAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAHD;AAAA,aALc;AASd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACA,qBAAO,MAAM,OAAO,GAAb,CAAP;AACD;;AAHD;AAAA;AATc,SAAhB;AAcA,YAAI,SAAS,KAAK,IAAL,CAAU,EAAC,KAAK,EAAN,EAAV,EACU,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAAiB,OAAO,CAAxB,EADV,EACsC,OADtC,CAC8C,SAD9C,CAAb;;AAGA,eAAO,EAAC,QAAQ,MAAT,EAAiB,QAAQ,MAAzB,EAAiC,OAAO,KAAxC,EAAP;AACD,OArBD;AAsBA,UAAI,cAAc,SAAd,WAAc,CAAU,CAAV,EAAa;AAAE,UAAE,MAAF,CAAS,MAAT,CAAgB,CAAhB,EAAmB,EAAE,MAAF,CAAS,MAA5B;AAAsC,OAAvE;;AAEA,UAAI,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe;AACvB,YAAI,EAAJ,CAAQ,WAAW,YAAY;AAAE,eAAK,KAAK,MAAL,CAAY,GAAZ,CAAL;AAAwB,SAAjD;AACR,eAAO,EAAP;AACD,OAHD;AAIA,UAAI,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe;AAAE,mBAAW,YAAY;AAAE,eAAK,MAAL,CAAY,GAAZ;AAAmB,SAA5C;AAAgD,OAA3E;AACA,UAAI,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe,GAAf,EAAoB,GAApB,EAAyB;AACjC,mBAAW,YAAY;AACrB,eAAK,MAAL,CAAY,GAAZ,EAAiB,GAAjB,EAAsB,GAAtB;AACD,SAFD;AAGD,OAJD;;AAMA,UAAI,qBAAqB,SAArB,kBAAqB,CAAU,GAAV,EAAe;AACtC,YAAI,CAAC,SAAL,EACE;AACF,YAAI,YAAY,EAAhB;AACA,UAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,kBAArC,CAAwD,OAAxD,CAAgE,UAAU,CAAV,EAAa,EAAb,EAAiB;AAC/E,oBAAU,IAAV,CAAe,EAAf;AACD,SAFD;;AAIA,aAAK,MAAL,CAAY,UAAU,GAAV,EAAe,SAAf,CAAZ,EAAuC,eAAe,GAAf,GAAqB,SAArB,GAAiC,SAAxE;AACD,OATD;AAUA,UAAI,6BAA6B,SAA7B,0BAA6B,CAAU,QAAV,EAAoB;AACnD,YAAI,CAAC,SAAL,EACE;AACF,aAAK,KAAL,CAAW,EAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,mBAAhD,EACW,QADX;AAED,OALD;;;;;;;;AAaA,UAAI,SAAS,IAAI,EAAC,KAAK,EAAN,EAAU,KAAK,CAAf,EAAJ,CAAb;AACA;;;AAGA,UAAI,IAAI,UAAR;AACA,UAAI,YAAY,EAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,UAArD;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,KAAL,CAAW,EAAE,MAAF,CAAS,KAAT,EAAX,EAA6B,EAAC,OAAO,MAAR,EAA7B;AACA,iCAA2B,IAA3B;;;;AAIA,UAAI,SAAS,IAAI,EAAC,KAAK,EAAN,EAAU,KAAK,CAAf,EAAJ,CAAb;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,KAAL,CAAW,EAAE,MAAF,CAAS,KAAT,EAAX,EAA6B,EAAC,OAAO,MAAR,EAA7B;AACA,iCAA2B,IAA3B;;AAEA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,CAAhB,EAAJ,CAAb;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,KAAL,CAAW,EAAE,MAAF,CAAS,KAAT,EAAX,EAA6B,EAAC,OAAO,MAAR,EAA7B;AACA,iCAA2B,IAA3B;;;AAGA,UAAI,EAAE,KAAK,EAAP,EAAJ;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;;;AAGA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,CAAhB,EAAJ,CAAb;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,yBAAmB,CAAC,MAAD,CAAnB;AACA,iCAA2B,IAA3B;;;AAGA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,CAAC,CAAjB,EAAJ,CAAb;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;;AAEA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,SAAS,MAAV,EAAlB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,MAAD,EAAS,MAAT,CAAnB;AACA,iCAA2B,IAA3B;;;AAGA,UAAI,MAAJ;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,SAAS,MAAV,EAAD,EAAoB,EAAC,OAAO,MAAR,EAApB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,MAAD,CAAnB;AACA,iCAA2B,IAA3B;;;;;AAKA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,CAAC,CAAjB,EAAJ,CAAb;AACA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,CAAC,CAAjB,EAAJ,CAAb;AACA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,CAAC,CAAjB,EAAJ,CAAb;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,UAAI,WAAW,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,SAAS,MAAV,EAAlB,EACC,EAAC,OAAO,MAAR,EADD,EACkB,EAAC,SAAS,MAAV,EADlB,EAEC,EAAC,OAAO,MAAR,EAFD,EAEkB,EAAC,SAAS,MAAV,EAFlB,CAAf;AAGA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,QAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAAnB;AACA,iCAA2B,KAA3B;;;;AAIA,UAAI,EAAE,KAAK,EAAE,KAAK,CAAP,EAAP,EAAJ,EAAwB,EAAE,MAAM,EAAE,KAAK,EAAP,EAAR,EAAxB,EAA+C,EAAE,OAAO,IAAT,EAA/C;;;;;;;;;AASA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,UAAI,kBAAkB,CAAC,EAAC,SAAS,MAAV,EAAD,EACC,EAAC,SAAS,MAAV,EADD,EAEC,EAAC,SAAS,MAAV,EAFD,CAAtB;AAGA,UAAI,eAAe,CAAC,EAAC,OAAO,MAAR,EAAD,EACC,EAAC,OAAO,MAAR,EADD,EAEC,EAAC,OAAO,MAAR,EAFD,CAAnB;;AAIA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,aAAa,MAAb,CAAoB,eAApB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,MAAD,EAAS,MAAT,EAAiB,MAAjB,CAAnB;AACA,iCAA2B,KAA3B;;;;AAIA,UAAI,EAAE,KAAK,EAAE,KAAK,EAAP,EAAP,EAAJ;;;;;;AAMA,UAAI,SAAJ,EAAe;AACb,YAAI,kBAAkB,CAAC,EAAC,SAAS,MAAV,EAAD,EAAoB,EAAC,SAAS,MAAV,EAApB,EACC,EAAC,SAAS,MAAV,EADD,EACoB,EAAC,SAAS,MAAV,EADpB,CAAtB;AAEA,YAAI,eAAe,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,OAAO,MAAR,EAAlB,EACC,EAAC,OAAO,MAAR,EADD,EACkB,EAAC,OAAO,MAAR,EADlB,CAAnB;;AAGA,aAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACD,OAPD,MAOO;AACL,YAAI,kBAAkB,CAAC,EAAC,SAAS,MAAV,EAAD,EAAoB,EAAC,SAAS,MAAV,EAApB,EACC,EAAC,SAAS,MAAV,EADD,CAAtB;AAEA,YAAI,eAAe,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,OAAO,MAAR,EAAlB,EAAmC,EAAC,OAAO,MAAR,EAAnC,CAAnB;;AAEA,aAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACD;;AAED,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,aAAa,MAAb,CAAoB,eAApB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,EAAnB;AACA,iCAA2B,IAA3B;;AAEA,UAAI,SAAS,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAb;AACA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;AACA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;AACA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;;;AAGA,yBAAmB,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAAnB;AACA,iCAA2B,KAA3B;AACA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,UAAI,EAAE,KAAK,EAAE,KAAK,EAAP,EAAP,EAAJ,EAA0B,EAAE,MAAM,EAAE,KAAK,CAAP,EAAR,EAA1B,EAAgD,EAAE,OAAO,IAAT,EAAhD;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,SAAS,MAAV,EAAD,EACC,EAAC,OAAO,MAAR,EADD,EAEC,EAAC,SAAS,MAAV,EAFD,EAGC,EAAC,SAAS,MAAV,EAHD,CAApB,CAAZ;AAIA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,MAAD,EAAS,OAAT,EAAkB,OAAlB,CAAnB;AACA,iCAA2B,KAA3B;;AAEA,UAAI,MAAJ;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,SAAS,MAAV,EAAD,EAAoB,EAAC,OAAO,MAAR,EAApB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,OAAD,EAAU,OAAV,CAAnB;AACA,iCAA2B,KAA3B;;AAEA,UAAI,EAAE,KAAK,EAAE,KAAK,EAAP,EAAP,EAAJ,EAA0B,EAAE,MAAM,EAAE,KAAK,CAAC,GAAR,EAAR,EAA1B,EAAmD,EAAE,OAAO,IAAT,EAAnD;;;;;AAKA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,SAAS,MAAV,EAAD,EAAoB,EAAC,OAAO,OAAR,EAApB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,MAAD,CAAnB;AACA,iCAA2B,KAA3B;;;AAGA,UAAI,MAAJ;AACA,UAAI,MAAJ;AACA,UAAI,OAAJ;;;;AAIA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,SAAS,MAAV,EAAD,EAAoB,EAAC,SAAS,MAAV,EAApB,EACC,EAAC,SAAS,OAAV,EADD,EACqB,EAAC,OAAO,MAAR,EADrB,EAEC,EAAC,OAAO,OAAR,EAFD,EAEmB,EAAC,OAAO,OAAR,EAFnB,CAApB,CAAZ;;AAIA,WAAK,MAAL,CAAY,EAAE,IAAF,CAAO,EAAE,KAAT,CAAZ,EAA6B,CAA7B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,MAAR,CAAX,EAA4B,EAAE,KAAK,MAAP,EAAe,KAAK,EAApB,EAAwB,KAAK,EAA7B,EAA5B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,OAAR,CAAX,EAA6B,EAAE,KAAK,OAAP,EAAgB,KAAK,EAArB,EAAyB,KAAK,IAA9B,EAA7B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,OAAR,CAAX,EAA6B,EAAE,KAAK,OAAP,EAAgB,KAAK,EAArB,EAAyB,KAAK,IAA9B,EAA7B;AACA,kBAAY,CAAZ;AACA,yBAAmB,EAAnB;AACA,iCAA2B,IAA3B;;AAEA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;AACA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;AACA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;AACA,UAAI,UAAU,IAAI,EAAE,KAAK,EAAP,EAAW,KAAK,EAAhB,EAAJ,CAAd;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,yBAAmB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAnB;AACA,iCAA2B,KAA3B;;;;AAIA,UAAI,OAAJ,EAAa,EAAC,MAAM,EAAC,KAAK,EAAN,EAAP,EAAb;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,SAAS,OAAV,EAAD,EAAqB,EAAC,OAAO,OAAR,EAArB,CAApB,CAAZ;AACA,kBAAY,CAAZ;AACA,yBAAmB,CAAC,OAAD,EAAU,OAAV,EAAmB,OAAnB,CAAnB;AACA,iCAA2B,KAA3B;;AAEA,QAAE,MAAF,CAAS,IAAT;AACA;AACD,KA5QD;;AA8QA,aAAS,QAAT,CAAkB,2DAA2D,YAA7E,EAA2F,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACrH,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,kBAAgB,GAArC,EAA0C,iBAA1C,CAAX;;AAEA,UAAI,WAAW,SAAX,QAAW,GAAY;AACzB,YAAI,QAAQ,EAAZ;AACA,YAAI,SAAS,EAAb;AACA,YAAI,YAAY;AACd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACA,oBAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAHD;AAAA,aADc;AAKd;AAAO,2BAAU,MAAV,EAAkB;AACvB,qBAAO,IAAP,CAAY,EAAC,OAAO,OAAO,GAAf,EAAZ;AACA,oBAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAHD;AAAA,aALc;AASd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACA,qBAAO,MAAM,OAAO,GAAb,CAAP;AACD;;AAHD;AAAA;AATc,SAAhB;AAcA,YAAI,SAAS,KAAK,IAAL,CAAU,EAAV,EAAc,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP;AACC,iBAAO,CADR;AAEC,kBAAQ,EAAC,GAAG,CAAJ,EAFT,EAAd,EAEgC,OAFhC,CAEwC,SAFxC,CAAb;;AAIA,eAAO,EAAC,QAAQ,MAAT,EAAiB,QAAQ,MAAzB,EAAiC,OAAO,KAAxC,EAAP;AACD,OAtBD;AAuBA,UAAI,cAAc,SAAd,WAAc,CAAU,CAAV,EAAa;AAAE,UAAE,MAAF,CAAS,MAAT,CAAgB,CAAhB,EAAmB,EAAE,MAAF,CAAS,MAA5B;AAAsC,OAAvE;AACA,UAAI,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe;AACvB,YAAI,EAAJ,CAAQ,WAAW,YAAY;AAAE,eAAK,KAAK,MAAL,CAAY,GAAZ,CAAL;AAAwB,SAAjD;AACR,eAAO,EAAP;AACD,OAHD;AAIA,UAAI,MAAM,SAAN,GAAM,CAAU,EAAV,EAAc;AACtB,mBAAW,YAAY;AAAE,eAAK,MAAL,CAAY,EAAZ;AAAkB,SAA3C;AACD,OAFD;;AAIA,UAAI,IAAI,UAAR;;AAEA,UAAI,SAAS,IAAI,EAAE,GAAG,CAAL,EAAQ,GAAG,IAAX,EAAJ,CAAb;AACA,UAAI,SAAS,IAAI,EAAE,GAAG,CAAL,EAAQ,GAAG,IAAX,EAAJ,CAAb;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,KAAL,CAAW,EAAE,MAAb,EAAqB,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,OAAO,MAAR,EAAlB,CAArB;AACA,kBAAY,CAAZ;;AAEA,UAAI,SAAS,IAAI,EAAE,GAAG,CAAL,EAAQ,GAAG,IAAX,EAAJ,CAAb;AACA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;;AAEA,UAAI,SAAS,IAAI,EAAE,GAAG,CAAC,CAAN,EAAS,GAAG,CAAC,IAAb,EAAJ,CAAb;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,SAAS,MAAV,EAAlB,CAApB,CAAZ;;AAEA,WAAK,KAAL,CAAW,EAAE,IAAF,CAAO,EAAE,KAAT,CAAX,EAA4B,CAA5B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,MAAR,CAAX,EAA4B,EAAC,KAAK,MAAN,EAAc,GAAG,CAAC,IAAlB,EAA5B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,MAAR,CAAX,EAA4B,EAAC,KAAK,MAAN,EAAc,GAAG,IAAjB,EAA5B;AACA,kBAAY,CAAZ;;AAEA,UAAI,MAAJ;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;;AAEA,UAAI,MAAJ;;AAEA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,EAAE,MAAZ,EAAoB,CAAC,EAAC,OAAO,MAAR,EAAD,EAAkB,EAAC,SAAS,MAAV,EAAlB,CAApB,CAAZ;;AAEA,WAAK,KAAL,CAAW,EAAE,IAAF,CAAO,EAAE,KAAT,CAAX,EAA4B,CAA5B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,MAAR,CAAX,EAA4B,EAAC,KAAK,MAAN,EAAc,GAAG,IAAjB,EAA5B;AACA,WAAK,KAAL,CAAW,EAAE,KAAF,CAAQ,MAAR,CAAX,EAA4B,EAAC,KAAK,MAAN,EAAc,GAAG,IAAjB,EAA5B;AACA,kBAAY,CAAZ;;AAEA;AACD,KA1ED;;AA4EA,aAAS,QAAT,CAAkB,8DAA8D,YAAhF,EAA8F,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACxH,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,kBAAgB,GAArC,EAA0C,iBAA1C,CAAX;;AAEA,UAAI,WAAW,SAAX,QAAW,GAAY;AACzB,YAAI,QAAQ,EAAZ;AACA,YAAI,SAAS,EAAb;AACA,YAAI,YAAY;AACd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACA,oBAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAHD;AAAA,aADc;AAKd;AAAO,2BAAU,MAAV,EAAkB;AACvB,qBAAO,IAAP,CAAY,EAAC,OAAO,OAAO,GAAf,EAAZ;AACA,oBAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAHD;AAAA,aALc;AASd;AAAS,6BAAU,MAAV,EAAkB;AACzB,qBAAO,IAAP,CAAY,EAAC,SAAS,OAAO,GAAjB,EAAZ;AACA,qBAAO,MAAM,OAAO,GAAb,CAAP;AACD;;AAHD;AAAA;AATc,SAAhB;AAcA,YAAI,SAAS,KAAK,IAAL,CAAU,EAAV,EAAc,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAP,EAAqB,OAAO,CAA5B,EAAd,EACE,OADF,CACU,SADV,CAAb;;AAGA,eAAO,EAAC,QAAQ,MAAT,EAAiB,QAAQ,MAAzB,EAAiC,OAAO,KAAxC,EAAP;AACD,OArBD;AAsBA,UAAI,cAAc,SAAd,WAAc,CAAU,CAAV,EAAa;AAAE,UAAE,MAAF,CAAS,MAAT,CAAgB,CAAhB,EAAmB,EAAE,MAAF,CAAS,MAA5B;AAAsC,OAAvE;AACA,UAAI,MAAM,SAAN,GAAM,CAAU,GAAV,EAAe;AACvB,YAAI,EAAJ,CAAQ,WAAW,YAAY;AAAE,eAAK,KAAK,MAAL,CAAY,GAAZ,CAAL;AAAwB,SAAjD;AACR,eAAO,EAAP;AACD,OAHD;AAIA,UAAI,MAAM,SAAN,GAAM,CAAU,EAAV,EAAc;AACtB,mBAAW,YAAY;AAAE,eAAK,MAAL,CAAY,EAAZ;AAAkB,SAA3C;AACD,OAFD;;AAIA,UAAI,qBAAqB,SAArB,kBAAqB,CAAU,GAAV,EAAe;AACtC,YAAI,YAAY,EAAhB;AACA,UAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,kBAArC,CAAwD,OAAxD,CAAgE,UAAU,CAAV,EAAa,EAAb,EAAiB;AAC/E,oBAAU,IAAV,CAAe,EAAf;AACD,SAFD;;AAIA,aAAK,MAAL,CAAY,UAAU,GAAV,EAAe,SAAf,CAAZ,EAAuC,eAAe,GAAf,GAAqB,SAArB,GAAiC,SAAxE;AACD,OAPD;AAQA,UAAI,6BAA6B,SAA7B,0BAA6B,CAAU,QAAV,EAAoB;AACnD,YAAI,QAAJ,EACE,KAAK,MAAL,CAAY,EAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,mBAAjD,EADF,KAGE,KAAK,OAAL,CAAa,EAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,mBAAlD;AACH,OALD;;AAOA,UAAI,MAAM,EAAV;AACA,QAAE,IAAF,CAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAAgB,CAAhB,EAAmB,CAAnB,EAAsB,CAAtB,EAAyB,CAAzB,EAA4B,CAA5B,EAA+B,CAA/B,CAAP,EAA0C,UAAU,CAAV,EAAa,CAAb,EAAgB;AACxD,YAAI,CAAJ,IAAS,IAAI,EAAE,GAAG,CAAL,EAAQ,GAAG,CAAX,EAAJ,CAAT;AACD,OAFD;;;;AAMA;;AAEA,UAAI,IAAI,UAAR;AACA,UAAI,YAAY,EAAE,MAAF,CAAS,YAAT,CAAsB,cAAtB,CAAqC,UAArD;;;;AAIA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,CAAC,EAAC,OAAO,IAAI,CAAJ,CAAR,EAAD,EAAkB,EAAC,OAAO,IAAI,CAAJ,CAAR,EAAlB,EAAmC,EAAC,OAAO,IAAI,CAAJ,CAAR,EAAnC,CAAV,EAA+D,EAAE,MAAjE,CAAZ;AACA,mBAAa,mBAAmB,CAAC,IAAI,CAAJ,CAAD,EAAS,IAAI,CAAJ,CAAT,EAAiB,IAAI,CAAJ,CAAjB,CAAnB,CAAb;AACA,mBAAa,2BAA2B,KAA3B,CAAb;AACA,kBAAY,CAAZ;;AAEA,UAAI,IAAI,CAAJ,CAAJ;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,CAAC,EAAC,SAAS,IAAI,CAAJ,CAAV,EAAD,EAAoB,EAAC,OAAO,IAAI,CAAJ,CAAR,EAApB,CAAV,EAAgD,EAAE,MAAlD,CAAZ;AACA,mBAAa,mBAAmB,CAAC,IAAI,CAAJ,CAAD,EAAS,IAAI,CAAJ,CAAT,CAAnB,CAAb;AACA,mBAAa,2BAA2B,KAA3B,CAAb;AACA,kBAAY,CAAZ;;AAEA,UAAI,IAAI,CAAJ,CAAJ;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,CAAC,EAAC,SAAS,IAAI,CAAJ,CAAV,EAAD,EAAoB,EAAC,OAAO,IAAI,CAAJ,CAAR,EAApB,CAAV,EAAgD,EAAE,MAAlD,CAAZ;AACA,mBAAa,mBAAmB,CAAC,IAAI,CAAJ,CAAD,CAAnB,CAAb;AACA,mBAAa,2BAA2B,KAA3B,CAAb;AACA,kBAAY,CAAZ;;AAEA,UAAI,IAAI,CAAJ,CAAJ;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,CAAC,EAAC,SAAS,IAAI,CAAJ,CAAV,EAAD,EAAoB,EAAC,OAAO,IAAI,CAAJ,CAAR,EAApB,CAAV,EAAgD,EAAE,MAAlD,CAAZ;AACA,mBAAa,mBAAmB,CAAC,IAAI,CAAJ,CAAD,EAAS,IAAI,CAAJ,CAAT,EAAiB,IAAI,CAAJ,CAAjB,CAAnB,CAAb;AACA,mBAAa,2BAA2B,KAA3B,CAAb;AACA,kBAAY,CAAZ;;AAEA,UAAI,EAAE,GAAG,EAAC,KAAK,CAAN,EAAL,EAAJ;;;AAGA,WAAK,MAAL,CAAY,EAAE,MAAd,EAAsB,CAAtB;AACA,WAAK,MAAL,CAAY,UAAU,CAAC,EAAC,SAAS,IAAI,CAAJ,CAAV,EAAD,EAAoB,EAAC,SAAS,IAAI,CAAJ,CAAV,EAApB,EAAuC,EAAC,SAAS,IAAI,CAAJ,CAAV,EAAvC,EACC,EAAC,OAAO,IAAI,CAAJ,CAAR,EADD,EACkB,EAAC,OAAO,IAAI,CAAJ,CAAR,EADlB,EACmC,EAAC,OAAO,IAAI,CAAJ,CAAR,EADnC,CAAV,EAC+D,EAAE,MADjE,CAAZ;AAEA,mBAAa,mBAAmB,CAAC,IAAI,EAAJ,CAAD,EAAU,IAAI,CAAJ,CAAV,CAAnB,CAAb;AACA,mBAAa,2BAA2B,IAA3B,CAAb;AACA,kBAAY,CAAZ;;AAGA;AACD,KA7GD;AA8GD;;AAGD,iBAAe,uCAAuC,YAAtD,EAAoE,CAClE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAPiE,EAO/D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAX;;AAEA,SAAK,MAAL,CAAY,EAAZ,EAAgB,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACxC,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,UAAI,SAAS,KAAK,IAAL,EAAb;AACA,WAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAA3B;AACD,KALe,CAAhB;AAMD,GAhBiE,CAApE;;;AAoBA,iBAAe,+CAA+C,YAA9D,EAA4E,CAC1E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAPyE,EAOvE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAX;;;;AAIA,SAAK,MAAL,CAAY,KAAZ,EAAmB,EAAC,KAAK,CAAN,EAAnB;;;AAGA,SAAK,MAAL,CAAY,EAAZ,EAAgB,OAAO,YAAU,CAAE,CAAnB,CAAhB;AACD,GAhByE,CAA5E;;;AAoBA,iBAAe,4CAA4C,YAA3D,EAAyE,CACvE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C,EAA6D,iBAA7D;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAPsE,EAOpE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAX;AACA,QAAI,OAAO,KAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAvB;;AAEA,SAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,QAAQ,CAAnB,EAAZ,EAAmC,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC3D,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,WAAK,KAAL,GAAa,EAAb;AACA,WAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAK,KAAlB,CAAX,EACW,EAAC,KAAK,KAAK,KAAX,EAAkB,KAAK,GAAvB,EAA4B,QAAQ,CAApC,EADX;AAED,KANkC,CAAnC;AAOD,GAlBsE,EAmBvE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,OAAO,KAAK,IAAhB;AACA,SAAK,MAAL,CAAY,KAAK,KAAjB,EAAwB,EAAC,MAAM,EAAC,QAAQ,CAAT,EAAP,EAAxB,EAA6C,OAAO,UAAU,GAAV,EAAe;AACjE,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAK,KAAlB,CAAX,EACW,EAAC,KAAK,KAAK,KAAX,EAAkB,KAAK,GAAvB,EAA4B,QAAQ,CAApC,EADX;AAED,KAJ4C,CAA7C;AAKD,GA3BsE,CAAzE;;AA8BA,iBAAe,4CAA4C,YAA3D,EAAyE,CACvE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C,EAA6D,iBAA7D;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAPsE,EAOpE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;;AAEzB,QAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAX;AACA,QAAI,KAAJ;AACA,SAAK,MAAL,CAAY,EAAC,GAAG,IAAI,IAAJ,CAAS,aAAT,CAAJ,EAAZ,EAA0C,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AAClE,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,cAAQ,EAAR;AACA,UAAI,SAAS,KAAK,IAAL,EAAb;AACA,WAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAA3B;AACA,WAAK,KAAL,CAAW,KAAK,OAAL,GAAe,CAAf,CAAiB,WAAjB,EAAX,EAA2C,IAA3C;AACD,KAPyC,CAA1C;AAQD,GAnBsE,CAAzE;;AAsBA,iBAAe,yDAAyD,YAAxE,EAAsF,CACpF,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,UAAU,SAAV,OAAU,CAAU,GAAV,EAAe;AAC3B,UAAI,OAAJ,GAAc,YAAY;AAAC,eAAO,IAAI,CAAJ,CAAM,UAAN,EAAP;AAA2B,OAAtD;AACA,aAAO,GAAP;AACD,KAHD;AAIA,eAAW,SAAX,IAAwB,OAAxB;AACA,SAAK,iBAAL,GAAyB;AACvB,oBAAc,YADS;AAEvB,iBAAW,OAFY;AAGvB,qBAAe;AAHQ,KAAzB;AAKA,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C,EAA6D,iBAA7D;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAlBmF,EAkBjF,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAX;AACA,SAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,KAAK,iBAA/C,CAAZ;AACA,QAAI,GAAJ;AACA,QAAI,YAAY,OAAO,UAAU,GAAV,EAAe;AACpC,WAAK,KAAL,CAAW,IAAI,OAAJ,EAAX,EAA0B,EAA1B;AACD,KAFe,CAAhB;AAGA,QAAI,eAAe,OAAO,UAAU,GAAV,EAAe;AACvC,WAAK,KAAL,CAAW,IAAI,OAAJ,EAAX,EAA0B,EAA1B;AACA,UAAI,IAAJ;AACD,KAHkB,CAAnB;AAIA,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,GAAG,IAAI,IAAJ,CAAS,aAAT,CAAJ,EAAjB,EAA+C,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACvE,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,UAAI,SAAS,KAAK,IAAL,CAAU,IAAV,EAAb;AACA,YAAM,OAAO,OAAP,CAAe;AACnB,eAAO,SADY;AAEnB,iBAAS;AAFU,OAAf,CAAN;AAIA,WAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAA3B;AACA,WAAK,KAAL,CAAW,OAAO,KAAP,GAAe,CAAf,EAAkB,OAAlB,EAAX,EAAwC,EAAxC;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,OAAV,GAAoB,OAApB,EAAX,EAA0C,EAA1C;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,OAAV,CAAkB,EAAlB,EAAsB,EAAC,WAAW,IAAZ,EAAtB,EAAyC,OAApD,EAA6D,SAA7D;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,OAAV,CAAkB,EAAlB,EAAsB;AAC/B;AAAW,6BAAU,GAAV,EAAe;AAAC,mBAAO,EAAC,SAAS,IAAI,CAAJ,CAAM,UAAN,EAAV,EAAP;AAAsC;;AAAjE;AAAA;AAD+B,OAAtB,EAER,OAFH,EAEY,EAFZ;AAGA,WAAK,IAAL,CAAU,MAAV,CAAiB,EAAjB;AACD,KAhB8C,CAA/C;AAiBD,GA9CmF,EA+CpF,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,GAAG,IAAI,IAAJ,CAAS,aAAT,CAAJ,EAAjB,EAA+C,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACvE,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,WAAK,GAAL,GAAW,EAAX;AACD,KAJ8C,CAA/C;AAKA,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,GAAG,IAAI,IAAJ,CAAS,aAAT,CAAJ,EAAjB,EAA+C,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACvE,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,WAAK,GAAL,GAAW,EAAX;AACD,KAJ8C,CAA/C;AAKD,GA3DmF,CAAtF;;AA8DA,iBAAe,yDAAyD,YAAxE,EAAsF,CACpF,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,SAAS,SAAT,MAAS,CAAU,GAAV,EAAe;AAC1B,aAAO,EAAE,IAAF,CAAO,GAAP,EAAY,KAAZ,CAAP;AACD,KAFD;AAGA,eAAW,QAAX,IAAuB,MAAvB;AACA,QAAI,oBAAoB;AACtB,oBAAc,YADQ;AAEtB,iBAAW,MAFW;AAGtB,qBAAe;AAHO,KAAxB;AAKA,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C,EAA6D,iBAA7D;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAjBmF,EAiBjF,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAX;AACA,SAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAZ;AACA,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAjB,EAAqB,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC7C,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,WAAK,KAAL,CAAW,KAAK,IAAL,CAAU,OAAV,GAAoB,GAA/B,EAAoC,EAApC;AACD,KAJoB,CAArB;AAKD,GAzBmF,CAAtF;;AA4BA,MAAI,MAAM,OAAO,MAAP,CACR,yDACE,sDADF,GAEE,sDAFF,GAGE,sDAHF,GAIE,sDAJF,GAKE,sDALF,GAME,kDAPM,CAAV;;AASA,iBAAe,iDAAiD,YAAhE,EAA8E,CAC5E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;;AAEtB,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C,EAA6D,iBAA7D;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAR2E,EAQzE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAX;AACA,QAAI,KAAJ;AACA,SAAK,MAAL,CAAY,EAAC,GAAG,GAAJ,EAAZ,EAAsB,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC9C,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,cAAQ,EAAR;AACA,UAAI,SAAS,KAAK,IAAL,EAAb;AACA,WAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAA3B;AACA,UAAI,SAAS,KAAK,OAAL,EAAb;AACA,WAAK,MAAL,CAAY,MAAM,QAAN,CAAe,OAAO,CAAtB,CAAZ;AACA,WAAK,KAAL,CAAW,OAAO,CAAlB,EAAqB,GAArB;AACD,KATqB,CAAtB;AAUD,GArB2E,CAA9E;;AAwBA,iBAAe,mDAAmD,YAAlE,EAAgF,CAC9E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,SAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,QAAI,OAAO,QAAX,EAAqB;AACnB,aAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C,EAA6D,iBAA7D;AACA,aAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,GAP6E,EAO3E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAX;AACA,SAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,EAA0C,iBAA1C,CAAZ;AACA,QAAI,KAAJ;;;AAGA,QAAI,IAAI,IAAI,GAAJ,CAAQ,UAAR,EAAoB,QAApB,CAAR;AACA,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,GAAG,CAAJ,EAAjB,EAAyB,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACjD,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,EAAZ;AACA,cAAQ,EAAR;AACA,WAAK,KAAL,GAAa,KAAb;AACA,UAAI,SAAS,KAAK,IAAL,CAAU,IAAV,EAAb;AACA,WAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAA3B;AACA,UAAI,SAAS,KAAK,IAAL,CAAU,OAAV,EAAb;AACA,WAAK,MAAL,CAAY,MAAZ;AACA,gBAAU,KAAK,KAAL,CAAW,OAAO,CAAP,CAAS,KAAT,EAAX,EAA6B,MAA7B,CAAV;AACD,KAVwB,CAAzB;AAWD,GAzB6E,EAyB3E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAX;AACA,SAAK,IAAL,CAAU,MAAV,CAAiB,IAAI,GAAJ,CAAQ,OAAR,EAAiB,QAAjB,CAAjB,EAA6C,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACrE,WAAK,MAAL,CAAY,GAAZ;AACA,WAAK,OAAL,CAAa,EAAb;AACD,KAH4C,CAA7C;AAID,GA/B6E,EA+B3E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,QAAI,OAAO,IAAX;AACA,SAAK,IAAL,CAAU,MAAV,CACE,KAAK,KADP,EACc,IAAI,GAAJ,CAAQ,OAAR,EAAiB,QAAjB,CADd,EAC0C,OAAO,UAAU,GAAV,EAAe;AAC5D,WAAK,MAAL,CAAY,GAAZ;AACD,KAFuC,CAD1C;AAID,GArC6E,CAAhF;;AAwCA,MAAI,OAAO,QAAX,EAAqB;AACnB,aAAS,QAAT,CAAkB,4CAA4C,YAA9D,EAA4E,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACtG,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,4BAA0B,GAA/C,EAAoD,iBAApD,CAAX;;AAEA,WAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,WAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,WAAK,KAAL,CAAW,KAAK,MAAL,CAAY,EAAZ,EAAgB,EAAE,MAAM,EAAE,KAAK,KAAP,EAAR,EAAhB,EAA0C,EAAE,OAAO,IAAT,EAA1C,CAAX,EACW,CADX;AAEA,WAAK,MAAL,CAAY,EAAZ,EAAgB,EAAE,MAAM,EAAE,KAAK,MAAP,EAAR,EAAhB,EAA2C,EAAE,OAAO,IAAT,EAA3C,EAA4D,UAAU,GAAV,EAAe,MAAf,EAAuB;AACjF,aAAK,OAAL,CAAa,GAAb;AACA,aAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA;AACD,OAJD;AAKD,KAbD;;AAeA,aAAS,QAAT,CAAkB,4CAA4C,YAA9D,EAA4E,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACtG,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,4BAA0B,GAA/C,EAAoD,iBAApD,CAAX;;AAEA,WAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,WAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,WAAK,KAAL,CAAW,KAAK,MAAL,CAAY,EAAZ,CAAX,EAA4B,CAA5B;AACA,WAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,WAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,WAAK,MAAL,CAAY,EAAZ,EAAgB,UAAU,GAAV,EAAe,MAAf,EAAuB;AACrC,aAAK,OAAL,CAAa,GAAb;AACA,aAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA;AACD,OAJD;AAKD,KAdD;;AAiBA,aAAS,QAAT,CAAkB,6CAA6C,YAA/D,EAA6E,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACvG,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,sCAAoC,GAAzD,EAA8D,iBAA9D,CAAX;;AAEA,WAAK,KAAL,CAAW;AACT;AAAQ,4BAAY;AAAC,mBAAO,IAAP;AAAa;;AAAlC;AAAA,WADS;AAET;AAAQ,4BAAY;AAAC,mBAAO,IAAP;AAAa;;AAAlC;AAAA;AAFS,OAAX;;AAKA,UAAI,MAAM,KAAK,MAAL,CAAY,EAAC,GAAG,EAAJ,EAAQ,KAAK,IAAb,EAAZ,CAAV;AACA,UAAI,MAAM,KAAK,MAAL,CAAY,EAAC,GAAG,EAAJ,EAAQ,KAAK,IAAb,EAAZ,CAAV;;AAEA,UAAI,QAAQ,EAAZ;AACA,UAAI,gBAAgB,EAApB;AACA,UAAI,UAAU,SAAV,OAAU,CAAU,IAAV,EAAgB,KAAhB,EAAuB;AACnC,YAAI,SAAS,KAAK,IAAL,CAAU,KAAV,EAAiB,cAAjB,CAAgC;;;;AAI3C;AAAuB,6CAAY;AACjC,oBAAM,IAAN,IAAe,QAAQ,KAAR,GAAgB,MAAM,IAAN,IAAc,CAA9B,GAAkC,CAAjD;AACD;;AAFD;AAAA;AAJ2C,SAAhC,CAAb;AAQA,sBAAc,IAAd,CAAmB,MAAnB;AACD,OAVD;;AAYA,cAAQ,KAAR,EAAe,EAAf;AACA,cAAQ,WAAR,EAAqB,GAArB;AACA,cAAQ,YAAR,EAAsB,EAAC,KAAK,GAAN,EAAW,GAAG,IAAd,EAAtB;AACA,cAAQ,WAAR,EAAqB,GAArB;AACA,cAAQ,YAAR,EAAsB,EAAC,KAAK,GAAN,EAAW,GAAG,IAAd,EAAtB;AACA,cAAQ,SAAR,EAAmB,EAAC,KAAK,EAAC,KAAK,CAAC,GAAD,EAAM,GAAN,CAAN,EAAN,EAAnB;;AAEA,UAAI,0BAA0B,SAA1B,uBAA0B,CAAU,CAAV,EAAa;AACzC,gBAAQ,EAAR;AACA,mBAAW,CAAX;AACD,OAHD;;;;AAOA,8BAAwB,YAAY;AAClC,aAAK,MAAL,CAAY,GAAZ,EAAiB,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAAjB;AACD,OAFD;AAGA,WAAK,KAAL,CACE,KADF,EAEE,EAAC,KAAK,CAAN,EAAS,WAAW,CAApB,EAAuB,YAAY,CAAnC,EAAsC,SAAS,CAA/C,EAFF;;;;AAMA,8BAAwB,YAAY;AAClC,aAAK,MAAL,CAAY,EAAC,KAAK,GAAN,EAAW,GAAG,IAAd,EAAZ,EAAiC,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAAjC;AACD,OAFD;AAGA,WAAK,KAAL,CACE,KADF,EAEE,EAAC,KAAK,CAAN,EAAS,WAAW,CAApB,EAAuB,YAAY,CAAnC,EAAsC,SAAS,CAA/C,EAFF;;;AAKA,8BAAwB,YAAY;AAClC,aAAK,MAAL,CAAY,EAAC,KAAK,EAAC,KAAK,CAAC,GAAD,EAAM,GAAN,CAAN,EAAN,EAAyB,GAAG,IAA5B,EAAZ,EAA+C,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAA/C;AACD,OAFD;AAGA,WAAK,KAAL,CACE,KADF,EAEE,EAAC,KAAK,CAAN,EAAS,WAAW,CAApB,EAAuB,YAAY,CAAnC,EAAsC,WAAW,CAAjD,EAAoD,YAAY,CAAhE;AACC,iBAAS,CADV,EAFF;;AAKA,QAAE,IAAF,CAAO,aAAP,EAAsB,UAAU,CAAV,EAAa;AAAC,UAAE,IAAF;AAAU,OAA9C;AACA;AACD,KAnED;;AAqEA,aAAS,GAAT,CAAa,0CAA0C,YAAvD,EAAqE,UAAU,IAAV,EAAgB;AACnF,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,2CAAyC,GAA9D,EAAmE,iBAAnE,CAAX;;AAEA,WAAK,MAAL,CAAY,EAAC,KAAK,QAAN,EAAZ;AACA,UAAI,GAAJ;AACA,UAAI;AACF,aAAK,MAAL,CAAY,EAAC,KAAK,QAAN,EAAZ,EAA6B,EAAC,KAAK,QAAN,EAA7B;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,cAAM,CAAN;AACD;AACD,WAAK,MAAL,CAAY,GAAZ;AACA,WAAK,MAAL,CAAY,eAAe,UAAf,CAA0B,sBAA1B,CAAiD,GAAjD,CAAZ;;AAEA,UAAI;AACF,aAAK,MAAL,CAAY,EAAC,KAAK,QAAN,EAAZ;AACD,OAFD,CAEE,OAAO,CAAP,EAAU;AACV,cAAM,CAAN;AACD;AACD,WAAK,MAAL,CAAY,GAAZ;;AAEA,WAAK,OAAL,CAAa,eAAe,UAAf,CAA0B,sBAA1B,CAAiD,GAAjD,CAAb;AACD,KAtBD;AAwBD,G;;;;AAID,IAAE,IAAF,CAAO,OAAO,QAAP,GAAkB,CAAC,IAAD,EAAO,KAAP,CAAlB,GAAkC,CAAC,IAAD,CAAzC,EAAiD,UAAU,SAAV,EAAqB;AACpE,MAAE,IAAF,CAAO,CAAC,IAAD,EAAO,KAAP,CAAP,EAAsB,UAAU,SAAV,EAAqB;AACzC,QAAE,IAAF,CAAO,CAAC,IAAD,EAAO,KAAP,CAAP,EAAsB,UAAU,mBAAV,EAA+B;AACnD,iBAAS,GAAT,CAAa,uBAAuB,YAAY,SAAZ,GAAwB,EAA/C,IAAqD,QAArD,IAAiE,YAAY,YAAZ,GAA2B,EAA5F,KAAmG,sBAAsB,qBAAtB,GAA8C,EAAjJ,IAAuJ,IAAvJ,GAA8J,YAA3K,EAAyL,UAAU,IAAV,EAAgB;AACvM,cAAI,MAAM,KAAK,KAAL,EAAV;AACA,cAAI,UAAU,iBAAd;;;AAGA,cAAI,UAAU,aAAc,CAAE,SAAF,IAAe,mBAA3C;AACA,cAAI,SAAJ,EACE,UAAU,EAAE,MAAF,CAAS,EAAT,EAAa,iBAAb,EAAgC,EAAE,YAAY,IAAd,EAAhC,CAAV;AACF,cAAI,OAAO,IAAI,MAAM,UAAV,CACT,gCAA8B,GAA9B,IACG,YAAY,UAAZ,GAAyB,EAD5B,KAEG,YAAY,aAAZ,GAA4B,EAF/B,KAGG,sBAAsB,UAAtB,GAAmC,EAHtC,IAG4C,EAJnC,EAKT,OALS,CAAX;AAOA,cAAI,mBAAJ,EACE,OAAO,KAAK,WAAZ;;AAEF,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,KAAK,KAAN,EAAtC,CAAd;AACA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,MAAL,CAAY,QAAQ,UAApB;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,KAAK,KAAN,EAAa,KAAK,QAAQ,UAA1B,EAAD,CAAnD;;AAEA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,KAAK,KAAN,EAAtC,CAAd;AACA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,KAAK,KAAN,EAAa,KAAK,QAAQ,UAA1B,EAAD,CAAnD;;AAEA,eAAK,MAAL,CAAY,EAAZ;;;;AAIA,cAAI,KAAK,IAAI,MAAM,QAAV,EAAT;AACA,cAAI,KAAK,IAAI,MAAM,QAAV,EAAT;AACA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,EAAN,EAAxB,EAAmC,EAAC,KAAK,EAAN,EAAnC,CAAd;AACA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,MAAL,CAAY,QAAQ,UAApB;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,KAAK,EAAN,EAAU,KAAK,QAAQ,UAAvB,EAAD,CAAnD;;AAEA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,EAAN,EAAxB,EAAmC,EAAC,KAAK,EAAN,EAAnC,CAAd;AACA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,KAAK,EAAN,EAAU,KAAK,QAAQ,UAAvB,EAAD,CAAnD;;AAEA,eAAK,MAAL,CAAY,EAAZ;;;;AAIA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,MAAM,OAAP,EAAxB,EAAyC,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAAzC,CAAd;AACA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,MAAL,CAAY,QAAQ,UAApB;AACF,cAAI,UAAU,QAAQ,UAAtB;AACA,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,OAA7B,EAAD,CAAnD;;AAEA,eAAK,MAAL,CAAY,YAAY;;AAEtB,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,MAAM,OAAP,EAAxB,EAAyC,EAAC,OAAO,EAAC,KAAK,CAAN,EAAR,EAAzC;AACD,WAHD;;AAMA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,MAAM,OAAP,EAAxB,EAAyC,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAAzC,CAAd;AACA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB;AACG,iBAAK,QAAQ,UADhB,EAAD,CAAnD;;AAGA,cAAI,UAAU,KAAK,MAAL,CAAY,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAZ,CAAd;AACA,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,OAA7B,EAAD,EACG,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,OAA7B,EADH,CAAnD;;;AAIA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,CAAN,EAAxB,EACO,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP;AACC,0BAAc,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EADf,EADP,EAGO,EAAC,OAAO,IAAR,EAHP,CAAd;AAIA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EAAmD,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EAAD,EACG,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EADH,CAAnD;;;AAIA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,CAAN,EAAxB,EACO,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP;AACC,0BAAc,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EADf,EADP,EAGO,EAAC,OAAO,IAAR,EAHP,CAAd;AAIA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,MAAL,CAAY,QAAQ,UAApB;AACF,cAAI,SAAS,QAAQ,UAArB;AACA,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EACe,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EAAD,EACC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EADD,EAEC,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EAAuB,KAAK,CAA5B,EAA+B,KAAK,MAApC,EAFD,CADf;;;AAMA,cAAI,UAAU,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,MAAM,OAAP,EAAxB,EACO,EAAC,MAAM,OAAP,EADP,EAEO,EAAC,YAAY,OAAb,EAFP,CAAd;AAGA,eAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,KAAL,CAAW,QAAQ,UAAnB,EAA+B,OAA/B;AACF,yBAAe,IAAf,EAAqB,OAArB,EAA8B,KAAK,IAAL,GAAY,KAAZ,EAA9B,EACe,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EAAD,EACC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EADD,EAEC,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EAAuB,KAAK,CAA5B,EAA+B,KAAK,MAApC,EAFD,EAGC,EAAC,MAAM,OAAP,EAAgB,KAAK,OAArB,EAHD,CADf;AAKA,eAAK,MAAL,CAAY,KAAK,OAAL,CAAa,OAAb,CAAZ;AACA,eAAK,OAAL,CAAa,KAAK,OAAL,CAAa,MAAb,CAAb;;;;AAIA,cAAI,WAAW,OAAO,IAAP,EAAa,SAAb,EACO,EAAC,KAAK,CAAC,EAAC,MAAM,OAAP,EAAD,EAAkB,EAAC,MAAM,OAAP,EAAlB,CAAN,EADP,EAEO,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAFP,EAEyB,EAAC,OAAO,IAAR,EAFzB,CAAf;AAGA,eAAK,KAAL,CAAW,SAAS,cAApB,EAAoC,CAApC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,OAAL,CAAa,SAAS,UAAtB;AACF,yBAAe,IAAf,EAAqB,OAArB,EACe,CAAC,KAAK,OAAL,CAAa,EAAC,MAAM,OAAP,EAAb,CAAD,EAAgC,KAAK,OAAL,CAAa,EAAC,MAAM,OAAP,EAAb,CAAhC,CADf,EAEe,CAAC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EAAD,EACC,EAAC,MAAM,OAAP,EAAgB,KAAK,CAArB,EAAwB,KAAK,CAA7B,EAAgC,KAAK,OAArC,EADD,CAFf;;AAMA,cAAI,WAAW,OACb,IADa,EACP,SADO,EAEb;AACE,kBAAM,SADR;AAEE,iBAAK,CAAC,EAAE,KAAK,CAAP,EAAD,EAAY,EAAE,KAAK,CAAP,EAAZ;AAFP,WAFa,EAMb,EAAE,MAAM,EAAE,KAAK,CAAP,EAAR,EANa,CAAf;AAQA,eAAK,KAAL,CAAW,SAAS,cAApB,EAAoC,CAApC;AACA,cAAI,CAAE,OAAN,EACE,KAAK,MAAL,CAAY,SAAS,UAArB;AACF,cAAI,YAAY,SAAS,UAAzB;AACA,yBAAe,IAAf,EAAqB,OAArB,EACe,KAAK,IAAL,CAAU,EAAE,MAAM,SAAR,EAAV,EAA+B,KAA/B,EADf,EAEe,CAAC,EAAC,MAAM,SAAP,EAAkB,KAAK,CAAvB,EAA0B,KAAK,SAA/B,EAAD,CAFf;AAGD,SAjJD;AAkJD,OAnJD;AAoJD,KArJD;AAsJD,GAvJD;;AAyJA,MAAI,sBAAsB,SAAtB,mBAAsB,CAAU,UAAV,EAAsB,mBAAtB,EACU,SADV,EACqB,YADrB,EACmC;AAC3D,WAAO,6BACJ,YAAY,SAAZ,GAAwB,EADpB,IAEL,SAFK,IAGJ,aAAa,eAAb,GAA+B,EAH3B,KAIJ,sBAAsB,sBAAtB,GAA+C,EAJ3C,IAKL,YALF;AAMD,GARD;;;;;;;;;AAiBA,IAAE,IAAF,CAAO,OAAO,QAAP,GAAkB,CAAC,KAAD,CAAlB,GAA4B,CAAC,IAAD,EAAO,KAAP,CAAnC,EAAkD,UAAU,UAAV,EAAsB;AACtE,MAAE,IAAF,CAAO,aAAa,CAAC,KAAD,CAAb,GAAuB,CAAC,IAAD,EAAO,KAAP,CAA9B,EAA6C,UAAU,mBAAV,EAA+B;AAC1E,QAAE,IAAF,CAAO,CAAC,IAAD,EAAO,KAAP,CAAP,EAAsB,UAAU,SAAV,EAAqB;AACzC,iBAAS,QAAT,CAAkB,oBAAoB,UAApB,EAAgC,mBAAhC,EAAqD,SAArD,EAAgE,YAAhE,CAAlB,EAAiG,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AAC3H,cAAI,IAAJ;AACA,cAAI,MAAM,KAAK,KAAL,EAAV;AACA,cAAI,WAAW,gCAA8B,GAA9B,IACR,YAAY,UAAZ,GAAyB,EADjB,KAER,aAAa,WAAb,GAA2B,EAFnB,KAGR,sBAAsB,UAAtB,GAAmC,EAH3B,CAAf;;AAKA,cAAI,QAAQ,SAAR,KAAQ,GAAY;;AAEtB,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,KAAK,KAAN,EAAa,KAAK,KAAlB,EAAtC,EAAgE,KAAhE;AACD,WAHD;;AAKA,cAAI,UAAJ,EAAgB;AACd,mBAAO,IAAP,CAAY,0BAAZ,EAAwC,QAAxC,EAAkD,iBAAlD;AACA,mBAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,EAA+B,iBAA/B,CAAP;AACA,mBAAO,SAAP,CAAiB,OAAO,QAAxB,EAAkC,KAAlC;AACD,WAJD,MAIO;AACL,gBAAI,OAAO,EAAE,KAAF,CAAQ,iBAAR,CAAX;AACA,gBAAI,OAAO,QAAX,EACE,KAAK,UAAL,GAAkB,IAAlB;AACF,mBAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,EAA+B,IAA/B,CAAP;AACA,gBAAI,mBAAJ,EACE,OAAO,KAAK,WAAZ;AACH;;AAED,cAAI,OAAJ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;AACA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EAAiB;AACf,mBAAK,MAAL,CAAY,QAAQ,UAApB;AACA,mBAAK,KAAL,CAAW,QAAQ,UAAnB,EAA+B,KAA/B;AACD;AACD,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,KAAN,EAAa,KAAK,KAAlB,EAAD,CAArD;AACA,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,KAAK,KAAN,EAAtC,EAAoD,KAApD;AACD,WATD;;AAWA,cAAI,CAAE,UAAN,EAAkB;AAChB;AACD;;AAED,cAAI,EAAJ,EAAQ,EAAR,EAAY,OAAZ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;AACA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,KAAN,EAAa,KAAK,QAAQ,UAA1B,EAAD,CAArD;AACA,iBAAK,MAAL,CAAY,EAAC,KAAK,KAAN,EAAZ;AACA,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,EAArD;;;;AAIA,iBAAK,IAAI,MAAM,QAAV,EAAL;AACA,iBAAK,IAAI,MAAM,QAAV,EAAL;AACA,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,EAAN,EAAxB,EAAmC,EAAC,KAAK,EAAN,EAAU,KAAK,KAAf,EAAnC,EAA0D,KAA1D;AACD,WAdD;;AAgBA,cAAI,OAAJ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;AACA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EAAiB;AACf,mBAAK,MAAL,CAAY,QAAQ,UAApB;AACA,mBAAK,KAAL,CAAW,EAAX,EAAe,QAAQ,UAAvB;AACD;AACD,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,EAAN,EAAU,KAAK,KAAf,EAAD,CAArD;;AAEA,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,EAAN,EAAxB,EAAmC,EAAC,KAAK,EAAN,EAAnC,EAA8C,KAA9C;AACD,WAVD;;AAYA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,OAAf,EAAwB;AAClC,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,EAAN,EAAU,KAAK,QAAQ,UAAvB,EAAD,CAArD;;AAEA,iBAAK,MAAL,CAAY,EAAC,KAAK,EAAN,EAAZ;;;AAGA,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,OAAN,EAAxB,EAAwC,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAAxC,EAA0D,KAA1D;AACD,WAVD;;AAYA,cAAI,OAAJ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;AACA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EAAiB;AACf,mBAAK,MAAL,CAAY,QAAQ,UAApB;AACA,mBAAK,KAAL,CAAW,QAAQ,UAAnB,EAA+B,OAA/B;AACD;AACD,gBAAI,UAAU,QAAQ,UAAtB;AACA,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,CAAN,EAAS,KAAK,OAAd,EAAD,CAArD;;AAEA,gBAAI,CAAE,OAAO,QAAT,IAAqB,mBAAzB,EAA8C;;;;AAI5C,qBAAO,aAAP,CAAqB,CAArB;AACA,qBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,OAAN,EAAxB,EAAwC,EAAC,OAAO,EAAC,KAAK,CAAN,EAAR,EAAxC,EAA2D,UAAU,GAAV,EAAe;AACxE,oBAAI,EAAG,OAAO,QAAP,IAAmB,mBAAtB,CAAJ,EACE,KAAK,MAAL,CAAY,GAAZ;AACF,uBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,OAAN,EAAxB,EAAwC,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAAxC,EAA0D,KAA1D;AACD,eAJD;AAKD,aAVD,MAUO;;;;;;AAML,qBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,OAAN,EAAxB,EAAwC,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP,EAAxC,EAA0D,KAA1D;AACD;AACF,WA5BD;;AA8BA,cAAI,OAAJ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;AACA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAD,CAArD;;AAEA,gBAAI,UAAU,KAAK,MAAL,CAAY,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAZ,CAAd;AACA,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAD,EACC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EADD,CAArD;;;;;AAMA,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,OAAN,EAAxB,EACO,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP;AACC,4BAAc,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EADf,EADP,EAGO,EAAC,OAAO,IAAR,EAHP,EAGsB,KAHtB;AAID,WAlBD;;AAoBA,cAAI,OAAJ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;AACA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EACE,KAAK,OAAL,CAAa,QAAQ,UAArB;AACF,2BAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EAAqD,CAAC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAD,EACC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAuB,KAAK,CAA5B,EADD,CAArD;;;AAIA,mBAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,MAAN,EAAxB,EACO,EAAC,MAAM,EAAC,KAAK,CAAN,EAAP;AACC,4BAAc,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EADf,EADP,EAGO,EAAC,OAAO,IAAR,EAHP,EAGsB,KAHtB;AAKD,WAdD;;AAgBA,cAAI,OAAJ;AACA,cAAI,QAAQ,SAAR,KAAQ,CAAU,GAAV,EAAe,MAAf,EAAuB;AACjC,sBAAU,MAAV;;AAEA,iBAAK,KAAL,CAAW,QAAQ,cAAnB,EAAmC,CAAnC;AACA,gBAAI,CAAE,SAAN,EAAiB;AACf,mBAAK,MAAL,CAAY,QAAQ,UAApB;AACA,mBAAK,KAAL,CAAW,QAAQ,UAAnB,EAA+B,MAA/B;AACD;AACD,gBAAI,SAAS,QAAQ,UAArB;AACA,2BAAe,IAAf,EAAqB,SAArB,EAAiC,KAAK,IAAL,GAAY,KAAZ,EAAjC,EACe,CAAC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAD,EACC,EAAC,KAAK,OAAN,EAAe,KAAK,CAApB,EAAuB,KAAK,CAA5B,EADD,EAEC,EAAC,MAAM,MAAP,EAAe,KAAK,CAApB,EAAuB,KAAK,CAA5B,EAA+B,KAAK,MAApC,EAFD,CADf;AAIA;AACD,WAdD;AAeD,SAzKD;AA0KD,OA3KD;AA4KD,KA7KD;AA8KD,GA/KD;;AAiLA,MAAI,OAAO,QAAX,EAAqB;AACnB,aAAS,QAAT,CAAkB,qEAAqE,YAAvF,EAAqG,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AAC/H,UAAI,IAAJ;AACA,UAAI,MAAM,KAAK,KAAL,EAAV;AACA,UAAI,WAAW,gCAA8B,GAA7C;AACA,aAAO,IAAP,CAAY,0BAAZ,EAAwC,QAAxC,EAAkD,iBAAlD;AACA,aAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,EAA+B,iBAA/B,CAAP;AACA,aAAO,SAAP,CAAiB,OAAO,QAAxB,EAAkC,YAAY;AAC5C,aAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,aAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ;AACA,aAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ,EAA4B,EAAE,MAAM,EAAE,KAAK,CAAP,EAAR,EAA5B,EAAkD,EAAE,OAAO,IAAT,EAAlD,EAAmE,UAAU,GAAV,EAAe,MAAf,EAAuB;AACxF,eAAK,OAAL,CAAa,GAAb;AACA,eAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA,eAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ,EAA4B,EAAE,KAAK,KAAP,EAAc,KAAK,CAAnB,EAA5B,EAAoD,UAAU,GAAV,EAAe,MAAf,EAAuB;AACzE,iBAAK,OAAL,CAAa,GAAb;AACA,iBAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA,iBAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ,EAA4B,EAAE,MAAM,EAAE,KAAK,CAAP,EAAR,EAA5B,EAAkD,UAAU,GAAV,EAAe,MAAf,EAAuB;AACvE,mBAAK,OAAL,CAAa,GAAb;AACA,mBAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA,mBAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ,EAA4B,UAAU,GAAV,EAAe,MAAf,EAAuB;AACjD,qBAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA,qBAAK,MAAL,CAAY,EAAE,KAAK,KAAP,EAAZ,EAA4B,UAAU,GAAV,EAAe,MAAf,EAAuB;AACjD,uBAAK,KAAL,CAAW,MAAX,EAAmB,CAAnB;AACA;AACD,iBAHD;AAID,eAND;AAOD,aAVD;AAWD,WAdD;AAeD,SAlBD;AAmBD,OAtBD;AAuBD,KA7BD;AA8BD;;;;AAID,MAAI,OAAO,QAAX,EAAqB;AACnB,MAAE,IAAF,CAAO,CAAC,IAAD,EAAO,KAAP,CAAP,EAAsB,UAAU,SAAV,EAAqB;AACzC,eAAS,QAAT,CAAkB,uBAAuB,YAAY,SAAZ,GAAwB,EAA/C,IAAqD,oBAArD,GAA4E,YAA9F,EAA4G,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACtI,YAAI,MAAM,KAAK,KAAL,EAAV;AACA,+BAAuB,IAAI,MAAM,UAAV,CAAqB,mBAAmB,cAAnB,GAAoC,GAAzD,EAA8D,iBAA9D,CAAvB;AACA,YAAI,IAAI,EAAR;AACA,eAAO,OAAO,UAAP,CAAkB,eAAlB,CAAkC,gBAAlC,CAAP;AACA,UAAE,gBAAF,IAAsB,UAAU,GAAV,EAAe,SAAf,EAA0B,OAA1B,EAAmC;AACvD,+BAAqB,oBAArB,EAA2C,SAA3C,EAAsD,IAAtD;AACD,SAFD;AAGA,eAAO,OAAP,CAAe,CAAf;AACA,eAAO,IAAP,CAAY,gBAAZ,EAA8B,GAA9B,EAAmC,SAAnC,EAA8C,iBAA9C,EAAiE,UAAU,GAAV,EAAe,MAAf,EAAuB;AACtF,eAAK,OAAL,CAAa,GAAb;AACA;AACD,SAHD;AAID,OAbD;AAcD,KAfD;AAgBD;;AAED,IAAE,IAAF,CAAO,OAAO,QAAP,GAAkB,CAAC,IAAD,EAAO,KAAP,CAAlB,GAAkC,CAAC,IAAD,CAAzC,EAAiD,UAAU,SAAV,EAAqB;AACpE,MAAE,IAAF,CAAO,CAAC,IAAD,EAAO,KAAP,CAAP,EAAsB,UAAU,SAAV,EAAqB;AACzC,eAAS,GAAT,CAAa,uBAAuB,YAAY,SAAZ,GAAwB,EAA/C,IAAqD,cAArD,IAAuE,YAAY,YAAZ,GAA2B,EAAlG,IAAwG,IAAxG,GAA+G,YAA5H,EAA0I,UAAU,IAAV,EAAgB;AACxJ,YAAI,MAAM,KAAK,KAAL,EAAV;AACA,YAAI,UAAU,iBAAd;AACA,YAAI,SAAJ,EACE,UAAU,EAAE,MAAF,CAAS,EAAT,EAAa,iBAAb,EAAgC,EAAE,YAAY,IAAd,EAAhC,CAAV;AACF,YAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,sCAAoC,GAAzD,EAA8D,OAA9D,CAAX;;AAEA,YAAI,GAAJ;AACA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAAtC,CAAN;AACA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,YAAI,CAAE,SAAN,EACE,KAAK,KAAL,CAAW,IAAI,UAAf,EAA2B,KAA3B;AACF,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,KAAK,KAAN,EAAa,GAAG,CAAhB,EAAD,CADf;;AAGA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAAtC,CAAN;AACA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,YAAI,CAAE,SAAN,EACE,KAAK,OAAL,CAAa,IAAI,UAAjB;AACF,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,KAAK,KAAN,EAAa,GAAG,CAAhB,EAAD,CADf;;AAGA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,KAAN,EAAxB,EAAsC,EAAC,MAAM,EAAC,GAAG,CAAJ,EAAP,EAAtC,CAAN;AACA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,YAAI,CAAE,SAAN,EACE,KAAK,KAAL,CAAW,IAAI,UAAf,EAA2B,KAA3B;AACF,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,KAAK,KAAN,EAAa,GAAG,CAAhB,EAAD,EACC,EAAC,KAAK,KAAN,EAAa,GAAG,CAAhB,EADD,CADf;;AAIA,aAAK,MAAL,CAAY,EAAZ;AACA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,MAAN,EAAxB,EAAuC,EAAC,GAAG,CAAJ,EAAvC,CAAN;;AAEA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,YAAI,OAAO,IAAI,UAAf;AACA,YAAI,SAAJ,EAAe;AACb,iBAAO,KAAK,OAAL,GAAe,GAAtB;AACD;;;;;;AAMD,aAAK,KAAL,CAAW,IAAX,EAAiB,MAAjB;AACA,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EAAD,CADf;;;AAIA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,MAAN,EAAxB,EAAuC,EAAC,KAAK,MAAN,EAAc,GAAG,CAAjB,EAAvC,CAAN;AACA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,YAAI,CAAE,SAAN,EACE,KAAK,KAAL,CAAW,IAAI,UAAf,EAA2B,MAA3B;AACF,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EAAD,EACC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EADD,CADf;;;AAKA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,MAAN,EAAxB,EAAuC,EAAC,GAAG,CAAJ,EAAvC,CAAN;AACA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,aAAK,OAAL,CAAa,IAAI,UAAjB;AACA,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EAAD,EACC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EADD,CADf;;;AAKA,cAAM,OAAO,IAAP,EAAa,SAAb,EAAwB,EAAC,KAAK,MAAN,EAAxB,EAAuC,EAAC,KAAK,MAAN,EAAc,GAAG,CAAjB,EAAvC,CAAN;AACA,aAAK,KAAL,CAAW,IAAI,cAAf,EAA+B,CAA/B;AACA,aAAK,OAAL,CAAa,IAAI,UAAjB;AACA,uBAAe,IAAf,EAAqB,SAArB,EAAgC,KAAK,IAAL,GAAY,KAAZ,EAAhC,EACe,CAAC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EAAD,EACC,EAAC,GAAG,CAAJ,EAAO,KAAK,MAAZ,EADD,CADf;AAID,OAxED;AAyED,KA1ED;AA2ED,GA5ED;AA8EC,CA93DD,E;;AAg4DA,SAAS,GAAT,CAAa,mCAAb,EAAkD,UAAU,IAAV,EAAgB;AAChE,OAAK,KAAL,CAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,EAAC,GAAG,QAAJ,EAAlC,CAAX,EACW,EAAC,GAAG,EAAC,QAAQ,MAAT,EAAiB,UAAU,IAA3B,EAAJ,EADX;AAEA,OAAK,KAAL,CAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,EAAC,GAAG,EAAC,QAAQ,QAAT,EAAJ,EAAlC,CAAX,EACW,EAAC,GAAG,EAAC,QAAQ,MAAT,EAAiB,UAAU,IAA3B,EAAJ,EADX;AAEA,OAAK,KAAL,CAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,EAAC,GAAG,MAAJ,EAAlC,CAAX,EACW,EAAC,GAAG,EAAC,QAAQ,MAAT,EAAJ,EADX;AAEA,OAAK,KAAL,CAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,EAAC,GAAG,EAAC,QAAQ,MAAT,EAAJ,EAAlC,CAAX,EACW,EAAC,GAAG,EAAC,QAAQ,MAAT,EAAJ,EADX;AAEA,OAAK,KAAL,CAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,KAAlC,CAAX,EACW,EAAC,KAAK,KAAN,EADX;;AAGA,OAAK,KAAL,CACE,MAAM,UAAN,CAAiB,gBAAjB,CACE,EAAC,OAAO,CACN,EAAC,GAAG,IAAJ,EADM,EAEN,EAAC,GAAG,IAAJ,EAFM,EAGN,EAAC,GAAG,GAAJ,EAHM,EAIN,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAJ,EAJM,CAAR,EADF,CADF,EASE,EAAC,OAAO,CACN,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAJ,EADM,EAEN,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAJ,EAFM,EAGN,EAAC,GAAG,GAAJ,EAHM,EAIN,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAJ,EAJM,CAAR,EATF;;AAiBA,OAAK,KAAL,CACE,MAAM,UAAN,CAAiB,gBAAjB,CACE,EAAC,OAAO,CACN,EAAC,QAAQ,CACP,EAAC,GAAG,KAAJ,EADO,EAEP,EAAC,GAAG,IAAJ,EAFO,EAGP,EAAC,GAAG,EAAC,QAAQ,KAAT,EAAJ,EAHO,EAIP,EAAC,GAAG,EAAC,QAAQ,QAAT,EAAmB,UAAU,GAA7B,EAAJ,EAJO,E;AAKP,QAAC,GAAG,EAAC,QAAQ,GAAT,EAAc,UAAU,GAAxB,EAAJ,EALO,E;AAMP,QAAC,GAAG,EAAC,QAAQ,IAAT,EAAe,UAAU,GAAzB,EAAJ,E;AANO,OAAT,EADM,EASN,EAAC,QAAQ,CACP,EAAC,GAAG,IAAJ,EADO,EAEP,EAAC,GAAG,KAAJ,EAFO,EAGP,EAAC,GAAG,EAAC,QAAQ,KAAT,EAAJ,EAHO;;AAKP,QAAC,GAAG,EAAC,QAAQ,KAAT,EAAgB,UAAU,EAA1B,EAAJ,EALO,CAAT,EATM,CAAR,EADF,CADF,EAoBE,EAAC,OAAO,CACN,EAAC,QAAQ,CACP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAe,UAAU,GAAzB,EAAJ,EADO,EAEP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAJ,EAFO,EAGP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAe,UAAU,GAAzB,EAAJ,EAHO,EAIP,EAAC,GAAG,EAAC,QAAQ,QAAT,EAAmB,UAAU,GAA7B,EAAJ,EAJO,EAKP,EAAC,GAAG,EAAC,QAAQ,GAAT,EAAc,UAAU,GAAxB,EAAJ,EALO,EAMP,EAAC,GAAG,EAAC,QAAQ,GAAT,EAAc,UAAU,GAAxB,EAAJ,EANO,CAAT,EADM,EASN,EAAC,QAAQ,CACP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAJ,EADO,EAEP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAe,UAAU,GAAzB,EAAJ,EAFO,EAGP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAe,UAAU,GAAzB,EAAJ,EAHO,EAIP,EAAC,GAAG,EAAC,QAAQ,IAAT,EAAe,UAAU,EAAzB,EAAJ,EAJO,CAAT,EATM,CAAR,EApBF;;AAsCA,MAAI,MAAM,IAAI,MAAM,QAAV,EAAV;AACA,OAAK,KAAL,CAAW,MAAM,UAAN,CAAiB,gBAAjB,CAAkC,GAAlC,CAAX,EACW,EAAC,KAAK,GAAN,EADX;AAED,CAtED;;AAwEA,eAAe,gCAAf,EAAiD,CAC/C,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,OAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,MAAI,OAAO,QAAX,EAAqB;AACnB,WAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C;AACA,WAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACF,CAP8C,EAO5C,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACzB,MAAI,cAAc,OAAO,UAAU,GAAV,EAAe,MAAf,EAAuB;AAC9C,SAAK,MAAL,CAAY,GAAZ;AACA,QAAI,MAAM,KAAK,OAAL,EAAV;AACA,SAAK,KAAL,CAAW,IAAI,IAAf,EAAqB,KAArB;AACD,GAJiB,CAAlB;AAKA,MAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,CAAX;AACA,OAAK,MAAL,CAAY,EAAC,KAAK,KAAN,EAAa,MAAM,KAAnB,EAAZ,EAAuC,OAAO,UAAU,IAAV,EAAgB,EAAhB,EAAoB;AAChE,SAAK,KAAL,CAAW,EAAX,EAAe,KAAf;AACA,QAAI,MAAM,KAAK,OAAL,EAAV;AACA,SAAK,KAAL,CAAW,IAAI,GAAf,EAAoB,KAApB;AACA,WAAO,aAAP,CAAqB,CAArB;AACA,SAAK,MAAL,CAAY,EAAC,KAAK,KAAN,EAAa,MAAM,KAAnB,EAAZ,EAAuC,WAAvC;AACD,GANsC,CAAvC;AAOD,CArB8C,CAAjD;;;AA0BA,SAAS,gBAAT,CAA2B,IAA3B,EAAiC,MAAjC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD;AACpD,MAAI,eAAe,KAAK,MAAL,CAAY,EAAC,MAAM,KAAP,EAAZ,EAA2B,OAAO,UAAU,IAAV,EAAgB,EAAhB,EAAoB;AACvE,SAAK,KAAL,CAAW,EAAX,EAAe,YAAf;AACA,QAAI,IAAI,KAAK,OAAL,CAAa,EAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAL6C,CAA3B,CAAnB;AAMD;;AAED,SAAS,gBAAT,CAA2B,IAA3B,EAAiC,MAAjC,EAAyC,IAAzC,EAA+C,KAA/C,EAAsD;AACpD,MAAI,WAAW,WAAW,KAA1B;;AAEA,OAAK,MAAL,CAAY,QAAZ,EAAsB,EAAC,MAAM,EAAC,MAAM,KAAP,EAAP,EAAtB,EAA6C,OAAO,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AAC1E,SAAK,KAAL,CAAW,OAAO,UAAlB,EAA8B,QAA9B;AACA,SAAK,KAAL,CAAW,OAAO,cAAlB,EAAkC,CAAlC;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,QAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAP4C,CAA7C;AAQD;;AAED,SAAS,wBAAT,CAAmC,IAAnC,EAAyC,MAAzC,EAAiD,IAAjD,EAAuD,KAAvD,EAA8D;AAC5D,MAAI,eAAe,KAAK,MAAL,CAAY,EAAC,MAAM,KAAP,EAAZ,EAA2B,OAAO,UAAU,IAAV,EAAgB,EAAhB,EAAoB;AACvE,SAAK,KAAL,CAAW,EAAX,EAAe,YAAf;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,EAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;;;AAGD,GAP6C,CAA3B,CAAnB;;AASA,OAAK,MAAL,CAAY,YAAZ,EAA0B,EAAC,MAAM,EAAC,MAAM,KAAP,EAAP,EAA1B,EAAiD,OAAO,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AAC9E,SAAK,KAAL,CAAW,OAAO,UAAlB,EAA8B,YAA9B;AACA,SAAK,KAAL,CAAW,OAAO,cAAlB,EAAkC,CAAlC;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,YAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAPgD,CAAjD;AAQD;;AAED,SAAS,mBAAT,CAA8B,IAA9B,EAAoC,MAApC,EAA4C,IAA5C,EAAkD,KAAlD,EAAyD;AACvD,SAAO,IAAP,CAAY,eAAZ,EAA6B,KAAK,KAAlC,EAAyC,EAAC,MAAM,KAAP,EAAzC,EAAwD,CAAxD,EAA2D,OAAO,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AACrF,SAAK,QAAL,CAAc,CAAC,aAAa,KAAK,KAAlB,KAA4B,EAA7B,EAAiC,MAA/C,EAAuD,CAAvD;AACA,QAAI,SAAS,aAAa,KAAK,KAAlB,EAAyB,KAAzB,CAAb;;AAEA,SAAK,KAAL,CAAW,IAAI,MAAf,EAAuB,CAAvB;AACA,SAAK,KAAL,CAAW,IAAI,CAAJ,CAAX,EAAmB,MAAnB;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,MAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAV0D,CAA3D;AAWD;;AAED,SAAS,mBAAT,CAA8B,IAA9B,EAAoC,MAApC,EAA4C,IAA5C,EAAkD,KAAlD,EAAyD;AACvD,MAAI,WAAW,WAAW,KAA1B;AACA,SAAO,IAAP,CAAY,cAAZ,EAA4B,KAAK,KAAjC,EAAwC,QAAxC,EAAkD,EAAC,MAAK,EAAC,MAAM,KAAP,EAAN,EAAlD,EAAwE,OAAO,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACrG,SAAK,KAAL,CAAW,OAAO,UAAlB,EAA8B,QAA9B;AACA,SAAK,KAAL,CAAW,OAAO,cAAlB,EAAkC,CAAlC;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,QAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAPuE,CAAxE;AAQD;;AAED,SAAS,2BAAT,CAAsC,IAAtC,EAA4C,MAA5C,EAAoD,IAApD,EAA0D,KAA1D,EAAiE;AAC/D,MAAI,KAAK,KAAK,MAAL,CAAY,EAAC,MAAM,KAAP,EAAZ,CAAT;;AAEA,MAAI,IAAI,KAAK,OAAL,CAAa,EAAb,CAAR;AACA,OAAK,QAAL,CAAc,IAAd,EAAoB,CAApB;AACA,OAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;;AAEA,SAAO,IAAP,CAAY,cAAZ,EAA4B,KAAK,KAAjC,EAAwC,EAAxC,EAA4C,EAAC,MAAK,EAAC,MAAM,KAAP,EAAN,EAA5C,EAAkE,OAAO,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AAC/F,SAAK,KAAL,CAAW,OAAO,cAAlB,EAAkC,CAAlC;AACA,SAAK,KAAL,CAAW,OAAO,UAAlB,EAA8B,SAA9B;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,EAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAPiE,CAAlE;AAQD;;AAED,SAAS,qBAAT,CAAgC,IAAhC,EAAsC,MAAtC,EAA8C,IAA9C,EAAoD,KAApD,EAA2D;AACzD,SAAO,IAAP,CAAY,eAAZ,EAA6B,KAAK,KAAlC,EAAyC,EAAC,MAAM,KAAP,EAAzC,EAAwD,CAAxD,EAA2D,OAAO,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AACrF,SAAK,QAAL,CAAc,CAAC,aAAa,KAAK,KAAlB,KAA4B,EAA7B,EAAiC,MAA/C,EAAuD,CAAvD;AACA,SAAK,KAAL,CAAW,IAAI,MAAf,EAAuB,CAAvB;;AAEA,SAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B,UAAI,SAAS,aAAa,KAAK,KAAlB,EAA0B,IAAI,KAAL,GAAc,CAAvC,CAAb;AACA,WAAK,KAAL,CAAW,IAAI,CAAJ,CAAX,EAAmB,MAAnB;;AAEA,UAAI,IAAI,KAAK,OAAL,CAAa,MAAb,CAAR;AACA,WAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,WAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD;AACF,GAZ0D,CAA3D;AAaD;;AAED,SAAS,mBAAT,CAA8B,IAA9B,EAAoC,MAApC,EAA4C,IAA5C,EAAkD,KAAlD,EAAyD;AACvD,SAAO,IAAP,CAAY,cAAZ,EAA4B,eAA5B,EAA6C,KAAK,KAAlD,EAAyD,EAAC,MAAM,KAAP,EAAzD,EAAwE,CAAxE,EAA2E,OAAO,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AACrG,SAAK,QAAL,CAAc,CAAC,aAAa,KAAK,KAAlB,KAA4B,EAA7B,EAAiC,MAA/C,EAAuD,CAAvD;AACA,QAAI,SAAS,aAAa,KAAK,KAAlB,EAAyB,KAAzB,CAAb;;AAEA,SAAK,KAAL,CAAW,IAAI,MAAf,EAAuB,CAAvB;AACA,SAAK,KAAL,CAAW,IAAI,CAAJ,CAAX,EAAmB,MAAnB;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,MAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAV0E,CAA3E;AAWD;;AAED,SAAS,oBAAT,CAA+B,IAA/B,EAAqC,MAArC,EAA6C,IAA7C,EAAmD,KAAnD,EAA0D;AACxD,SAAO,IAAP,CAAY,cAAZ,EAA4B,cAA5B,EAA4C,eAA5C,EAA6D,KAAK,KAAlE,EAAyE,EAAC,MAAM,KAAP,EAAzE,EAAwF,CAAxF,EAA2F,OAAO,UAAU,IAAV,EAAgB,GAAhB,EAAqB;AACrH,SAAK,QAAL,CAAc,CAAC,aAAa,KAAK,KAAlB,KAA4B,EAA7B,EAAiC,MAA/C,EAAuD,CAAvD;AACA,QAAI,SAAS,aAAa,KAAK,KAAlB,EAAyB,KAAzB,CAAb;;AAEA,SAAK,KAAL,CAAW,IAAI,MAAf,EAAuB,CAAvB;AACA,SAAK,KAAL,CAAW,IAAI,CAAJ,CAAX,EAAmB,MAAnB;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,MAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAV0F,CAA3F;AAWD;;AAED,SAAS,oBAAT,CAA+B,IAA/B,EAAqC,MAArC,EAA6C,IAA7C,EAAmD,KAAnD,EAA0D;AACxD,MAAI,WAAW,WAAW,KAA1B;AACA,SAAO,IAAP,CAAY,cAAZ,EAA4B,cAA5B,EAA4C,cAA5C,EAA4D,KAAK,KAAjE,EAAwE,QAAxE,EAAkF,EAAC,MAAK,EAAC,MAAM,KAAP,EAAN,EAAlF,EAAwG,OAAO,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACrI,SAAK,KAAL,CAAW,OAAO,UAAlB,EAA8B,QAA9B;AACA,SAAK,KAAL,CAAW,OAAO,cAAlB,EAAkC,CAAlC;;AAEA,QAAI,IAAI,KAAK,OAAL,CAAa,QAAb,CAAR;AACA,SAAK,MAAL,CAAY,EAAE,QAAF,CAAW,CAAX,CAAZ;AACA,SAAK,KAAL,CAAW,EAAE,IAAb,EAAmB,KAAnB;AACD,GAPuG,CAAxG;AAQD;;AAED,EAAE,IAAF,CAAQ,EAAC,kBAAkB,gBAAnB;AACC,oBAAkB,gBADnB;AAEC,uBAAqB,mBAFtB;AAGC,uBAAqB,mBAHtB;AAIC,+BAA6B,2BAJ9B;AAKC,wBAAsB,qBALvB;AAMC,uBAAqB,mBANtB;AAOC,wBAAsB,oBAPvB;AAQC,wBAAsB,oBARvB,EAAR,EAQsD,UAAU,EAAV,EAAc,IAAd,EAAoB;AAC1E,IAAE,IAAF,CAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR,EAAgB,UAAU,WAAV,EAAuB;AACvC,MAAE,IAAF,CAAQ,CAAC,CAAD,EAAI,CAAJ,CAAR,EAAgB,UAAU,eAAV,EAA2B;AAC3C,QAAE,IAAF,CAAQ,CAAC,QAAD,EAAW,OAAX,CAAR,EAA6B,UAAU,YAAV,EAAwB;;AAEnD,uBAAe,gDAAgD,IAAhD,GAAuD,IAAvD,GAA8D,WAA9D,GAA4E,kBAA5E,GAAiG,eAAjG,GAAmH,6BAAnH,GAAmJ,YAAlK,EAAgL,CAAE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACxM,cAAI,oBAAoB,EAAE,cAAc,YAAhB,EAAxB;;AAEA,cAAI,WAAW,KAAK,QAAL,GAAgB,EAA/B;AACA,eAAK,WAAL,GAAmB,EAAE,KAAF,CAAQ,eAAR,EAAyB,YAAY;AACtD,gBAAI,iBAAiB,kBAAkB,OAAO,EAAP,EAAvC;AACA,gBAAI,OAAO,QAAX,EAAqB;AACnB,qBAAO,IAAP,CAAY,0BAAZ,EAAwC,cAAxC,EAAwD,iBAAxD;AACA,qBAAO,SAAP,CAAiB,OAAO,cAAxB,EAAwC,QAAxC;AACA,uBAAS,IAAT,CAAc,UAAU,MAAV,EAAkB;AAAE,uBAAO,IAAP,CAAY,wBAAZ,EAAsC,cAAtC,EAAsD,OAAO,YAAY,CAAE,CAArB,CAAtD;AAAgF,eAAlH;AACD;;AAED,gBAAI,aAAa,IAAI,MAAM,UAAV,CAAqB,cAArB,EAAqC,iBAArC,CAAjB;AACA,gBAAI,OAAO,QAAX,EAAqB;AACnB,uBAAS,IAAT,CAAc,YAAY;AAAE,2BAAW,eAAX;AAA+B,eAA3D;AACD;AACD,wBAAY,cAAZ,IAA8B,UAA9B;AACA,mBAAO,UAAP;AACD,WAdkB,CAAnB;AAeD,SAnB+K,EAmB7K,UAAU,IAAV,EAAgB,MAAhB,EAAwB;;AAEzB,eAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,WAApB,EAAiC,GAAjC,EAAsC;AACpC,iBAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,eAApB,EAAqC,GAArC,EAA0C;AACxC,iBAAG,IAAH,EAAS,MAAT,EAAiB,KAAK,WAAL,CAAiB,CAAjB,CAAjB,EAAsC,CAAtC;AACD;AACF;AACF,SA1B+K,EA0B7K,UAAU,IAAV,EAAgB,MAAhB,EAAwB;;AAEzB,YAAE,IAAF,CAAO,KAAK,QAAZ,EAAsB,UAAS,OAAT,EAAkB;AACtC,oBAAQ,MAAR;AACD,WAFD;AAGD,SA/B+K,CAAhL;AAiCD,OAnCD;AAoCC,KArCD;AAsCC,GAvCD;AAwCC,CAjDD;;AAqDA,eAAe,mCAAf,EAAoD,CAClD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,cAAL,GAAsB,OAAO,EAAP,EAAtB;AACA,MAAI,OAAO,QAAX,EAAqB;AACnB,WAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,cAA7C;AACA,WAAO,SAAP,CAAiB,OAAO,KAAK,cAA7B,EAA6C,QAA7C;AACD;AACD,OAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,KAAK,cAA1B,CAAZ;AACA,MAAI;AACF,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,KAAK,EAAN,EAAU,GAAG,KAAb,EAAjB;AACA,SAAK,IAAL,CAAU,sCAAV;AACD,GAHD,CAGE,OAAO,CAAP,EAAU;;AAEX;AACD,OAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,KAAK,QAAN,EAAgB,GAAG,KAAnB,EAAjB,EAA4C,OAAO,UAAU,GAAV,EAAe,GAAf,EAAoB;AACrE,SAAK,KAAL,CAAW,GAAX,EAAgB,QAAhB;AACD,GAF2C,CAA5C;AAGD,CAlBiD,EAmBlD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,MAAI,OAAO,KAAK,IAAL,CAAU,IAAV,GAAiB,KAAjB,EAAX;AACA,OAAK,KAAL,CAAW,IAAX,EAAiB,CAAC,EAAC,KAAK,QAAN,EAAgB,GAAG,KAAnB,EAAD,CAAjB;AACD,CAvBiD,EAwBlD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,MAAI,OAAO,QAAX,EAAqB;AACnB,SAAK,IAAL,CAAU,WAAV,CAAsB,MAAtB,CAA6B,EAAC,KAAK,EAAN,EAAU,GAAG,KAAb,EAA7B;AACA,SAAK,KAAL,CAAW,KAAK,IAAL,CAAU,IAAV,GAAiB,KAAjB,GAAyB,MAApC,EAA4C,CAA5C;AACD;AACF,CA9BiD,CAApD;;AAkCA,IAAI,OAAO,QAAX,EAAqB;;AAEnB,iBAAe,2DAAf,EAA4E,CAC1E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,WAAO,MAAP,CAAc,kBAAd;AACA,SAAK,EAAL,GAAU,OAAO,EAAP,EAAV;AACA,QAAI,IAAI,KAAK,CAAL,GAAS,IAAI,MAAM,UAAV,CAAqB,qBAAqB,KAAK,EAA/C,CAAjB;AACA,MAAE,KAAF,CAAQ;AACN;AAAQ,0BAAY;AAAC,iBAAO,IAAP;AAAa;;AAAlC;AAAA,SADM;AAEN;AAAQ,0BAAY;AAAC,iBAAO,IAAP;AAAa;;AAAlC;AAAA,SAFM;AAGN;AAAQ,0BAAY;AAAC,iBAAO,IAAP;AAAa;;AAAlC;AAAA;AAHM,KAAR;AAKA,MAAE,MAAF,CAAS,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT;AACA,MAAE,MAAF,CAAS,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT;AACA,MAAE,MAAF,CAAS,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAT;AACA,WAAO,OAAP,CAAe,KAAK,EAApB,EAAwB,YAAY;AAClC,aAAO,EAAE,IAAF,CAAO,EAAC,GAAG,CAAJ,EAAP,CAAP;AACD,KAFD;;AAIA,SAAK,IAAL,GAAY,IAAI,OAAJ,CAAY,OAAO,WAAP,EAAZ,CAAZ;AACA,cAAU,MAAV,EAAkB,YAAY;AAC5B,aAAO,KAAK,IAAL,CAAU,MAAV,GAAmB,SAA1B;AACD,KAFD,EAEG,KAFH;AAGD,GAtByE,EAwB1E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,KAAK,IAAL,CAAU,MAAV,GAAmB,SAAvB,EAAkC;AAChC,WAAK,KAAL,GAAa,IAAI,MAAM,UAAV,CAAqB,qBAAqB,KAAK,EAA/C,EAAmD;AAC9D,oBAAY,KAAK;AAD6C,OAAnD,CAAb;AAGA,UAAI,MAAM,OAAO,UAAU,GAAV,EAAe;AAC9B,aAAK,OAAL,CAAa,GAAb;AACD,OAFS,CAAV;AAGA,WAAK,IAAL,CAAU,SAAV,CAAoB,KAAK,EAAzB,EAA6B;AAC3B,iBAAS,GADkB;AAE3B,iBAAS;AAFkB,OAA7B;AAID;AACF,GAtCyE,EAwC1E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,KAAK,KAAT,EAAgB;AACd,UAAI,WAAW,KAAK,KAAL,CAAW,IAAX,GAAkB,KAAlB,EAAf;AACA,WAAK,KAAL,CAAW,SAAS,MAApB,EAA4B,CAA5B;AACA,WAAK,KAAL,CAAW,SAAS,CAAT,EAAY,CAAvB,EAA0B,CAA1B;AACD;AACF,GA/CyE,EAiD1E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,CAAC,KAAK,KAAV,EACE;AACF,SAAK,KAAL,CAAW,MAAX,CAAkB,EAAC,GAAE,CAAH,EAAM,GAAE,CAAR,EAAlB;AACA,QAAI,WAAW,KAAK,KAAL,CAAW,IAAX,CAAgB,EAAC,GAAE,CAAH,EAAhB,EAAuB,KAAvB,EAAf;AACA,SAAK,KAAL,CAAW,SAAS,MAApB,EAA4B,CAA5B;AACA,SAAK,KAAL,CAAW,SAAS,CAAT,EAAY,CAAvB,EAA0B,CAA1B;AACD,GAzDyE,CAA5E;;AA4DA,iBAAe,8CAAf,EAA+D,CAC7D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,SAAK,EAAL,GAAU,OAAO,EAAP,EAAV;AACA,SAAK,CAAL,GAAS,IAAI,MAAM,UAAV,CAAqB,4BAA4B,KAAK,EAAtD,CAAT;AACA,SAAK,MAAL,GAAc,EAAd;;AAEA,WAAO,OAAP,CAAe,KAAK,EAApB,EAAwB,YAAY;AAClC,aAAO,KAAK,CAAL,CAAO,IAAP,EAAP;AACD,KAFD;;AAIA,SAAK,IAAL,GAAY,IAAI,OAAJ,CAAY,OAAO,WAAP,EAAZ,CAAZ;AACA,cAAU,MAAV,EAAkB,YAAY;AAC5B,aAAO,KAAK,IAAL,CAAU,MAAV,GAAmB,SAA1B;AACD,KAFD,EAEG,KAFH;AAGD,GAf4D,EAiB7D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,KAAK,IAAL,CAAU,MAAV,GAAmB,SAAvB,EAAkC;AAChC,WAAK,KAAL,GAAa,IAAI,MAAM,UAAV,CAAqB,4BAA4B,KAAK,EAAtD,EAA0D;AACrE,oBAAY,KAAK;AADoD,OAA1D,CAAb;AAGA,UAAI,MAAM,OAAO,UAAU,GAAV,EAAe;AAC9B,aAAK,OAAL,CAAa,GAAb;AACD,OAFS,CAAV;AAGA,WAAK,IAAL,CAAU,SAAV,CAAoB,KAAK,EAAzB,EAA6B;AAC3B,iBAAS,GADkB;AAE3B,iBAAS;AAFkB,OAA7B;AAID;AACF,GA/B4D,EAiC7D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,GAAL,GAAW,KAAK,KAAL,CAAW,IAAX,GAAkB,cAAlB,CAAiC;AAC1C;AAAO,yBAAU,EAAV,EAAc,MAAd,EAAsB;AAC3B,iBAAK,MAAL,CAAY,IAAZ,CAAiB,EAAC,KAAK,GAAN,EAAW,IAAI,EAAf,EAAjB;AACA,mBAAO,WAAP,CAAmB,GAAnB;AACA,iBAAK,MAAL,CAAY,IAAZ,CAAiB,EAAC,KAAK,GAAN,EAAW,IAAI,EAAf,EAAjB;AACD;;AAJD;AAAA;AAD0C,OAAjC,CAAX;AAOA,WAAK,GAAL,GAAW,KAAK,CAAL,CAAO,MAAP,CAAc,EAAd,CAAX;AACA,WAAK,GAAL,GAAW,KAAK,CAAL,CAAO,MAAP,CAAc,EAAd,CAAX;AACA,gBAAU,MAAV,EAAkB,YAAY;AAC5B,eAAO,KAAK,MAAL,CAAY,MAAZ,KAAuB,CAA9B;AACD,OAFD,EAEG,KAFH;AAGD;AACF,GAjD4D,EAmD7D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,QAAI,KAAK,KAAT,EAAgB;AACd,WAAK,KAAL,CAAW,KAAK,MAAhB,EAAwB,CACtB,EAAC,KAAK,GAAN,EAAW,IAAI,KAAK,GAApB,EADsB,EAEtB,EAAC,KAAK,GAAN,EAAW,IAAI,KAAK,GAApB,EAFsB,EAGtB,EAAC,KAAK,GAAN,EAAW,IAAI,KAAK,GAApB,EAHsB,EAItB,EAAC,KAAK,GAAN,EAAW,IAAI,KAAK,GAApB,EAJsB,CAAxB;AAMD;AACD,SAAK,GAAL,IAAY,KAAK,GAAL,CAAS,IAAT,EAAZ;AACD,GA9D4D,CAA/D;AAgED;;AAED,SAAS,QAAT,CAAkB,+DAAlB,EAAmF,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AAC7G,MAAI,QAAQ,OAAO,EAAP,EAAZ;AACA,MAAI,SAAS,OAAO,EAAP,EAAb;AACA,MAAI,QAAQ,IAAI,MAAM,UAAV,CAAqB,KAArB,CAAZ;AACA,MAAI,MAAM,EAAE,KAAK,KAAP,EAAV;AACA,MAAI,QAAQ,IAAI,MAAM,UAAV,CAAqB,MAArB,EAA6B,EAAE,YAAY,IAAd,EAA7B,CAAZ;AACA,QAAM,MAAN,CAAa,GAAb,EAAkB,UAAU,GAAV,EAAe,EAAf,EAAmB;AACnC,SAAK,KAAL,CAAW,MAAM,IAAN,CAAW,GAAX,EAAgB,KAAhB,EAAX,EAAoC,CAApC;AACA,SAAK,KAAL,CAAW,MAAM,IAAN,CAAW,GAAX,EAAgB,KAAhB,EAAX,EAAoC,CAApC;AACA;AACD,GAJD;AAKD,CAXD;;AAaA,SAAS,QAAT,CAAkB,qEAAlB,EAAyF,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACnH,MAAI,QAAQ,OAAO,EAAP,EAAZ;AACA,MAAI,QAAQ,IAAI,MAAM,UAAV,CAAqB,KAArB,EAA4B,EAAE,YAAY,IAAd,EAA5B,CAAZ;AACA,MAAI,MAAM,EAAE,KAAK,KAAP,EAAV;AACA,MAAI,QAAQ,MAAM,MAAN,CAAa,GAAb,EAAkB,UAAU,GAAV,EAAe,EAAf,EAAmB;AAC/C,SAAK,KAAL,CAAW,KAAX,EAAkB,EAAlB;AACA,SAAK,KAAL,CAAW,MAAM,OAAN,CAAc,GAAd,EAAmB,GAA9B,EAAmC,EAAnC;AACA;AACD,GAJW,CAAZ;AAKD,CATD;;AAWA,SAAS,QAAT,CAAkB,sEAAlB,EAA0F,UAAU,IAAV,EAAgB,UAAhB,EAA4B;AACpH,MAAI,QAAQ,OAAO,EAAP,EAAZ;AACA,MAAI,QAAQ,IAAI,MAAM,UAAV,CAAqB,KAArB,EAA4B,EAAE,YAAY,IAAd,EAA5B,CAAZ;AACA,MAAI,MAAM,EAAE,KAAK,KAAP,EAAV;AACA,MAAI,QAAQ,MAAM,MAAN,CAAa,GAAb,CAAZ;AACA,OAAK,KAAL,CAAW,MAAM,OAAN,CAAc,GAAd,EAAmB,GAA9B,EAAmC,KAAnC;AACA;AACD,CAPD;;AASA,eAAe,4DAAf,EAA6E,CAC3E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,MAAI,iBAAiB,OAAO,EAAP,EAArB;AACA,MAAI,OAAO,QAAX,EAAqB;AACnB,WAAO,IAAP,CAAY,0BAAZ,EAAwC,cAAxC;AACA,WAAO,SAAP,CAAiB,OAAO,cAAxB,EAAwC,QAAxC;AACD;;AAED,OAAK,UAAL,GAAkB,IAAI,MAAM,UAAV,CAAqB,cAArB,CAAlB;;AAEA,OAAK,EAAL,GAAU,KAAK,UAAL,CAAgB,MAAhB,CACR,EAAC,MAAM,MAAP,EAAe,UAAU,CAAC,GAAD,EAAM,GAAN,CAAzB,EADQ,EAC8B,OAAO,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC/D,SAAK,OAAL,CAAa,GAAb;AACA,SAAK,KAAL,CAAW,KAAK,EAAhB,EAAoB,GAApB;AACC,GAHmC,CAD9B,CAAV;AAKD,CAhB0E,EAiB3E,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,EAA5B,EAAgC;AAC9B,WAAO;AACL,gBAAU;AACR,eAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADC;AAER,gBAAQ,CAAC;AAFD,OADL,EADuB,EAAhC,EAKS,OAAO,UAAU,GAAV,EAAe,GAAf,EAAoB;AAC9B,SAAK,OAAL,CAAa,GAAb;AACA,SAAK,KAAL,CACE,KAAK,UAAL,CAAgB,OAAhB,CAAwB,KAAK,EAA7B,CADF,EAEE,EAAC,KAAK,KAAK,EAAX,EAAe,MAAM,MAArB,EAA6B,UAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAAvC,EAFF;AAGD,GALI,CALT;AAWD,CA9B0E,CAA7E;;AAiCA,IAAI,OAAO,QAAX,EAAqB;AACnB,WAAS,GAAT,CAAa,4DAAb,EAA2E,UAAU,IAAV,EAAgB;AACzF,QAAI,aAAa,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAjB;;AAEA,QAAI,SAAS,WAAW,MAAX,CACX,EAAC,MAAM,MAAP,EADW,EAEX,EAAC,OAAO;AACN,kBAAU;AACR,iBAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADC;AAER,kBAAQ,CAAC;AAFD,SADJ,EAAR,EAFW,CAAb;;AAQA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,OAAO,UAA1B,CAAX,EACW,EAAC,KAAK,OAAO,UAAb;AACC,YAAM,MADP;AAEC,gBAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CAFX,EADX;;AAKA,QAAI,KAAK,WAAW,MAAX,CAAkB,EAAC,MAAM,OAAP,EAAgB,UAAU,CAAC,GAAD,EAAM,GAAN,CAA1B,EAAlB,CAAT;AACA,aAAS,WAAW,MAAX,CACP,EAAC,MAAM,OAAP,EADO,EAEP,EAAC,OAAO;AACN,kBAAU;AACR,iBAAO,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,CADC;AAER,kBAAQ,CAAC;AAFD,SADJ,EAAR,EAFO,CAAT;;AAQA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,EAAnB,CAAX,EACW,EAAC,KAAK,EAAN;AACC,YAAM,OADP;AAEC,gBAAU,CAAC,GAAD,EAAM,GAAN,EAAW,GAAX,EAAgB,GAAhB,CAFX,EADX;AAID,GA7BD;;AA+BA,WAAS,GAAT,CAAa,6DAAb,EAA4E,UAAU,IAAV,EAAgB;AAC1F,QAAI,aAAa,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAjB;;AAEA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,uBAAiB;AADa,KAAlB,EAEX;AACD,YAAM,EAAC,SAAS,UAAV;AADL,KAFW,CAAd;;AAMA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAkD;AAChD,WAAK,QAAQ,UADmC;AAEhD,mBAAa,EAAC,GAAG,CAAJ,EAFmC;AAGhD,eAAS;AAHuC,KAAlD;;AAMA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,uBAAiB;AADa,KAAlB,EAEX;AACD,YAAM,EAAC,SAAS,UAAV;AADL,KAFW,CAAd;;AAMA,SAAK,KAAL,CAAW,OAAX,EAAoB,EAAC,gBAAgB,CAAjB,EAApB;;AAEA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAkD;AAChD,WAAK,QAAQ,UADmC;AAEhD,mBAAa,EAAC,GAAG,CAAJ,EAFmC;AAGhD,eAAS;AAHuC,KAAlD;;AAMA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,yBAAmB,CADW;AAE9B,uBAAiB;AAFa,KAAlB,EAGX;AACD,YAAM,EAAC,SAAS,SAAV;AADL,KAHW,CAAd;;AAOA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAkD;AAChD,WAAK,QAAQ,UADmC;AAEhD,mBAAa,EAAC,GAAG,EAAC,GAAG,CAAJ,EAAJ,EAAY,GAAG,CAAf,EAFmC;AAGhD,eAAS;AAHuC,KAAlD;;AAMA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,uBAAiB;AADa,KAAlB,EAEX;AACD,YAAM,EAAC,iBAAiB,UAAlB;AADL,KAFW,CAAd;;AAMA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAmD;AACjD,WAAK,QAAQ,UADoC;AAEjD,mBAAa,EAAC,GAAG,UAAJ;AAFoC,KAAnD;;AAKA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,uBAAiB;AADa,KAAlB,EAEX;AACD,YAAM,EAAC,iBAAiB,UAAlB;AADL,KAFW,CAAd;;AAMA,SAAK,KAAL,CAAW,OAAX,EAAoB,EAAC,gBAAgB,CAAjB,EAApB;;AAEA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAmD;AACjD,WAAK,QAAQ,UADoC;AAEjD,mBAAa,EAAC,GAAG,UAAJ;AAFoC,KAAnD;;AAKA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,uBAAiB;AADa,KAAlB,EAEX;AACD,YAAM,EAAC,eAAe,UAAhB;AADL,KAFW,CAAd;;AAMA,SAAK,KAAL,CAAW,OAAX,EAAoB,EAAC,gBAAgB,CAAjB,EAApB;;AAEA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAmD;AACjD,WAAK,QAAQ,UADoC;AAEjD,mBAAa;AAFoC,KAAnD;;AAKA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,yBAAmB;AADW,KAAlB,EAEX;AACD,YAAM;AACJ,2BAAmB;AADf;AADL,KAFW,CAAd;;AAQA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAmD;AACjD,WAAK,QAAQ,UADoC;AAEjD,mBAAa;AACX,WAAG,EAAC,GAAG,CAAJ,EAAO,GAAG,SAAV;AADQ;AAFoC,KAAnD;;AAOA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,yBAAmB;AADW,KAAlB,EAEX;AACD,YAAM;AACJ,2BAAmB;AADf;AADL,KAFW,CAAd;;AAQA,SAAK,KAAL,CAAW,OAAX,EAAoB,EAAC,gBAAgB,CAAjB,EAApB;;AAEA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAmD;AACjD,WAAK,QAAQ,UADoC;AAEjD,mBAAa;AACX,WAAG,EAAC,GAAG,CAAJ,EAAO,GAAG,SAAV;AADQ;AAFoC,KAAnD;;AAOA,QAAI,UAAU,WAAW,MAAX,CAAkB;AAC9B,yBAAmB;AADW,KAAlB,EAEX;AACD,YAAM;AACJ,2BAAmB;AADf;AADL,KAFW,CAAd;;AAQA,SAAK,KAAL,CAAW,OAAX,EAAoB,EAAC,gBAAgB,CAAjB,EAApB;;AAEA,SAAK,KAAL,CAAW,WAAW,OAAX,CAAmB,QAAQ,UAA3B,CAAX,EAAmD;AACjD,WAAK,QAAQ,UADoC;AAEjD,mBAAa;AACX,WAAG,EAAC,GAAG,SAAJ,EAAe,GAAG,SAAlB;AADQ;AAFoC,KAAnD;AAOD,GAhID;AAiID;;;AAGD,OAAO,QAAP,IAAmB,SAAS,GAAT,CAAa,wCAAb,EAAuD,UAAU,IAAV,EAAgB;AACxF,MAAI,WAAW,OAAO,EAAP,EAAf;AACA,MAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,CAAX;AACA,MAAI,eAAe,6BAAf,GAA+C,KAA/C,CAAqD,YAAzD,EAAuE;AACrE,QAAI,mBAAmB,KAAK,IAAL,CAAU,EAAC,GAAG,CAAJ,EAAV,EAChB,cADgB,CACD,EAAC;AAAO,yBAAY,CAAE;;AAArB;AAAA,SAAD,EADC,CAAvB;AAEA,SAAK,MAAL,CAAY,iBAAiB,YAAjB,CAA8B,cAA9B,CAA6C,UAAzD;AACA,qBAAiB,IAAjB;AACD;AACD,MAAI,sBAAsB,KAAK,IAAL,CAAU,EAAC,GAAG,CAAJ,EAAV,EAAkB,EAAC,eAAe,IAAhB,EAAlB,EACnB,cADmB,CACJ,EAAC;AAAO,uBAAY,CAAE;;AAArB;AAAA,OAAD,EADI,CAA1B;AAEA,OAAK,OAAL,CAAa,oBAAoB,YAApB,CAAiC,cAAjC,CAAgD,UAA7D;AACA,sBAAoB,IAApB;AACD,CAbkB,CAAnB;;AAeA,OAAO,QAAP,IAAmB,SAAS,GAAT,CAAa,kDAAb,EAAiE,UAAU,IAAV,EAAgB;AAClG,MAAI,WAAW,oBAAoB,OAAO,EAAP,EAAnC;AACA,MAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,CAAX;;AAEA,MAAI,QAAQ,KAAK,MAAL,CAAY,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAC,CAAD,EAAI,CAAJ,CAAV,EAAkB,GAAG,KAArB,EAAZ,CAAZ;AACA,OAAK,MAAL,CAAY,KAAZ;;;;;;AAMA;;AAEA,MAAI,SAAS,EAAb;AACA,MAAI,SAAS,KAAK,IAAL,CAAU,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAV,EAAwB,EAAC,QAAQ,EAAC,GAAG,CAAJ,EAAT,EAAxB,EAA0C,cAA1C,CAAyD;AACpE;AAAO,qBAAU,EAAV,EAAc,MAAd,EAAsB;AAC3B,eAAO,IAAP,CAAY,CAAC,OAAD,EAAU,EAAV,EAAc,MAAd,CAAZ;AACD;;AAFD;AAAA,OADoE;AAIpE;AAAS,uBAAU,EAAV,EAAc,MAAd,EAAsB;AAC7B,eAAO,IAAP,CAAY,CAAC,SAAD,EAAY,EAAZ,EAAgB,MAAhB,CAAZ;AACD;;AAFD;AAAA,OAJoE;AAOpE;AAAS,uBAAU,EAAV,EAAc;AACrB,eAAO,IAAP,CAAY,CAAC,SAAD,EAAY,EAAZ,CAAZ;AACD;;AAFD;AAAA;AAPoE,GAAzD,CAAb;;AAYA,OAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;AACA,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,OAAD,EAAU,KAAV,EAAiB,EAAC,GAAG,KAAJ,EAAjB,CAA3B;;;;;;AAMA,aAAW,YAAY;AACrB,SAAK,MAAL,CAAY,KAAZ,EAAmB,EAAC,MAAM,EAAC,OAAO,CAAR,EAAW,GAAG,KAAd,EAAP,EAAnB;AACD,GAFD;AAGA,OAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;AACA,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,SAAD,EAAY,KAAZ,EAAmB,EAAC,GAAG,KAAJ,EAAnB,CAA3B;;AAEA,SAAO,IAAP;AACD,CAxCkB,CAAnB;;AA0CA,OAAO,QAAP,IAAmB,SAAS,GAAT,CAAa,oCAAb,EAAmD,UAAU,IAAV,EAAgB;AACpF,MAAI,WAAW,mBAAmB,OAAO,EAAP,EAAlC;AACA,MAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,CAAX;;AAEA,MAAI,QAAQ,KAAK,MAAL,CAAY,EAAC,GAAG,EAAJ,EAAQ,GAAG,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAX,EAAZ,CAAZ;AACA,OAAK,MAAL,CAAY,KAAZ;;;;;;AAMA;;AAEA,MAAI,SAAS,KAAK,IAAL,CAAU,EAAV,EAAc,EAAC;AAAW,yBAAU,GAAV,EAAe;AACpD,eAAO,IAAI,CAAX;AACD;;AAF2B;AAAA,OAAD,EAAd,CAAb;;AAIA,MAAI,gBAAgB,EAApB;AACA,MAAI,gBAAgB,OAAO,cAAP,CAAsB;AACxC;AAAO,qBAAU,EAAV,EAAc,MAAd,EAAsB;AAC3B,sBAAc,IAAd,CAAmB,CAAC,OAAD,EAAU,MAAV,CAAnB;AACD;;AAFD;AAAA;AADwC,GAAtB,CAApB;;AAMA,OAAK,MAAL,CAAY,aAAZ,EAA2B,CAA3B;AACA,OAAK,KAAL,CAAW,cAAc,KAAd,EAAX,EAAkC,CAAC,OAAD,EAAU,EAAC,GAAG,EAAJ,EAAQ,GAAG,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAX,EAAV,CAAlC;AACA,gBAAc,IAAd;;AAEA,MAAI,oBAAoB,EAAxB;AACA,MAAI,oBAAoB,OAAO,OAAP,CAAe;AACrC;AAAO,qBAAU,GAAV,EAAe;AACpB,0BAAkB,IAAlB,CAAuB,CAAC,OAAD,EAAU,GAAV,CAAvB;AACD;;AAFD;AAAA;AADqC,GAAf,CAAxB;AAKA,OAAK,MAAL,CAAY,iBAAZ,EAA+B,CAA/B;AACA,OAAK,KAAL,CAAW,kBAAkB,KAAlB,EAAX,EAAsC,CAAC,OAAD,EAAU,EAAC,GAAG,CAAJ,EAAO,GAAG,CAAV,EAAV,CAAtC;AACA,oBAAkB,IAAlB;AACD,CArCkB,CAAnB;;AAwCA,OAAO,QAAP,IAAmB,SAAS,GAAT,CAAa,6CAAb,EAA4D,UAAU,IAAV,EAAgB;;;AAG7F,MAAI,aAAa,IAAI,OAAJ,CAAY,aAAZ,CAAjB;AACA,MAAI,YAAY,WAAW,KAAX,CAAiB,QAAQ,GAAR,CAAY,SAA7B,CAAhB;AACA,YAAU,QAAV,GAAqB,WAAW,OAAO,EAAP,EAAhC;AACA,MAAI,SAAS,IAAI,eAAe,sBAAnB,CACX,WAAW,MAAX,CAAkB,SAAlB,CADW,EACmB;AAC5B,cAAU,QAAQ,GAAR,CAAY;AADM,GADnB,CAAb;;AAMA,MAAI,WAAW,mBAAmB,OAAO,EAAP,EAAlC;AACA,MAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,QAArB,EAA+B,EAAE,SAAS,MAAX,EAA/B,CAAX;;AAEA,MAAI,SAAS,KAAK,MAAL,CAAY,EAAC,GAAG,KAAJ,EAAW,GAAG,CAAd,EAAZ,CAAb;AACA,MAAI,SAAS,KAAK,MAAL,CAAY,EAAC,GAAG,KAAJ,EAAZ,CAAb;AACA,MAAI,SAAS,KAAK,MAAL,CAAY,EAAC,GAAG,KAAJ,EAAW,GAAG,CAAd,EAAZ,CAAb;AACA,MAAI,GAAJ;;AAEA,MAAI,SAAS,EAAb;AACA,MAAI,SAAS,KAAK,IAAL,CAAU,EAAC,GAAG,KAAJ,EAAV,EAAsB,cAAtB,CAAqC;AAChD;AAAO,qBAAU,EAAV,EAAc,MAAd,EAAsB;AAC3B,eAAO,IAAP,CAAY,CAAC,OAAD,EAAU,EAAV,EAAc,MAAd,CAAZ;AACD;;AAFD;AAAA,OADgD;AAIhD;AAAS,uBAAU,EAAV,EAAc;AACrB,eAAO,IAAP,CAAY,CAAC,SAAD,CAAZ;AACD;;AAFD;AAAA,OAJgD;AAOhD;AAAS,uBAAU,EAAV,EAAc;AACrB,eAAO,IAAP,CAAY,CAAC,SAAD,EAAY,EAAZ,CAAZ;AACD;;AAFD;AAAA;AAPgD,GAArC,CAAb;AAWA,OAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;;AAEA,MAAI,OAAO,MAAP,KAAkB,CAAlB,IAAuB,OAAO,CAAP,EAAU,CAAV,MAAiB,MAA5C,EAAoD;AAClD,UAAM,OAAO,CAAP,CAAN;AACA,WAAO,CAAP,IAAY,OAAO,CAAP,CAAZ;AACA,WAAO,CAAP,IAAY,GAAZ;AACD;AACD,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,OAAD,EAAU,MAAV,EAAkB,EAAC,GAAG,KAAJ,EAAW,GAAG,CAAd,EAAlB,CAA3B;AACA,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,OAAD,EAAU,MAAV,EAAkB,EAAC,GAAG,KAAJ,EAAW,GAAG,CAAd,EAAlB,CAA3B;;;;AAIA;;;AAGA,aAAW,YAAY;AACrB,SAAK,eAAL;AACD,GAFD;;AAIA,OAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;;AAEA,MAAI,OAAO,MAAP,KAAkB,CAAlB,IAAuB,OAAO,CAAP,EAAU,CAAV,MAAiB,MAA5C,EAAoD;AAClD,UAAM,OAAO,CAAP,CAAN;AACA,WAAO,CAAP,IAAY,OAAO,CAAP,CAAZ;AACA,WAAO,CAAP,IAAY,GAAZ;AACD;AACD,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,SAAD,EAAY,MAAZ,CAA3B;AACA,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,SAAD,EAAY,MAAZ,CAA3B;;;AAGA,MAAI,MAAJ;AACA,aAAW,YAAY;AACrB,aAAS,KAAK,MAAL,CAAY,EAAC,GAAG,KAAJ,EAAW,GAAG,CAAd,EAAZ,CAAT;AACD,GAFD;;AAIA,OAAK,MAAL,CAAY,MAAZ,EAAoB,CAApB;AACA,OAAK,KAAL,CAAW,OAAO,KAAP,EAAX,EAA2B,CAAC,OAAD,EAAU,MAAV,EAAkB,EAAC,GAAG,KAAJ,EAAW,GAAG,CAAd,EAAlB,CAA3B;;;;;;;;;;;AAWA,SAAO,IAAP;AACA,SAAO,KAAP,CAAa,KAAb;AACD,CAjFkB,CAAnB;;AAmFA,IAAI,iBAAiB,SAAjB,cAAiB,CAAU,IAAV,EAAgB,IAAhB,EAAsB;;;AAGzC,OAAK,MAAL,GAAc,IAAd;AACA,OAAK,MAAL,GAAc,IAAd;AACD,CALD;AAMA,EAAE,MAAF,CAAS,eAAe,SAAxB,EAAmC;AACjC;AAAO,qBAAY;AACjB,aAAO,IAAI,cAAJ,CAAmB,KAAK,MAAxB,EAAgC,KAAK,MAArC,CAAP;AACD;;AAFD;AAAA,KADiC;AAIjC;AAAQ,oBAAU,KAAV,EAAiB;AACvB,aAAO,iBAAiB,cAAjB,IACF,MAAM,MAAN,CAAa,KAAK,MAAlB,EAA0B,MAAM,MAAhC,CADE,IAEF,MAAM,MAAN,CAAa,KAAK,MAAlB,EAA0B,MAAM,MAAhC,CAFL;AAGD;;AAJD;AAAA,KAJiC;AASjC;AAAU,wBAAY;AACpB,aAAO,gBAAP;AACD;;AAFD;AAAA,KATiC;AAYjC;AAAa,2BAAY;AACvB,aAAO,EAAC,MAAM,KAAK,MAAZ,EAAoB,MAAM,KAAK,MAA/B,EAAP;AACD;;AAFD;AAAA;AAZiC,CAAnC;;AAiBA,MAAM,OAAN,CAAc,gBAAd,EAAgC,UAAU,IAAV,EAAgB;AAC9C,SAAO,IAAI,cAAJ,CAAmB,KAAK,IAAxB,EAA8B,KAAK,IAAnC,CAAP;AACD,CAFD;;AAIA,eAAe,uCAAf,EAAwD,CACtD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,MAAI,iBAAiB,UAAU,OAAO,EAAP,EAA/B;AACA,MAAI,OAAO,QAAX,EAAqB;AACnB,WAAO,IAAP,CAAY,0BAAZ,EAAwC,cAAxC;AACA,WAAO,SAAP,CAAiB,OAAO,cAAxB,EAAwC,QAAxC;AACD;;AAED,OAAK,UAAL,GAAkB,IAAI,MAAM,UAAV,CAAqB,cAArB,CAAlB;AACA,OAAK,IAAL,GAAY,IAAI,IAAJ,EAAZ;AACA,OAAK,KAAL,GAAa,IAAI,MAAM,QAAV,EAAb;;AAEA,OAAK,EAAL,GAAU,KAAK,UAAL,CAAgB,MAAhB,CACR,EAAC,GAAG,KAAK,IAAT,EAAe,IAAI,KAAK,KAAxB;AACC,YAAQ,IAAI,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,CADT,EADQ,EAGR,OAAO,UAAU,GAAV,EAAe,GAAf,EAAoB;AACzB,SAAK,OAAL,CAAa,GAAb;AACA,SAAK,KAAL,CAAW,KAAK,EAAhB,EAAoB,GAApB;AACD,GAHD,CAHQ,CAAV;AAOD,CApBqD,EAqBtD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,OAAL,GAAe,EAAf;AACA,OAAK,MAAL,GAAc,KAAK,UAAL,CAAgB,IAAhB,CAAqB,EAArB,EAAyB,cAAzB,CAAwC;AACpD;AAAO,qBAAU,EAAV,EAAc,MAAd,EAAsB;AAC3B,aAAK,OAAL,CAAa,IAAb,CAAkB,CAAC,GAAD,EAAM,EAAN,EAAU,MAAV,CAAlB;AACD;;AAFD;AAAA,OADoD;AAIpD;AAAS,uBAAU,EAAV,EAAc,MAAd,EAAsB;AAC7B,aAAK,OAAL,CAAa,IAAb,CAAkB,CAAC,GAAD,EAAM,EAAN,EAAU,MAAV,CAAlB;AACD;;AAFD;AAAA,OAJoD;AAOpD;AAAS,uBAAU,EAAV,EAAc;AACrB,aAAK,OAAL,CAAa,IAAb,CAAkB,CAAC,GAAD,EAAM,EAAN,CAAlB;AACD;;AAFD;AAAA;AAPoD,GAAxC,CAAd;AAWA,OAAK,MAAL,CAAY,KAAK,OAAjB,EAA0B,CAA1B;AACA,OAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAb,EAAX,EACW,CAAC,GAAD,EAAM,KAAK,EAAX,EACC,EAAC,GAAG,KAAK,IAAT,EAAe,IAAI,KAAK,KAAxB;AACC,YAAQ,IAAI,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,CADT,EADD,CADX;;;;;AAQA,aAAW,YAAY;AACrB,SAAK,UAAL,CAAgB,MAAhB,CACE,KAAK,EADP,EACW,EAAC,MAAM,EAAC,QAAQ,IAAI,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,CAAT,EAAP,EADX,EAEE,OAAO,UAAU,GAAV,EAAe;AACpB,WAAK,OAAL,CAAa,GAAb;AACD,KAFD,CAFF;AAKD,GAND;AAOD,CAnDqD,EAoDtD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,MAAL,CAAY,KAAK,OAAjB,EAA0B,CAA1B;AACA,OAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAb,EAAX,EACW,CAAC,GAAD,EAAM,KAAK,EAAX,EAAe,EAAC,QAAQ,IAAI,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,CAAT,EAAf,CADX;;;;AAKA,aAAW,YAAY;AACrB,SAAK,UAAL,CAAgB,MAAhB,CACE,KAAK,EADP,EACW,EAAC,MAAM,EAAC,gCAAgC,GAAjC,EAAP,EADX,EAEA,OAAO,UAAU,GAAV,EAAe;AACpB,WAAK,OAAL,CAAa,GAAb;AACD,KAFD,CAFA;AAKD,GAND;AAOD,CAnEqD,EAoEtD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,MAAL,CAAY,KAAK,OAAjB,EAA0B,CAA1B;AACA,OAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAb,EAAX,EACW,CAAC,GAAD,EAAM,KAAK,EAAX,EAAe,EAAC,QAAQ,IAAI,cAAJ,CAAmB,GAAnB,EAAwB,GAAxB,CAAT,EAAf,CADX;;;AAIA,OAAK,KAAL,GAAa,IAAI,IAAJ,CAAS,KAAK,IAAL,CAAU,OAAV,KAAsB,IAA/B,CAAb;AACA,OAAK,MAAL,GAAc,IAAI,MAAM,QAAV,EAAd;AACA,aAAW,YAAY;AACrB,SAAK,UAAL,CAAgB,MAAhB,CACE,KAAK,EADP,EACW,EAAC,MAAM,EAAC,GAAG,KAAK,KAAT,EAAgB,IAAI,KAAK,MAAzB,EAAP,EADX,EAEA,OAAO,UAAU,GAAV,EAAe;AACpB,WAAK,OAAL,CAAa,GAAb;AACD,KAFD,CAFA;AAKD,GAND;AAOD,CApFqD,EAqFtD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,MAAL,CAAY,KAAK,OAAjB,EAA0B,CAA1B;AACA,OAAK,KAAL,CAAW,KAAK,OAAL,CAAa,KAAb,EAAX,EACW,CAAC,GAAD,EAAM,KAAK,EAAX,EAAe,EAAC,GAAG,KAAK,KAAT,EAAgB,IAAI,KAAK,MAAzB,EAAf,CADX;;AAGA,OAAK,MAAL,CAAY,IAAZ;AACD,CA5FqD,CAAxD;;AAgGA,IAAI,yBAAyB,SAAzB,sBAAyB,GAAY;AACvC,MAAI,cACE,eAAe,6BAAf,GAA+C,KAA/C,CAAqD,YAD3D;AAEA,MAAI,WAAJ,EACE,YAAY,iBAAZ;AACH,CALD;;AAQA,OAAO,QAAP,IAAmB,SAAS,GAAT,CAAa,oCAAb,EAAmD,UAAU,IAAV,EAAgB;AACpF,MAAI,OAAO,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAX;AACA,IAAE,KAAF,CAAQ,GAAR,EAAa,YAAY;AACvB,SAAK,MAAL,CAAY,EAAC,KAAK,KAAN,EAAZ;AACD,GAFD;AAGA,MAAI,UAAU,KAAK,IAAL,CAAU,EAAV,EAAc,cAAd,CAA6B;AACzC;AAAO,qBAAU,EAAV,EAAc;AACnB,aAAK,MAAL,CAAY,EAAZ,EAAgB,EAAC,MAAM,EAAC,KAAK,KAAN,EAAP,EAAhB;AACD;;AAFD;AAAA;AADyC,GAA7B,CAAd;AAKA,UAAQ,IAAR;;;;;;AAMD,CAhBkB,CAAnB;;AAkBA,eAAe,yCAAf,EAA0D,CACxD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,QAAL,GAAgB,OAAO,EAAP,EAAhB;AACA,MAAI,OAAO,QAAX,EAAqB;AACnB,WAAO,IAAP,CAAY,0BAAZ,EAAwC,KAAK,QAA7C;AACA,WAAO,SAAP,CAAiB,OAAO,KAAK,QAA7B,EAAuC,QAAvC;AACD;AACF,CARuD,EASxD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,KAAK,QAA1B,CAAZ;AACA,OAAK,GAAL,GAAW,EAAE,KAAK,CAAP,EAAU,KAAK,CAAf,EAAkB,KAAK,QAAvB,EAAX;AACA,OAAK,IAAL,CAAU,MAAV,CAAiB,KAAK,GAAtB,EAA2B,OAAO,UAAU,GAAV,EAAe,EAAf,EAAmB;AACnD,SAAK,OAAL,CAAa,GAAb;AACD,GAF0B,CAA3B;AAGD,CAhBuD,EAiBxD,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,MAAI,SAAS,KAAK,IAAL,CAAU,OAAV,CAAkB,EAAE,KAAK,CAAP,EAAlB,EAA8B;AACzC,YAAQ,SADiC;AAEzC,UAAM,SAFmC;AAGzC,WAAO,SAHkC;AAIzC,UAAM;AAJmC,GAA9B,CAAb;AAMA,OAAK,KAAL,CAAW,MAAX,EAAmB,KAAK,GAAxB;AACD,CA1BuD,CAA1D;;;AA8BA,OAAO,QAAP,IAAmB,eAAe,oCAAf,EAAqD,CACtE,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,OAAO,IAAX;AACA,OAAK,IAAL,GAAY,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAZ;AACA,MAAI,QAAQ,EAAZ;AACA,MAAI,YAAY;AACd;AAAS,uBAAU,MAAV,EAAkB;AACzB,cAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAFD;AAAA,OADc;AAId;AAAO,qBAAU,MAAV,EAAkB;AACvB,cAAM,OAAO,GAAb,IAAoB,MAApB;AACD;;AAFD;AAAA,OAJc;AAOd;AAAS,uBAAU,MAAV,EAAkB;AACzB,eAAO,MAAM,OAAO,GAAb,CAAP;AACD;;AAFD;AAAA;AAPc,GAAhB;AAWA,OAAK,OAAL,GAAe,KAAK,IAAL,CAAU,IAAV,CACb,EADa,EACT,EAAC,OAAO,CAAR,EAAW,MAAM,EAAC,WAAW,CAAC,CAAb,EAAjB,EADS,EAC0B,OAD1B,CACkC,SADlC,CAAf;;;AAIA,aAAW,YAAY;AACrB,SAAK,GAAL,GAAW,KAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,WAAW,CAAZ,EAAe,UAAU,IAAzB,EAAjB,CAAX;AACA,SAAK,GAAL,GAAW,KAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,WAAW,CAAZ,EAAe,UAAU,IAAzB,EAAjB,CAAX;AACA,SAAK,GAAL,GAAW,KAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,WAAW,CAAZ,EAAe,UAAU,IAAzB,EAAjB,CAAX;AACD,GAJD;AAKA,OAAK,KAAL,CAAW,EAAE,IAAF,CAAO,KAAP,CAAX,EAA0B,CAAC,KAAK,GAAN,CAA1B;;;;;;AAMA,aAAW,YAAY;AACrB,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,KAAK,EAAC,KAAK,KAAK,GAAX,EAAN,EAAjB,EACiB,EAAC,MAAM,EAAC,UAAU,KAAX,EAAP,EADjB,EAEiB,EAAC,OAAO,CAAR,EAFjB;AAGD,GAJD;AAKA,OAAK,KAAL,CAAW,EAAE,IAAF,CAAO,KAAP,CAAX,EAA0B,CAAC,KAAK,GAAN,CAA1B;;;;AAIA,aAAW,YAAY;AACrB,SAAK,IAAL,CAAU,MAAV,CAAiB,EAAC,UAAU,IAAX,EAAjB;AACD,GAFD;AAGA,OAAK,KAAL,CAAW,EAAE,IAAF,CAAO,KAAP,CAAX,EAA0B,CAAC,KAAK,GAAN,CAA1B;AACD,CA5CqE,CAArD,CAAnB;;AA+CA,OAAO,QAAP,IAAmB,eAAe,gDAAf,EAAiE,CAClF,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,MAAI,IAAI,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAR;;AAEA,MAAI,KAAK,EAAE,MAAF,CAAS,EAAE,KAAK,KAAP,EAAT,CAAT;;AAEA,IAAE,MAAF,CAAS,EAAT,EAAa,EAAE,MAAM,MAAR,EAAb;AACA,OAAK,KAAL,CAAW,EAAE,OAAF,CAAU,EAAV,CAAX,EAA0B,EAAE,KAAK,EAAP,EAAW,MAAM,MAAjB,EAA1B;;AAEA,OAAK,MAAL,CAAY,YAAY;AACtB,MAAE,MAAF,CAAS,EAAT,EAAa,EAAE,MAAM,MAAR,EAAb,EAA+B,EAAE,gBAAgB,IAAlB,EAA/B;AACD,GAFD,EAEG,4BAFH;AAGA,OAAK,KAAL,CAAW,EAAE,OAAF,CAAU,EAAV,CAAX,EAA0B,EAAE,KAAK,EAAP,EAAW,MAAM,MAAjB,EAA1B;;AAEA,OAAK,MAAL,CAAY,YAAY;AACtB,MAAE,MAAF,CAAS,EAAT,EAAa,EAAE,MAAM,MAAR,EAAgB,MAAM,EAAE,MAAM,CAAR,EAAtB,EAAb;AACD,GAFD,EAEG,mDAFH;AAGA,OAAK,KAAL,CAAW,EAAE,OAAF,CAAU,EAAV,CAAX,EAA0B,EAAE,KAAK,EAAP,EAAW,MAAM,MAAjB,EAA1B;AACD,CAlBiF,CAAjE,CAAnB;;AAqBA,OAAO,QAAP,IAAmB,SAAS,GAAT,CACjB,4CADiB,EAEjB,UAAU,IAAV,EAAgB;AACd,OAAK,MAAL,CAAY,YAAY;AACtB,QAAI,eAAe,UAAnB,CAA8B,yCAA9B;AACD,GAFD;AAGD,CANgB,CAAnB;;AASA,OAAO,QAAP,IAAmB,SAAS,GAAT,CAAa,8BAAb,EAA6C,UAAU,IAAV,EAAgB;;AAE9E,OAAK,OAAL,CAAa,eAAe,UAAf,CAA0B,OAA1B,CAAkC,OAA/C,EAAwD,kBAAxD;AACA,OAAK,KAAL,0BAAkB,eAAe,UAAf,CAA0B,OAA1B,CAAkC,MAApD,GAA6D,UAA7D;AACA,OAAK,KAAL,0BAAkB,eAAe,UAAf,CAA0B,OAA1B,CAAkC,MAAlC,CAAyC,OAA3D,GACW,UADX;AAEA,OAAK,KAAL,0BAAkB,eAAe,UAAf,CAA0B,OAA1B,CAAkC,MAAlC,CAAyC,QAA3D,GACW,UADX;;AAGA,MAAI,IAAI,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAR;AACA,MAAI,gBAAgB,EAAE,aAAF,EAApB;AACA,OAAK,MAAL,CAAY,aAAZ;AACA,OAAK,MAAL,CAAY,cAAc,aAA1B;AACA,MAAI,QAAQ,EAAE,WAAF,EAAZ;AACA,OAAK,MAAL,CAAY,KAAZ;AACA,OAAK,MAAL,CAAY,MAAM,KAAlB;AACD,CAhBkB,CAAnB;;AAkBA,IAAI,OAAO,QAAX,EAAqB;AACnB,WAAS,GAAT,CAAa,0EAAb,EAAyF,UAAU,IAAV,EAAgB;AACvG,QAAI,aAAa,IAAI,MAAM,UAAV,CAAqB,OAAO,EAAP,EAArB,CAAjB;;AAEA,MAAE,KAAF,CAAQ,EAAR,EAAY,YAAY;AACtB,iBAAW,MAAX,CAAkB,EAAE,MAAM,OAAR,EAAlB;AACD,KAFD;;AAIA,SAAK,KAAL,CAAW,WAAW,IAAX,GAAkB,KAAlB,EAAX,EAAsC,EAAtC;;;AAGA,MAAE,IAAF,CAAO,CAAC,EAAD,EAAK,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,CAAL,EAAgB,CAAC,EAAD,CAAhB,CAAP,EAA8B,UAAU,QAAV,EAAoB;AAChD,WAAK,MAAL,CAAY,YAAY;AACtB,mBAAW,MAAX,CAAkB,QAAlB;AACD,OAFD;;AAIA,WAAK,MAAL,CAAY,YAAY;AACtB,mBAAW,MAAX,CAAkB,QAAlB,EAA4B,EAAC,MAAM,CAAP,EAA5B;AACD,OAFD;AAGD,KARD;;AAUA,SAAK,KAAL,CAAW,WAAW,IAAX,GAAkB,KAAlB,EAAX,EAAsC,EAAtC;AACD,GArBD;AAsBD;;;;;;;;;;;;;;;;;;;;;;AAsBD,IAAI,OAAO,QAAX,EAAqB;AACnB,iBAAe,2CAAf,EAA4D,CAC1D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,SAAK,KAAL,GAAa,OAAO,EAAP,EAAb;AACA,WAAO,IAAP,CAAY,yBAAZ,EAAuC,KAAK,KAA5C,EAAmD,OAAO,UAAU,GAAV,EAAe;AACvE,WAAK,OAAL,CAAa,GAAb;AACD,KAFkD,CAAnD;AAGD,GAPyD,EAQ1D,UAAU,IAAV,EAAgB,MAAhB,EAAwB;AACtB,QAAI,OAAO,IAAX;AACA,WAAO,IAAP,CAAY,yBAAZ,EAAuC,KAAK,KAA5C,EAAmD,OACjD,UAAU,GAAV,EAAe,OAAf,EAAwB;AACtB,WAAK,OAAL,CAAa,GAAb;AACA,WAAK,MAAL,CAAY,OAAZ;AACD,KAJgD,CAAnD;AAMD,GAhByD,CAA5D;AAkBD,CAnBD,MAmBO;AACL,MAAI,mCAAmC,IAAI,MAAM,UAAV,CAAqB,OAArB,CAAvC;AACA,MAAI,SAAS,IAAI,OAAJ,CAAY,eAAZ,CAAb;AACA,MAAI,iBAAiB,EAArB;AACA,SAAO,OAAP,CAAe;AACb;AAAyB,uCAAU,KAAV,EAAiB;AACxC,uBAAe,KAAf,IAAwB,IAAI,MAAJ,EAAxB;AACA,YAAI,UAAU,iCAAiC,IAAjC,CAAsC,EAAC,OAAO,KAAR,EAAtC,EACP,cADO,CACQ,EAAC;AAAO,6BAAW,CAAE;;AAApB;AAAA,aAAD,EADR,CAAd;AAEA,eAAO,UAAP,CAAkB,YAAY;AAC5B,2CAAiC,MAAjC,CACE,EAAC,OAAO,KAAR,EADF,EAEE,UAAU,GAAV,EAAe,MAAf,EAAuB;AACrB,gBAAI,UAAU,CAAC,GAAD,IAAQ,MAAtB;AACA,2BAAe,KAAf,YAA6B,OAA7B;AACA,oBAAQ,IAAR;AACD,WANH;AAQD,SATD,EASG,EATH;AAUD;;AAdD;AAAA,OADa;AAgBb;AAAyB,uCAAU,KAAV,EAAiB;AACxC,YAAI;AACF,iBAAO,eAAe,KAAf,EAAsB,IAAtB,EAAP;AACD,SAFD,SAEU;AACR,iBAAO,eAAe,KAAf,CAAP;AACD;AACF;;AAND;AAAA;AAhBa,GAAf;AAwBD","file":"/packages/mongo/mongo_livedata_tests.js.map","sourcesContent":["// This is a magic collection that fails its writes on the server when\n// the selector (or inserted document) contains fail: true.\n\nvar TRANSFORMS = {};\n\n// We keep track of the collections, so we can refer to them by name\nvar COLLECTIONS = {};\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    createInsecureCollection: function (name, options) {\n      check(name, String);\n      check(options, Match.Optional({\n        transformName: Match.Optional(String),\n        idGeneration: Match.Optional(String)\n      }));\n\n      if (options && options.transformName) {\n        options.transform = TRANSFORMS[options.transformName];\n      }\n      var c = new Mongo.Collection(name, options);\n      COLLECTIONS[name] = c;\n      c._insecure = true;\n      Meteor.publish('c-' + name, function () {\n        return c.find();\n      });\n    },\n    dropInsecureCollection: function(name) {\n      var c = COLLECTIONS[name];\n      c._dropCollection();\n    }\n  });\n}\n\n// We store the generated id, keyed by collection, for each insert\n// This is so we can test the stub and the server generate the same id\nvar INSERTED_IDS = {};\n\nMeteor.methods({\n  insertObjects: function (collectionName, doc, count) {\n    var c = COLLECTIONS[collectionName];\n    var ids = [];\n    for (var i = 0; i < count; i++) {\n      var id = c.insert(doc);\n      INSERTED_IDS[collectionName] = (INSERTED_IDS[collectionName] || []).concat([id]);\n      ids.push(id);\n    }\n    return ids;\n  },\n  upsertObject: function (collectionName, selector, modifier) {\n    var c = COLLECTIONS[collectionName];\n    return c.upsert(selector, modifier);\n  },\n  doMeteorCall: function (name /*, arguments */) {\n    var args = Array.prototype.slice.call(arguments);\n\n    return Meteor.call.apply(null, args);\n  }\n});\n\nvar runInFence = function (f) {\n  if (Meteor.isClient) {\n    f();\n  } else {\n    var fence = new DDPServer._WriteFence;\n    DDPServer._CurrentWriteFence.withValue(fence, f);\n    fence.armAndWait();\n  }\n};\n\n// Helpers for upsert tests\n\nvar stripId = function (obj) {\n  delete obj._id;\n};\n\nvar compareResults = function (test, skipIds, actual, expected) {\n  if (skipIds) {\n    _.map(actual, stripId);\n    _.map(expected, stripId);\n  }\n  // (technically should ignore order in comparison)\n  test.equal(actual, expected);\n};\n\nvar upsert = function (coll, useUpdate, query, mod, options, callback) {\n  if (! callback && typeof options === \"function\") {\n    callback = options;\n    options = {};\n  }\n\n  if (useUpdate) {\n    if (callback)\n      return coll.update(query, mod,\n                         _.extend({ upsert: true }, options),\n                         function (err, result) {\n                           callback(err, ! err && {\n                             numberAffected: result\n                           });\n                         });\n    return {\n      numberAffected: coll.update(query, mod,\n                                  _.extend({ upsert: true }, options))\n    };\n  } else {\n    return coll.upsert(query, mod, options, callback);\n  }\n};\n\nvar upsertTestMethod = \"livedata_upsert_test_method\";\nvar upsertTestMethodColl;\n\n// This is the implementation of the upsert test method on both the client and\n// the server. On the client, we get a test object. On the server, we just throw\n// errors if something doesn't go according to plan, and when the client\n// receives those errors it will cause the test to fail.\n//\n// Client-side exceptions in here will NOT cause the test to fail! Because it's\n// a stub, those exceptions will get caught and logged.\nvar upsertTestMethodImpl = function (coll, useUpdate, test) {\n  coll.remove({});\n  var result1 = upsert(coll, useUpdate, { foo: \"bar\" }, { foo: \"bar\" });\n\n  if (! test) {\n    test = {\n      equal: function (a, b) {\n        if (! EJSON.equals(a, b))\n          throw new Error(\"Not equal: \" +\n                          JSON.stringify(a) + \", \" + JSON.stringify(b));\n      },\n      isTrue: function (a) {\n        if (! a)\n          throw new Error(\"Not truthy: \" + JSON.stringify(a));\n      },\n      isFalse: function (a) {\n        if (a)\n          throw new Error(\"Not falsey: \" + JSON.stringify(a));\n      }\n    };\n  }\n\n  // if we don't test this, then testing result1.numberAffected will throw,\n  // which will get caught and logged and the whole test will pass!\n  test.isTrue(result1);\n\n  test.equal(result1.numberAffected, 1);\n  if (! useUpdate)\n    test.isTrue(result1.insertedId);\n  var fooId = result1.insertedId;\n  var obj = coll.findOne({ foo: \"bar\" });\n  test.isTrue(obj);\n  if (! useUpdate)\n    test.equal(obj._id, result1.insertedId);\n  var result2 = upsert(coll, useUpdate, { _id: fooId },\n                       { $set: { foo: \"baz \" } });\n  test.isTrue(result2);\n  test.equal(result2.numberAffected, 1);\n  test.isFalse(result2.insertedId);\n};\n\nif (Meteor.isServer) {\n  var m = {};\n  m[upsertTestMethod] = function (run, useUpdate, options) {\n    check(run, String);\n    check(useUpdate, Boolean);\n    upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, options);\n    upsertTestMethodImpl(upsertTestMethodColl, useUpdate);\n  };\n  Meteor.methods(m);\n}\n\nMeteor._FailureTestCollection =\n  new Mongo.Collection(\"___meteor_failure_test_collection\");\n\n// For test \"document with a custom type\"\nvar Dog = function (name, color, actions) {\n  var self = this;\n  self.color = color;\n  self.name = name;\n  self.actions = actions || [{name: \"wag\"}, {name: \"swim\"}];\n};\n_.extend(Dog.prototype, {\n  getName: function () { return this.name;},\n  getColor: function () { return this.name;},\n  equals: function (other) { return other.name === this.name &&\n                             other.color === this.color &&\n                             EJSON.equals(other.actions, this.actions);},\n  toJSONValue: function () { return {color: this.color, name: this.name, actions: this.actions};},\n  typeName: function () { return \"dog\"; },\n  clone: function () { return new Dog(this.name, this.color); },\n  speak: function () { return \"woof\"; }\n});\nEJSON.addType(\"dog\", function (o) { return new Dog(o.name, o.color, o.actions);});\n\n\n// Parameterize tests.\n_.each( ['STRING', 'MONGO'], function(idGeneration) {\n\nvar collectionOptions = { idGeneration: idGeneration};\n\ntestAsyncMulti(\"mongo-livedata - database error reporting. \" + idGeneration, [\n  function (test, expect) {\n    var ftc = Meteor._FailureTestCollection;\n\n    var exception = function (err, res) {\n      test.instanceOf(err, Error);\n    };\n\n    _.each([\"insert\", \"remove\", \"update\"], function (op) {\n      var arg = (op === \"insert\" ? {} : 'bla');\n      var arg2 = {};\n\n      var callOp = function (callback) {\n        if (op === \"update\") {\n          ftc[op](arg, arg2, callback);\n        } else {\n          ftc[op](arg, callback);\n        }\n      };\n\n      if (Meteor.isServer) {\n        test.throws(function () {\n          callOp();\n        });\n\n        callOp(expect(exception));\n      }\n\n      if (Meteor.isClient) {\n        callOp(expect(exception));\n\n        // This would log to console in normal operation.\n        Meteor._suppress_log(1);\n        callOp();\n      }\n    });\n  }\n]);\n\n\nTinytest.addAsync(\"mongo-livedata - basics, \" + idGeneration, function (test, onComplete) {\n  var run = test.runId();\n  var coll, coll2;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions) ; // local, unmanaged\n    coll2 = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"livedata_test_collection_\"+run, collectionOptions);\n    coll2 = new Mongo.Collection(\"livedata_test_collection_2_\"+run, collectionOptions);\n  }\n\n  var log = '';\n  var obs = coll.find({run: run}, {sort: [\"x\"]}).observe({\n    addedAt: function (doc, before_index, before) {\n      log += 'a(' + doc.x + ',' + before_index + ',' + before + ')';\n    },\n    changedAt: function (new_doc, old_doc, at_index) {\n      log += 'c(' + new_doc.x + ',' + at_index + ',' + old_doc.x + ')';\n    },\n    movedTo: function (doc, old_index, new_index) {\n      log += 'm(' + doc.x + ',' + old_index + ',' + new_index + ')';\n    },\n    removedAt: function (doc, at_index) {\n      log += 'r(' + doc.x + ',' + at_index + ')';\n    }\n  });\n\n  var captureObserve = function (f) {\n    if (Meteor.isClient) {\n      f();\n    } else {\n      var fence = new DDPServer._WriteFence;\n      DDPServer._CurrentWriteFence.withValue(fence, f);\n      fence.armAndWait();\n    }\n\n    var ret = log;\n    log = '';\n    return ret;\n  };\n\n  var expectObserve = function (expected, f) {\n    if (!(expected instanceof Array))\n      expected = [expected];\n\n    test.include(expected, captureObserve(f));\n  };\n\n  test.equal(coll.find({run: run}).count(), 0);\n  test.equal(coll.findOne(\"abc\"), undefined);\n  test.equal(coll.findOne({run: run}), undefined);\n\n  expectObserve('a(1,0,null)', function () {\n    var id = coll.insert({run: run, x: 1});\n    test.equal(coll.find({run: run}).count(), 1);\n    test.equal(coll.findOne(id).x, 1);\n    test.equal(coll.findOne({run: run}).x, 1);\n  });\n\n  expectObserve('a(4,1,null)', function () {\n    var id2 = coll.insert({run: run, x: 4});\n    test.equal(coll.find({run: run}).count(), 2);\n    test.equal(coll.find({_id: id2}).count(), 1);\n    test.equal(coll.findOne(id2).x, 4);\n  });\n\n  test.equal(coll.findOne({run: run}, {sort: [\"x\"], skip: 0}).x, 1);\n  test.equal(coll.findOne({run: run}, {sort: [\"x\"], skip: 1}).x, 4);\n  test.equal(coll.findOne({run: run}, {sort: {x: -1}, skip: 0}).x, 4);\n  test.equal(coll.findOne({run: run}, {sort: {x: -1}, skip: 1}).x, 1);\n\n\n  var cur = coll.find({run: run}, {sort: [\"x\"]});\n  var total = 0;\n  var index = 0;\n  var context = {};\n  cur.forEach(function (doc, i, cursor) {\n    test.equal(i, index++);\n    test.isTrue(cursor === cur);\n    test.isTrue(context === this);\n    total *= 10;\n    if (Meteor.isServer) {\n      // Verify that the callbacks from forEach run sequentially and that\n      // forEach waits for them to complete (issue# 321). If they do not run\n      // sequentially, then the second callback could execute during the first\n      // callback's sleep sleep and the *= 10 will occur before the += 1, then\n      // total (at test.equal time) will be 5. If forEach does not wait for the\n      // callbacks to complete, then total (at test.equal time) will be 0.\n      Meteor._sleepForMs(5);\n    }\n    total += doc.x;\n    // verify the meteor environment is set up here\n    coll2.insert({total:total});\n  }, context);\n  test.equal(total, 14);\n\n  index = 0;\n  test.equal(cur.map(function (doc, i, cursor) {\n    // XXX we could theoretically make map run its iterations in parallel or\n    // something which would make this fail\n    test.equal(i, index++);\n    test.isTrue(cursor === cur);\n    test.isTrue(context === this);\n    return doc.x * 2;\n  }, context), [2, 8]);\n\n  test.equal(_.pluck(coll.find({run: run}, {sort: {x: -1}}).fetch(), \"x\"),\n             [4, 1]);\n\n  expectObserve('', function () {\n    var count = coll.update({run: run, x: -1}, {$inc: {x: 2}}, {multi: true});\n    test.equal(count, 0);\n  });\n\n  expectObserve('c(3,0,1)c(6,1,4)', function () {\n    var count = coll.update({run: run}, {$inc: {x: 2}}, {multi: true});\n    test.equal(count, 2);\n    test.equal(_.pluck(coll.find({run: run}, {sort: {x: -1}}).fetch(), \"x\"),\n               [6, 3]);\n  });\n\n  expectObserve(['c(13,0,3)m(13,0,1)', 'm(6,1,0)c(13,1,3)',\n                 'c(13,0,3)m(6,1,0)', 'm(3,0,1)c(13,1,3)'], function () {\n    coll.update({run: run, x: 3}, {$inc: {x: 10}}, {multi: true});\n    test.equal(_.pluck(coll.find({run: run}, {sort: {x: -1}}).fetch(), \"x\"),\n               [13, 6]);\n  });\n\n  expectObserve('r(13,1)', function () {\n    var count = coll.remove({run: run, x: {$gt: 10}});\n    test.equal(count, 1);\n    test.equal(coll.find({run: run}).count(), 1);\n  });\n\n  expectObserve('r(6,0)', function () {\n    coll.remove({run: run});\n    test.equal(coll.find({run: run}).count(), 0);\n  });\n\n  expectObserve('', function () {\n    var count = coll.remove({run: run});\n    test.equal(count, 0);\n    test.equal(coll.find({run: run}).count(), 0);\n  });\n\n  obs.stop();\n  onComplete();\n});\n\nTinytest.addAsync(\"mongo-livedata - fuzz test, \" + idGeneration, function(test, onComplete) {\n\n  var run = Random.id();\n  var coll;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"livedata_test_collection_\"+run, collectionOptions);\n  }\n\n  // fuzz test of observe(), especially the server-side diffing\n  var actual = [];\n  var correct = [];\n  var counters = {add: 0, change: 0, move: 0, remove: 0};\n\n  var obs = coll.find({run: run}, {sort: [\"x\"]}).observe({\n    addedAt: function (doc, before_index) {\n      counters.add++;\n      actual.splice(before_index, 0, doc.x);\n    },\n    changedAt: function (new_doc, old_doc, at_index) {\n      counters.change++;\n      test.equal(actual[at_index], old_doc.x);\n      actual[at_index] = new_doc.x;\n    },\n    movedTo: function (doc, old_index, new_index) {\n      counters.move++;\n      test.equal(actual[old_index], doc.x);\n      actual.splice(old_index, 1);\n      actual.splice(new_index, 0, doc.x);\n    },\n    removedAt: function (doc, at_index) {\n      counters.remove++;\n      test.equal(actual[at_index], doc.x);\n      actual.splice(at_index, 1);\n    }\n  });\n\n  if (Meteor.isServer) {\n    // For now, has to be polling (not oplog) because it is ordered observe.\n    test.isTrue(obs._multiplexer._observeDriver._suspendPolling);\n  }\n\n  var step = 0;\n\n  // Use non-deterministic randomness so we can have a shorter fuzz\n  // test (fewer iterations).  For deterministic (fully seeded)\n  // randomness, remove the call to Random.fraction().\n  var seededRandom = new SeededRandom(\"foobard\" + Random.fraction());\n  // Random integer in [0,n)\n  var rnd = function (n) {\n    return seededRandom.nextIntBetween(0, n-1);\n  };\n\n  var finishObserve = function (f) {\n    if (Meteor.isClient) {\n      f();\n    } else {\n      var fence = new DDPServer._WriteFence;\n      DDPServer._CurrentWriteFence.withValue(fence, f);\n      fence.armAndWait();\n    }\n  };\n\n  var doStep = function () {\n    if (step++ === 5) { // run N random tests\n      obs.stop();\n      onComplete();\n      return;\n    }\n\n    var max_counters = _.clone(counters);\n\n    finishObserve(function () {\n      if (Meteor.isServer)\n        obs._multiplexer._observeDriver._suspendPolling();\n\n      // Do a batch of 1-10 operations\n      var batch_count = rnd(10) + 1;\n      for (var i = 0; i < batch_count; i++) {\n        // 25% add, 25% remove, 25% change in place, 25% change and move\n        var op = rnd(4);\n        var which = rnd(correct.length);\n        if (op === 0 || step < 2 || !correct.length) {\n          // Add\n          var x = rnd(1000000);\n          coll.insert({run: run, x: x});\n          correct.push(x);\n          max_counters.add++;\n        } else if (op === 1 || op === 2) {\n          var x = correct[which];\n          if (op === 1)\n            // Small change, not likely to cause a move\n            var val = x + (rnd(2) ? -1 : 1);\n          else\n            // Large change, likely to cause a move\n            var val = rnd(1000000);\n          coll.update({run: run, x: x}, {$set: {x: val}});\n          correct[which] = val;\n          max_counters.change++;\n          max_counters.move++;\n        } else {\n          coll.remove({run: run, x: correct[which]});\n          correct.splice(which, 1);\n          max_counters.remove++;\n        }\n      }\n      if (Meteor.isServer)\n        obs._multiplexer._observeDriver._resumePolling();\n\n    });\n\n    // Did we actually deliver messages that mutated the array in the\n    // right way?\n    correct.sort(function (a,b) {return a-b;});\n    test.equal(actual, correct);\n\n    // Did we limit ourselves to one 'moved' message per change,\n    // rather than O(results) moved messages?\n    _.each(max_counters, function (v, k) {\n      test.isTrue(max_counters[k] >= counters[k], k);\n    });\n\n    Meteor.defer(doStep);\n  };\n\n  doStep();\n\n});\n\nTinytest.addAsync(\"mongo-livedata - scribbling, \" + idGeneration, function (test, onComplete) {\n  var run = test.runId();\n  var coll;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"livedata_test_collection_\"+run, collectionOptions);\n  }\n\n  var numAddeds = 0;\n  var handle = coll.find({run: run}).observe({\n    addedAt: function (o) {\n      // test that we can scribble on the object we get back from Mongo without\n      // breaking anything.  The worst possible scribble is messing with _id.\n      delete o._id;\n      numAddeds++;\n    }\n  });\n  _.each([123, 456, 789], function (abc) {\n    runInFence(function () {\n      coll.insert({run: run, abc: abc});\n    });\n  });\n  handle.stop();\n  // will be 6 (1+2+3) if we broke diffing!\n  test.equal(numAddeds, 3);\n\n  onComplete();\n});\n\nTinytest.addAsync(\"mongo-livedata - stop handle in callback, \" + idGeneration, function (test, onComplete) {\n  var run = Random.id();\n  var coll;\n  if (Meteor.isClient) {\n    coll = new Mongo.Collection(null, collectionOptions); // local, unmanaged\n  } else {\n    coll = new Mongo.Collection(\"stopHandleInCallback-\"+run, collectionOptions);\n  }\n\n  var output = [];\n\n  var handle = coll.find().observe({\n    added: function (doc) {\n      output.push({added: doc._id});\n    },\n    changed: function (newDoc) {\n      output.push('changed');\n      handle.stop();\n    }\n  });\n\n  test.equal(output, []);\n\n  // Insert a document. Observe that the added callback is called.\n  var docId;\n  runInFence(function () {\n    docId = coll.insert({foo: 42});\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), {added: docId});\n\n  // Update it. Observe that the changed callback is called. This should also\n  // stop the observation.\n  runInFence(function() {\n    coll.update(docId, {$set: {bar: 10}});\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), 'changed');\n\n  // Update again. This shouldn't call the callback because we stopped the\n  // observation.\n  runInFence(function() {\n    coll.update(docId, {$set: {baz: 40}});\n  });\n  test.length(output, 0);\n\n  test.equal(coll.find().count(), 1);\n  test.equal(coll.findOne(docId),\n             {_id: docId, foo: 42, bar: 10, baz: 40});\n\n  onComplete();\n});\n\n// This behavior isn't great, but it beats deadlock.\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"mongo-livedata - recursive observe throws, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeInCallback-\"+run, collectionOptions);\n\n    var callbackCalled = false;\n    var handle = coll.find({}).observe({\n      added: function (newDoc) {\n        callbackCalled = true;\n        test.throws(function () {\n          coll.find({}).observe();\n        });\n      }\n    });\n    test.isFalse(callbackCalled);\n    // Insert a document. Observe that the added callback is called.\n    runInFence(function () {\n      coll.insert({foo: 42});\n    });\n    test.isTrue(callbackCalled);\n\n    handle.stop();\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - cursor dedup, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"cursorDedup-\"+run, collectionOptions);\n\n    var observer = function (noAdded) {\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n        }\n      };\n      if (!noAdded) {\n        callbacks.added = function (doc) {\n          output.push({added: doc._id});\n        };\n      }\n      var handle = coll.find({foo: 22}).observe(callbacks);\n      return {output: output, handle: handle};\n    };\n\n    // Insert a doc and start observing.\n    var docId1 = coll.insert({foo: 22});\n    var o1 = observer();\n    // Initial add.\n    test.length(o1.output, 1);\n    test.equal(o1.output.shift(), {added: docId1});\n\n    // Insert another doc (blocking until observes have fired).\n    var docId2;\n    runInFence(function () {\n      docId2 = coll.insert({foo: 22, bar: 5});\n    });\n    // Observed add.\n    test.length(o1.output, 1);\n    test.equal(o1.output.shift(), {added: docId2});\n\n    // Second identical observe.\n    var o2 = observer();\n    // Initial adds.\n    test.length(o2.output, 2);\n    test.include([docId1, docId2], o2.output[0].added);\n    test.include([docId1, docId2], o2.output[1].added);\n    test.notEqual(o2.output[0].added, o2.output[1].added);\n    o2.output.length = 0;\n    // Original observe not affected.\n    test.length(o1.output, 0);\n\n    // White-box test: both observes should share an ObserveMultiplexer.\n    var observeMultiplexer = o1.handle._multiplexer;\n    test.isTrue(observeMultiplexer);\n    test.isTrue(observeMultiplexer === o2.handle._multiplexer);\n\n    // Update. Both observes fire.\n    runInFence(function () {\n      coll.update(docId1, {$set: {x: 'y'}});\n    });\n    test.length(o1.output, 1);\n    test.length(o2.output, 1);\n    test.equal(o1.output.shift(), {changed: docId1});\n    test.equal(o2.output.shift(), {changed: docId1});\n\n    // Stop first handle. Second handle still around.\n    o1.handle.stop();\n    test.length(o1.output, 0);\n    test.length(o2.output, 0);\n\n    // Another update. Just the second handle should fire.\n    runInFence(function () {\n      coll.update(docId2, {$set: {z: 'y'}});\n    });\n    test.length(o1.output, 0);\n    test.length(o2.output, 1);\n    test.equal(o2.output.shift(), {changed: docId2});\n\n    // Stop second handle. Nothing should happen, but the multiplexer should\n    // be stopped.\n    test.isTrue(observeMultiplexer._handles);  // This will change.\n    o2.handle.stop();\n    test.length(o1.output, 0);\n    test.length(o2.output, 0);\n    // White-box: ObserveMultiplexer has nulled its _handles so you can't\n    // accidentally join to it.\n    test.isNull(observeMultiplexer._handles);\n\n    // Start yet another handle on the same query.\n    var o3 = observer();\n    // Initial adds.\n    test.length(o3.output, 2);\n    test.include([docId1, docId2], o3.output[0].added);\n    test.include([docId1, docId2], o3.output[1].added);\n    test.notEqual(o3.output[0].added, o3.output[1].added);\n    // Old observers not called.\n    test.length(o1.output, 0);\n    test.length(o2.output, 0);\n    // White-box: Different ObserveMultiplexer.\n    test.isTrue(observeMultiplexer !== o3.handle._multiplexer);\n\n    // Start another handle with no added callback. Regression test for #589.\n    var o4 = observer(true);\n\n    o3.handle.stop();\n    o4.handle.stop();\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - async server-side insert, \" + idGeneration, function (test, onComplete) {\n    // Tests that insert returns before the callback runs. Relies on the fact\n    // that mongo does not run the callback before spinning off the event loop.\n    var cname = Random.id();\n    var coll = new Mongo.Collection(cname);\n    var doc = { foo: \"bar\" };\n    var x = 0;\n    coll.insert(doc, function (err, result) {\n      test.equal(err, null);\n      test.equal(x, 1);\n      onComplete();\n    });\n    x++;\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - async server-side update, \" + idGeneration, function (test, onComplete) {\n    // Tests that update returns before the callback runs.\n    var cname = Random.id();\n    var coll = new Mongo.Collection(cname);\n    var doc = { foo: \"bar\" };\n    var x = 0;\n    var id = coll.insert(doc);\n    coll.update(id, { $set: { foo: \"baz\" } }, function (err, result) {\n      test.equal(err, null);\n      test.equal(result, 1);\n      test.equal(x, 1);\n      onComplete();\n    });\n    x++;\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - async server-side remove, \" + idGeneration, function (test, onComplete) {\n    // Tests that remove returns before the callback runs.\n    var cname = Random.id();\n    var coll = new Mongo.Collection(cname);\n    var doc = { foo: \"bar\" };\n    var x = 0;\n    var id = coll.insert(doc);\n    coll.remove(id, function (err, result) {\n      test.equal(err, null);\n      test.isFalse(coll.findOne(id));\n      test.equal(x, 1);\n      onComplete();\n    });\n    x++;\n  });\n\n  // compares arrays a and b w/o looking at order\n  var setsEqual = function (a, b) {\n    a = _.map(a, EJSON.stringify);\n    b = _.map(b, EJSON.stringify);\n    return _.isEmpty(_.difference(a, b)) && _.isEmpty(_.difference(b, a));\n  };\n\n  // This test mainly checks the correctness of oplog code dealing with limited\n  // queries. Compitablity with poll-diff is added as well.\n  Tinytest.addAsync(\"mongo-livedata - observe sorted, limited \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeLimit-\"+run, collectionOptions);\n\n    var observer = function () {\n      var state = {};\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        added: function (newDoc) {\n          output.push({added: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        removed: function (oldDoc) {\n          output.push({removed: oldDoc._id});\n          delete state[oldDoc._id];\n        }\n      };\n      var handle = coll.find({foo: 22},\n                             {sort: {bar: 1}, limit: 3}).observe(callbacks);\n\n      return {output: output, handle: handle, state: state};\n    };\n    var clearOutput = function (o) { o.output.splice(0, o.output.length); };\n\n    var ins = function (doc) {\n      var id; runInFence(function () { id = coll.insert(doc); });\n      return id;\n    };\n    var rem = function (sel) { runInFence(function () { coll.remove(sel); }); };\n    var upd = function (sel, mod, opt) {\n      runInFence(function () {\n        coll.update(sel, mod, opt);\n      });\n    };\n    // tests '_id' subfields for all documents in oplog buffer\n    var testOplogBufferIds = function (ids) {\n      if (!usesOplog)\n        return;\n      var bufferIds = [];\n      o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n        bufferIds.push(id);\n      });\n\n      test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n    };\n    var testSafeAppendToBufferFlag = function (expected) {\n      if (!usesOplog)\n        return;\n      test.equal(o.handle._multiplexer._observeDriver._safeAppendToBuffer,\n                 expected);\n    };\n\n    // We'll describe our state as follows.  5:1 means \"the document with\n    // _id=docId1 and bar=5\".  We list documents as\n    //   [ currently published | in the buffer ] outside the buffer\n    // If safeToAppendToBuffer is true, we'll say ]! instead.\n\n    // Insert a doc and start observing.\n    var docId1 = ins({foo: 22, bar: 5});\n    waitUntilOplogCaughtUp();\n\n    // State: [ 5:1 | ]!\n    var o = observer();\n    var usesOplog = o.handle._multiplexer._observeDriver._usesOplog;\n    // Initial add.\n    test.length(o.output, 1);\n    test.equal(o.output.shift(), {added: docId1});\n    testSafeAppendToBufferFlag(true);\n\n    // Insert another doc (blocking until observes have fired).\n    // State: [ 5:1 6:2 | ]!\n    var docId2 = ins({foo: 22, bar: 6});\n    // Observed add.\n    test.length(o.output, 1);\n    test.equal(o.output.shift(), {added: docId2});\n    testSafeAppendToBufferFlag(true);\n\n    var docId3 = ins({ foo: 22, bar: 3 });\n    // State: [ 3:3 5:1 6:2 | ]!\n    test.length(o.output, 1);\n    test.equal(o.output.shift(), {added: docId3});\n    testSafeAppendToBufferFlag(true);\n\n    // Add a non-matching document\n    ins({ foo: 13 });\n    // It shouldn't be added\n    test.length(o.output, 0);\n\n    // Add something that matches but is too big to fit in\n    var docId4 = ins({ foo: 22, bar: 7 });\n    // State: [ 3:3 5:1 6:2 | 7:4 ]!\n    // It shouldn't be added but should end up in the buffer.\n    test.length(o.output, 0);\n    testOplogBufferIds([docId4]);\n    testSafeAppendToBufferFlag(true);\n\n    // Let's add something small enough to fit in\n    var docId5 = ins({ foo: 22, bar: -1 });\n    // State: [ -1:5 3:3 5:1 | 6:2 7:4 ]!\n    // We should get an added and a removed events\n    test.length(o.output, 2);\n    // doc 2 was removed from the published set as it is too big to be in\n    test.isTrue(setsEqual(o.output, [{added: docId5}, {removed: docId2}]));\n    clearOutput(o);\n    testOplogBufferIds([docId2, docId4]);\n    testSafeAppendToBufferFlag(true);\n\n    // Now remove something and that doc 2 should be right back\n    rem(docId5);\n    // State: [ 3:3 5:1 6:2 | 7:4 ]!\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId5}, {added: docId2}]));\n    clearOutput(o);\n    testOplogBufferIds([docId4]);\n    testSafeAppendToBufferFlag(true);\n\n    // Add some negative numbers overflowing the buffer.\n    // New documents will take the published place, [3 5 6] will take the buffer\n    // and 7 will be outside of the buffer in MongoDB.\n    var docId6 = ins({ foo: 22, bar: -1 });\n    var docId7 = ins({ foo: 22, bar: -2 });\n    var docId8 = ins({ foo: 22, bar: -3 });\n    // State: [ -3:8 -2:7 -1:6 | 3:3 5:1 6:2 ] 7:4\n    test.length(o.output, 6);\n    var expected = [{added: docId6}, {removed: docId2},\n                    {added: docId7}, {removed: docId1},\n                    {added: docId8}, {removed: docId3}];\n    test.isTrue(setsEqual(o.output, expected));\n    clearOutput(o);\n    testOplogBufferIds([docId1, docId2, docId3]);\n    testSafeAppendToBufferFlag(false);\n\n    // If we update first 3 docs (increment them by 20), it would be\n    // interesting.\n    upd({ bar: { $lt: 0 }}, { $inc: { bar: 20 } }, { multi: true });\n    // State: [ 3:3 5:1 6:2 | ] 7:4 17:8 18:7 19:6\n    //   which triggers re-poll leaving us at\n    // State: [ 3:3 5:1 6:2 | 7:4 17:8 18:7 ] 19:6\n\n    // The updated documents can't find their place in published and they can't\n    // be buffered as we are not aware of the situation outside of the buffer.\n    // But since our buffer becomes empty, it will be refilled partially with\n    // updated documents.\n    test.length(o.output, 6);\n    var expectedRemoves = [{removed: docId6},\n                           {removed: docId7},\n                           {removed: docId8}];\n    var expectedAdds = [{added: docId3},\n                        {added: docId1},\n                        {added: docId2}];\n\n    test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n    clearOutput(o);\n    testOplogBufferIds([docId4, docId7, docId8]);\n    testSafeAppendToBufferFlag(false);\n\n    // Remove first 4 docs (3, 1, 2, 4) forcing buffer to become empty and\n    // schedule a repoll.\n    rem({ bar: { $lt: 10 } });\n    // State: [ 17:8 18:7 19:6 | ]!\n\n    // XXX the oplog code analyzes the events one by one: one remove after\n    // another. Poll-n-diff code, on the other side, analyzes the batch action\n    // of multiple remove. Because of that difference, expected outputs differ.\n    if (usesOplog) {\n      var expectedRemoves = [{removed: docId3}, {removed: docId1},\n                             {removed: docId2}, {removed: docId4}];\n      var expectedAdds = [{added: docId4}, {added: docId8},\n                          {added: docId7}, {added: docId6}];\n\n      test.length(o.output, 8);\n    } else {\n      var expectedRemoves = [{removed: docId3}, {removed: docId1},\n                             {removed: docId2}];\n      var expectedAdds = [{added: docId8}, {added: docId7}, {added: docId6}];\n\n      test.length(o.output, 6);\n    }\n\n    test.isTrue(setsEqual(o.output, expectedAdds.concat(expectedRemoves)));\n    clearOutput(o);\n    testOplogBufferIds([]);\n    testSafeAppendToBufferFlag(true);\n\n    var docId9 = ins({ foo: 22, bar: 21 });\n    var docId10 = ins({ foo: 22, bar: 31 });\n    var docId11 = ins({ foo: 22, bar: 41 });\n    var docId12 = ins({ foo: 22, bar: 51 });\n    // State: [ 17:8 18:7 19:6 | 21:9 31:10 41:11 ] 51:12\n\n    testOplogBufferIds([docId9, docId10, docId11]);\n    testSafeAppendToBufferFlag(false);\n    test.length(o.output, 0);\n    upd({ bar: { $lt: 20 } }, { $inc: { bar: 5 } }, { multi: true });\n    // State: [ 21:9 22:8 23:7 | 24:6 31:10 41:11 ] 51:12\n    test.length(o.output, 4);\n    test.isTrue(setsEqual(o.output, [{removed: docId6},\n                                     {added: docId9},\n                                     {changed: docId7},\n                                     {changed: docId8}]));\n    clearOutput(o);\n    testOplogBufferIds([docId6, docId10, docId11]);\n    testSafeAppendToBufferFlag(false);\n\n    rem(docId9);\n    // State: [ 22:8 23:7 24:6 | 31:10 41:11 ] 51:12\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId9}, {added: docId6}]));\n    clearOutput(o);\n    testOplogBufferIds([docId10, docId11]);\n    testSafeAppendToBufferFlag(false);\n\n    upd({ bar: { $gt: 25 } }, { $inc: { bar: -7.5 } }, { multi: true });\n    // State: [ 22:8 23:7 23.5:10 | 24:6 ] 33.5:11 43.5:12\n    // 33.5 doesn't update in-place in buffer, because it the driver is not sure\n    // it can do it: because the buffer does not have the safe append flag set,\n    // for all it knows there is a different doc which is less than 33.5.\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId6}, {added: docId10}]));\n    clearOutput(o);\n    testOplogBufferIds([docId6]);\n    testSafeAppendToBufferFlag(false);\n\n    // Force buffer objects to be moved into published set so we can check them\n    rem(docId7);\n    rem(docId8);\n    rem(docId10);\n    // State: [ 24:6 | ] 33.5:11 43.5:12\n    //    triggers repoll\n    // State: [ 24:6 33.5:11 43.5:12 | ]!\n    test.length(o.output, 6);\n    test.isTrue(setsEqual(o.output, [{removed: docId7}, {removed: docId8},\n                                     {removed: docId10}, {added: docId6},\n                                     {added: docId11}, {added: docId12}]));\n\n    test.length(_.keys(o.state), 3);\n    test.equal(o.state[docId6], { _id: docId6, foo: 22, bar: 24 });\n    test.equal(o.state[docId11], { _id: docId11, foo: 22, bar: 33.5 });\n    test.equal(o.state[docId12], { _id: docId12, foo: 22, bar: 43.5 });\n    clearOutput(o);\n    testOplogBufferIds([]);\n    testSafeAppendToBufferFlag(true);\n\n    var docId13 = ins({ foo: 22, bar: 50 });\n    var docId14 = ins({ foo: 22, bar: 51 });\n    var docId15 = ins({ foo: 22, bar: 52 });\n    var docId16 = ins({ foo: 22, bar: 53 });\n    // State: [ 24:6 33.5:11 43.5:12 | 50:13 51:14 52:15 ] 53:16\n    test.length(o.output, 0);\n    testOplogBufferIds([docId13, docId14, docId15]);\n    testSafeAppendToBufferFlag(false);\n\n    // Update something that's outside the buffer to be in the buffer, writing\n    // only to the sort key.\n    upd(docId16, {$set: {bar: 10}});\n    // State: [ 10:16 24:6 33.5:11 | 43.5:12 50:13 51:14 ] 52:15\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{removed: docId12}, {added: docId16}]));\n    clearOutput(o);\n    testOplogBufferIds([docId12, docId13, docId14]);\n    testSafeAppendToBufferFlag(false);\n\n    o.handle.stop();\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, sort fields \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeLimit-\"+run, collectionOptions);\n\n    var observer = function () {\n      var state = {};\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        added: function (newDoc) {\n          output.push({added: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        removed: function (oldDoc) {\n          output.push({removed: oldDoc._id});\n          delete state[oldDoc._id];\n        }\n      };\n      var handle = coll.find({}, {sort: {x: 1},\n                                  limit: 2,\n                                  fields: {y: 1}}).observe(callbacks);\n\n      return {output: output, handle: handle, state: state};\n    };\n    var clearOutput = function (o) { o.output.splice(0, o.output.length); };\n    var ins = function (doc) {\n      var id; runInFence(function () { id = coll.insert(doc); });\n      return id;\n    };\n    var rem = function (id) {\n      runInFence(function () { coll.remove(id); });\n    };\n\n    var o = observer();\n\n    var docId1 = ins({ x: 1, y: 1222 });\n    var docId2 = ins({ x: 5, y: 5222 });\n\n    test.length(o.output, 2);\n    test.equal(o.output, [{added: docId1}, {added: docId2}]);\n    clearOutput(o);\n\n    var docId3 = ins({ x: 7, y: 7222 });\n    test.length(o.output, 0);\n\n    var docId4 = ins({ x: -1, y: -1222 });\n\n    // Becomes [docId4 docId1 | docId2 docId3]\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{added: docId4}, {removed: docId2}]));\n\n    test.equal(_.size(o.state), 2);\n    test.equal(o.state[docId4], {_id: docId4, y: -1222});\n    test.equal(o.state[docId1], {_id: docId1, y: 1222});\n    clearOutput(o);\n\n    rem(docId2);\n    // Becomes [docId4 docId1 | docId3]\n    test.length(o.output, 0);\n\n    rem(docId4);\n    // Becomes [docId1 docId3]\n    test.length(o.output, 2);\n    test.isTrue(setsEqual(o.output, [{added: docId3}, {removed: docId4}]));\n\n    test.equal(_.size(o.state), 2);\n    test.equal(o.state[docId3], {_id: docId3, y: 7222});\n    test.equal(o.state[docId1], {_id: docId1, y: 1222});\n    clearOutput(o);\n\n    onComplete();\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - observe sorted, limited, big initial set\" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"observeLimit-\"+run, collectionOptions);\n\n    var observer = function () {\n      var state = {};\n      var output = [];\n      var callbacks = {\n        changed: function (newDoc) {\n          output.push({changed: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        added: function (newDoc) {\n          output.push({added: newDoc._id});\n          state[newDoc._id] = newDoc;\n        },\n        removed: function (oldDoc) {\n          output.push({removed: oldDoc._id});\n          delete state[oldDoc._id];\n        }\n      };\n      var handle = coll.find({}, {sort: {x: 1, y: 1}, limit: 3})\n                    .observe(callbacks);\n\n      return {output: output, handle: handle, state: state};\n    };\n    var clearOutput = function (o) { o.output.splice(0, o.output.length); };\n    var ins = function (doc) {\n      var id; runInFence(function () { id = coll.insert(doc); });\n      return id;\n    };\n    var rem = function (id) {\n      runInFence(function () { coll.remove(id); });\n    };\n    // tests '_id' subfields for all documents in oplog buffer\n    var testOplogBufferIds = function (ids) {\n      var bufferIds = [];\n      o.handle._multiplexer._observeDriver._unpublishedBuffer.forEach(function (x, id) {\n        bufferIds.push(id);\n      });\n\n      test.isTrue(setsEqual(ids, bufferIds), \"expected: \" + ids + \"; got: \" + bufferIds);\n    };\n    var testSafeAppendToBufferFlag = function (expected) {\n      if (expected)\n        test.isTrue(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n      else\n        test.isFalse(o.handle._multiplexer._observeDriver._safeAppendToBuffer);\n    };\n\n    var ids = {};\n    _.each([2, 4, 1, 3, 5, 5, 9, 1, 3, 2, 5], function (x, i) {\n      ids[i] = ins({ x: x, y: i });\n    });\n\n    // Ensure that we are past all the 'i' entries before we run the query, so\n    // that we get the expected phase transitions.\n    waitUntilOplogCaughtUp();\n\n    var o = observer();\n    var usesOplog = o.handle._multiplexer._observeDriver._usesOplog;\n    //  x: [1 1 2 | 2 3 3] 4 5 5 5  9\n    // id: [2 7 0 | 9 3 8] 1 4 5 10 6\n\n    test.length(o.output, 3);\n    test.isTrue(setsEqual([{added: ids[2]}, {added: ids[7]}, {added: ids[0]}], o.output));\n    usesOplog && testOplogBufferIds([ids[9], ids[3], ids[8]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem(ids[0]);\n    //  x: [1 1 2 | 3 3] 4 5 5 5  9\n    // id: [2 7 9 | 3 8] 1 4 5 10 6\n    test.length(o.output, 2);\n    test.isTrue(setsEqual([{removed: ids[0]}, {added: ids[9]}], o.output));\n    usesOplog && testOplogBufferIds([ids[3], ids[8]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem(ids[7]);\n    //  x: [1 2 3 | 3] 4 5 5 5  9\n    // id: [2 9 3 | 8] 1 4 5 10 6\n    test.length(o.output, 2);\n    test.isTrue(setsEqual([{removed: ids[7]}, {added: ids[3]}], o.output));\n    usesOplog && testOplogBufferIds([ids[8]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem(ids[3]);\n    //  x: [1 2 3 | 4 5 5] 5  9\n    // id: [2 9 8 | 1 4 5] 10 6\n    test.length(o.output, 2);\n    test.isTrue(setsEqual([{removed: ids[3]}, {added: ids[8]}], o.output));\n    usesOplog && testOplogBufferIds([ids[1], ids[4], ids[5]]);\n    usesOplog && testSafeAppendToBufferFlag(false);\n    clearOutput(o);\n\n    rem({ x: {$lt: 4} });\n    //  x: [4 5 5 | 5  9]\n    // id: [1 4 5 | 10 6]\n    test.length(o.output, 6);\n    test.isTrue(setsEqual([{removed: ids[2]}, {removed: ids[9]}, {removed: ids[8]},\n                           {added: ids[5]}, {added: ids[4]}, {added: ids[1]}], o.output));\n    usesOplog && testOplogBufferIds([ids[10], ids[6]]);\n    usesOplog && testSafeAppendToBufferFlag(true);\n    clearOutput(o);\n\n\n    onComplete();\n  });\n}\n\n\ntestAsyncMulti('mongo-livedata - empty documents, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n\n    coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n    }));\n  }\n]);\n\n// Regression test for #2413.\ntestAsyncMulti('mongo-livedata - upsert without callback, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n\n    // No callback!  Before fixing #2413, this method never returned and\n    // so no future DDP methods worked either.\n    coll.upsert('foo', {bar: 1});\n    // Do something else on the same method and expect it to actually work.\n    // (If the bug comes back, this will 'async batch timeout'.)\n    coll.insert({}, expect(function(){}));\n  }\n]);\n\n// See https://github.com/meteor/meteor/issues/594.\ntestAsyncMulti('mongo-livedata - document with length, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    var coll = self.coll = new Mongo.Collection(self.collectionName, collectionOptions);\n\n    coll.insert({foo: 'x', length: 0}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.docId = id;\n      test.equal(coll.findOne(self.docId),\n                 {_id: self.docId, foo: 'x', length: 0});\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    var coll = self.coll;\n    coll.update(self.docId, {$set: {length: 5}}, expect(function (err) {\n      test.isFalse(err);\n      test.equal(coll.findOne(self.docId),\n                 {_id: self.docId, foo: 'x', length: 5});\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - document with a date, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({d: new Date(1356152390004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      test.equal(coll.findOne().d.getFullYear(), 2012);\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - document goes through a transform, ' + idGeneration, [\n  function (test, expect) {\n    var self = this;\n    var seconds = function (doc) {\n      doc.seconds = function () {return doc.d.getSeconds();};\n      return doc;\n    };\n    TRANSFORMS[\"seconds\"] = seconds;\n    self.collectionOptions = {\n      idGeneration: idGeneration,\n      transform: seconds,\n      transformName: \"seconds\"\n    };\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(self.collectionName, self.collectionOptions);\n    var obs;\n    var expectAdd = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n    });\n    var expectRemove = expect(function (doc) {\n      test.equal(doc.seconds(), 50);\n      obs.stop();\n    });\n    self.coll.insert({d: new Date(1356152390004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      var cursor = self.coll.find();\n      obs = cursor.observe({\n        added: expectAdd,\n        removed: expectRemove\n      });\n      test.equal(cursor.count(), 1);\n      test.equal(cursor.fetch()[0].seconds(), 50);\n      test.equal(self.coll.findOne().seconds(), 50);\n      test.equal(self.coll.findOne({}, {transform: null}).seconds, undefined);\n      test.equal(self.coll.findOne({}, {\n        transform: function (doc) {return {seconds: doc.d.getSeconds()};}\n      }).seconds, 50);\n      self.coll.remove(id);\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    self.coll.insert({d: new Date(1356152390004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id1 = id;\n    }));\n    self.coll.insert({d: new Date(1356152391004)}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      self.id2 = id;\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - transform sets _id if not present, ' + idGeneration, [\n  function (test, expect) {\n    var self = this;\n    var justId = function (doc) {\n      return _.omit(doc, '_id');\n    };\n    TRANSFORMS[\"justId\"] = justId;\n    var collectionOptions = {\n      idGeneration: idGeneration,\n      transform: justId,\n      transformName: \"justId\"\n    };\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    self.coll.insert({}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      test.equal(self.coll.findOne()._id, id);\n    }));\n  }\n]);\n\nvar bin = Base64.decode(\n  \"TWFuIGlzIGRpc3Rpbmd1aXNoZWQsIG5vdCBvbmx5IGJ5IGhpcyBy\" +\n    \"ZWFzb24sIGJ1dCBieSB0aGlzIHNpbmd1bGFyIHBhc3Npb24gZnJv\" +\n    \"bSBvdGhlciBhbmltYWxzLCB3aGljaCBpcyBhIGx1c3Qgb2YgdGhl\" +\n    \"IG1pbmQsIHRoYXQgYnkgYSBwZXJzZXZlcmFuY2Ugb2YgZGVsaWdo\" +\n    \"dCBpbiB0aGUgY29udGludWVkIGFuZCBpbmRlZmF0aWdhYmxlIGdl\" +\n    \"bmVyYXRpb24gb2Yga25vd2xlZGdlLCBleGNlZWRzIHRoZSBzaG9y\" +\n    \"dCB2ZWhlbWVuY2Ugb2YgYW55IGNhcm5hbCBwbGVhc3VyZS4=\");\n\ntestAsyncMulti('mongo-livedata - document with binary data, ' + idGeneration, [\n  function (test, expect) {\n    // XXX probably shouldn't use EJSON's private test symbols\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    coll.insert({b: bin}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      var cursor = coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = coll.findOne();\n      test.isTrue(EJSON.isBinary(inColl.b));\n      test.equal(inColl.b, bin);\n    }));\n  }\n]);\n\ntestAsyncMulti('mongo-livedata - document with a custom type, ' + idGeneration, [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName, collectionOptions);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(this.collectionName, collectionOptions);\n    var docId;\n    // Dog is implemented at the top of the file, outside of the idGeneration\n    // loop (so that we only call EJSON.addType once).\n    var d = new Dog(\"reginald\", \"purple\");\n    self.coll.insert({d: d}, expect(function (err, id) {\n      test.isFalse(err);\n      test.isTrue(id);\n      docId = id;\n      self.docId = docId;\n      var cursor = self.coll.find();\n      test.equal(cursor.count(), 1);\n      var inColl = self.coll.findOne();\n      test.isTrue(inColl);\n      inColl && test.equal(inColl.d.speak(), \"woof\");\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.insert(new Dog(\"rover\", \"orange\"), expect(function (err, id) {\n      test.isTrue(err);\n      test.isFalse(id);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    self.coll.update(\n      self.docId, new Dog(\"rover\", \"orange\"), expect(function (err) {\n        test.isTrue(err);\n      }));\n  }\n]);\n\nif (Meteor.isServer) {\n  Tinytest.addAsync(\"mongo-livedata - update return values, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_update_result_\"+run, collectionOptions);\n\n    coll.insert({ foo: \"bar\" });\n    coll.insert({ foo: \"baz\" });\n    test.equal(coll.update({}, { $set: { foo: \"qux\" } }, { multi: true }),\n               2);\n    coll.update({}, { $set: { foo: \"quux\" } }, { multi: true }, function (err, result) {\n      test.isFalse(err);\n      test.equal(result, 2);\n      onComplete();\n    });\n  });\n\n  Tinytest.addAsync(\"mongo-livedata - remove return values, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_update_result_\"+run, collectionOptions);\n\n    coll.insert({ foo: \"bar\" });\n    coll.insert({ foo: \"baz\" });\n    test.equal(coll.remove({}), 2);\n    coll.insert({ foo: \"bar\" });\n    coll.insert({ foo: \"baz\" });\n    coll.remove({}, function (err, result) {\n      test.isFalse(err);\n      test.equal(result, 2);\n      onComplete();\n    });\n  });\n\n\n  Tinytest.addAsync(\"mongo-livedata - id-based invalidation, \" + idGeneration, function (test, onComplete) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_invalidation_collection_\"+run, collectionOptions);\n\n    coll.allow({\n      update: function () {return true;},\n      remove: function () {return true;}\n    });\n\n    var id1 = coll.insert({x: 42, is1: true});\n    var id2 = coll.insert({x: 50, is2: true});\n\n    var polls = {};\n    var handlesToStop = [];\n    var observe = function (name, query) {\n      var handle = coll.find(query).observeChanges({\n        // Make sure that we only poll on invalidation, not due to time, and\n        // keep track of when we do. Note: this option disables the use of\n        // oplogs (which admittedly is somewhat irrelevant to this feature).\n        _testOnlyPollCallback: function () {\n          polls[name] = (name in polls ? polls[name] + 1 : 1);\n        }\n      });\n      handlesToStop.push(handle);\n    };\n\n    observe(\"all\", {});\n    observe(\"id1Direct\", id1);\n    observe(\"id1InQuery\", {_id: id1, z: null});\n    observe(\"id2Direct\", id2);\n    observe(\"id2InQuery\", {_id: id2, z: null});\n    observe(\"bothIds\", {_id: {$in: [id1, id2]}});\n\n    var resetPollsAndRunInFence = function (f) {\n      polls = {};\n      runInFence(f);\n    };\n\n    // Update id1 directly. This should poll all but the \"id2\" queries. \"all\"\n    // and \"bothIds\" increment by 2 because they are looking at both.\n    resetPollsAndRunInFence(function () {\n      coll.update(id1, {$inc: {x: 1}});\n    });\n    test.equal(\n      polls,\n      {all: 1, id1Direct: 1, id1InQuery: 1, bothIds: 1});\n\n    // Update id2 using a funny query. This should poll all but the \"id1\"\n    // queries.\n    resetPollsAndRunInFence(function () {\n      coll.update({_id: id2, q: null}, {$inc: {x: 1}});\n    });\n    test.equal(\n      polls,\n      {all: 1, id2Direct: 1, id2InQuery: 1, bothIds: 1});\n\n    // Update both using a $in query. Should poll each of them exactly once.\n    resetPollsAndRunInFence(function () {\n      coll.update({_id: {$in: [id1, id2]}, q: null}, {$inc: {x: 1}});\n    });\n    test.equal(\n      polls,\n      {all: 1, id1Direct: 1, id1InQuery: 1, id2Direct: 1, id2InQuery: 1,\n       bothIds: 1});\n\n    _.each(handlesToStop, function (h) {h.stop();});\n    onComplete();\n  });\n\n  Tinytest.add(\"mongo-livedata - upsert error parse, \" + idGeneration, function (test) {\n    var run = test.runId();\n    var coll = new Mongo.Collection(\"livedata_upsert_errorparse_collection_\"+run, collectionOptions);\n\n    coll.insert({_id: 'foobar'});\n    var err;\n    try {\n      coll.update({_id: 'foobar'}, {_id: 'cowbar'});\n    } catch (e) {\n      err = e;\n    }\n    test.isTrue(err);\n    test.isTrue(MongoInternals.Connection._isCannotChangeIdError(err));\n\n    try {\n      coll.insert({_id: 'foobar'});\n    } catch (e) {\n      err = e;\n    }\n    test.isTrue(err);\n    // duplicate id error is not same as change id error\n    test.isFalse(MongoInternals.Connection._isCannotChangeIdError(err));\n  });\n\n} // end Meteor.isServer\n\n// This test is duplicated below (with some changes) for async upserts that go\n// over the network.\n_.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n  _.each([true, false], function (useUpdate) {\n    _.each([true, false], function (useDirectCollection) {\n      Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert\" + (minimongo ? \" minimongo\" : \"\") + (useDirectCollection ? \" direct collection \" : \"\") + \", \" + idGeneration, function (test) {\n        var run = test.runId();\n        var options = collectionOptions;\n        // We don't get ids back when we use update() to upsert, or when we are\n        // directly calling MongoConnection.upsert().\n        var skipIds = useUpdate || (! minimongo && useDirectCollection);\n        if (minimongo)\n          options = _.extend({}, collectionOptions, { connection: null });\n        var coll = new Mongo.Collection(\n          \"livedata_upsert_collection_\"+run+\n            (useUpdate ? \"_update_\" : \"\") +\n            (minimongo ? \"_minimongo_\" : \"\") +\n            (useDirectCollection ? \"_direct_\" : \"\") + \"\",\n          options\n        );\n        if (useDirectCollection)\n          coll = coll._collection;\n\n        var result1 = upsert(coll, useUpdate, {foo: 'bar'}, {foo: 'bar'});\n        test.equal(result1.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result1.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: 'bar', _id: result1.insertedId}]);\n\n        var result2 = upsert(coll, useUpdate, {foo: 'bar'}, {foo: 'baz'});\n        test.equal(result2.numberAffected, 1);\n        if (! skipIds)\n          test.isFalse(result2.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: 'baz', _id: result1.insertedId}]);\n\n        coll.remove({});\n\n        // Test values that require transformation to go into Mongo:\n\n        var t1 = new Mongo.ObjectID();\n        var t2 = new Mongo.ObjectID();\n        var result3 = upsert(coll, useUpdate, {foo: t1}, {foo: t1});\n        test.equal(result3.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result3.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: t1, _id: result3.insertedId}]);\n\n        var result4 = upsert(coll, useUpdate, {foo: t1}, {foo: t2});\n        test.equal(result2.numberAffected, 1);\n        if (! skipIds)\n          test.isFalse(result2.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{foo: t2, _id: result3.insertedId}]);\n\n        coll.remove({});\n\n        // Test modification by upsert\n\n        var result5 = upsert(coll, useUpdate, {name: 'David'}, {$set: {foo: 1}});\n        test.equal(result5.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result5.insertedId);\n        var davidId = result5.insertedId;\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 1, _id: davidId}]);\n\n        test.throws(function () {\n          // test that bad modifier fails fast\n          upsert(coll, useUpdate, {name: 'David'}, {$blah: {foo: 2}});\n        });\n\n\n        var result6 = upsert(coll, useUpdate, {name: 'David'}, {$set: {foo: 2}});\n        test.equal(result6.numberAffected, 1);\n        if (! skipIds)\n          test.isFalse(result6.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 2,\n                                                               _id: result5.insertedId}]);\n\n        var emilyId = coll.insert({name: 'Emily', foo: 2});\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 2, _id: davidId},\n                                                              {name: 'Emily', foo: 2, _id: emilyId}]);\n\n        // multi update by upsert\n        var result7 = upsert(coll, useUpdate, {foo: 2},\n                             {$set: {bar: 7},\n                              $setOnInsert: {name: 'Fred', foo: 2}},\n                             {multi: true});\n        test.equal(result7.numberAffected, 2);\n        if (! skipIds)\n          test.isFalse(result7.insertedId);\n        compareResults(test, skipIds, coll.find().fetch(), [{name: 'David', foo: 2, bar: 7, _id: davidId},\n                                                              {name: 'Emily', foo: 2, bar: 7, _id: emilyId}]);\n\n        // insert by multi upsert\n        var result8 = upsert(coll, useUpdate, {foo: 3},\n                             {$set: {bar: 7},\n                              $setOnInsert: {name: 'Fred', foo: 2}},\n                             {multi: true});\n        test.equal(result8.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result8.insertedId);\n        var fredId = result8.insertedId;\n        compareResults(test, skipIds, coll.find().fetch(),\n                       [{name: 'David', foo: 2, bar: 7, _id: davidId},\n                        {name: 'Emily', foo: 2, bar: 7, _id: emilyId},\n                        {name: 'Fred', foo: 2, bar: 7, _id: fredId}]);\n\n        // test `insertedId` option\n        var result9 = upsert(coll, useUpdate, {name: 'Steve'},\n                             {name: 'Steve'},\n                             {insertedId: 'steve'});\n        test.equal(result9.numberAffected, 1);\n        if (! skipIds)\n          test.equal(result9.insertedId, 'steve');\n        compareResults(test, skipIds, coll.find().fetch(),\n                       [{name: 'David', foo: 2, bar: 7, _id: davidId},\n                        {name: 'Emily', foo: 2, bar: 7, _id: emilyId},\n                        {name: 'Fred', foo: 2, bar: 7, _id: fredId},\n                        {name: 'Steve', _id: 'steve'}]);\n        test.isTrue(coll.findOne('steve'));\n        test.isFalse(coll.findOne('fred'));\n\n        // Test $ operator in selectors.\n\n        var result10 = upsert(coll, useUpdate,\n                              {$or: [{name: 'David'}, {name: 'Emily'}]},\n                              {$set: {foo: 3}}, {multi: true});\n        test.equal(result10.numberAffected, 2);\n        if (! skipIds)\n          test.isFalse(result10.insertedId);\n        compareResults(test, skipIds,\n                       [coll.findOne({name: 'David'}), coll.findOne({name: 'Emily'})],\n                       [{name: 'David', foo: 3, bar: 7, _id: davidId},\n                        {name: 'Emily', foo: 3, bar: 7, _id: emilyId}]\n                      );\n\n        var result11 = upsert(\n          coll, useUpdate,\n          {\n            name: 'Charlie',\n            $or: [{ foo: 2}, { bar: 7 }]\n          },\n          { $set: { foo: 3 } }\n        );\n        test.equal(result11.numberAffected, 1);\n        if (! skipIds)\n          test.isTrue(result11.insertedId);\n        var charlieId = result11.insertedId;\n        compareResults(test, skipIds,\n                       coll.find({ name: 'Charlie' }).fetch(),\n                       [{name: 'Charlie', foo: 3, _id: charlieId}]);\n      });\n    });\n  });\n});\n\nvar asyncUpsertTestName = function (useNetwork, useDirectCollection,\n                                    useUpdate, idGeneration) {\n  return \"mongo-livedata - async \" +\n    (useUpdate ? \"update \" : \"\") +\n    \"upsert \" +\n    (useNetwork ? \"over network \" : \"\") +\n    (useDirectCollection ? \", direct collection \" : \"\") +\n    idGeneration;\n};\n\n// This is a duplicate of the test above, with some changes to make it work for\n// callback style. On the client, we test server-backed and in-memory\n// collections, and run the tests for both the Mongo.Collection and the\n// LocalCollection. On the server, we test mongo-backed collections, for both\n// the Mongo.Collection and the MongoConnection.\n//\n// XXX Rewrite with testAsyncMulti, that would simplify things a lot!\n_.each(Meteor.isServer ? [false] : [true, false], function (useNetwork) {\n  _.each(useNetwork ? [false] : [true, false], function (useDirectCollection) {\n    _.each([true, false], function (useUpdate) {\n      Tinytest.addAsync(asyncUpsertTestName(useNetwork, useDirectCollection, useUpdate, idGeneration), function (test, onComplete) {\n        var coll;\n        var run = test.runId();\n        var collName = \"livedata_upsert_collection_\"+run+\n              (useUpdate ? \"_update_\" : \"\") +\n              (useNetwork ? \"_network_\" : \"\") +\n              (useDirectCollection ? \"_direct_\" : \"\");\n\n        var next0 = function () {\n          // Test starts here.\n          upsert(coll, useUpdate, {_id: 'foo'}, {_id: 'foo', foo: 'bar'}, next1);\n        };\n\n        if (useNetwork) {\n          Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n          coll = new Mongo.Collection(collName, collectionOptions);\n          Meteor.subscribe(\"c-\" + collName, next0);\n        } else {\n          var opts = _.clone(collectionOptions);\n          if (Meteor.isClient)\n            opts.connection = null;\n          coll = new Mongo.Collection(collName, opts);\n          if (useDirectCollection)\n            coll = coll._collection;\n        }\n\n        var result1;\n        var next1 = function (err, result) {\n          result1 = result;\n          test.equal(result1.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result1.insertedId);\n            test.equal(result1.insertedId, 'foo');\n          }\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: 'bar', _id: 'foo'}]);\n          upsert(coll, useUpdate, {_id: 'foo'}, {foo: 'baz'}, next2);\n        };\n\n        if (! useNetwork) {\n          next0();\n        }\n\n        var t1, t2, result2;\n        var next2 = function (err, result) {\n          result2 = result;\n          test.equal(result2.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result2.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: 'baz', _id: result1.insertedId}]);\n          coll.remove({_id: 'foo'});\n          compareResults(test, useUpdate, coll.find().fetch(), []);\n\n          // Test values that require transformation to go into Mongo:\n\n          t1 = new Mongo.ObjectID();\n          t2 = new Mongo.ObjectID();\n          upsert(coll, useUpdate, {_id: t1}, {_id: t1, foo: 'bar'}, next3);\n        };\n\n        var result3;\n        var next3 = function (err, result) {\n          result3 = result;\n          test.equal(result3.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result3.insertedId);\n            test.equal(t1, result3.insertedId);\n          }\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: t1, foo: 'bar'}]);\n\n          upsert(coll, useUpdate, {_id: t1}, {foo: t2}, next4);\n        };\n\n        var next4 = function (err, result4) {\n          test.equal(result2.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result2.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: t2, _id: result3.insertedId}]);\n\n          coll.remove({_id: t1});\n\n          // Test modification by upsert\n          upsert(coll, useUpdate, {_id: 'David'}, {$set: {foo: 1}}, next5);\n        };\n\n        var result5;\n        var next5 = function (err, result) {\n          result5 = result;\n          test.equal(result5.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result5.insertedId);\n            test.equal(result5.insertedId, 'David');\n          }\n          var davidId = result5.insertedId;\n          compareResults(test, useUpdate, coll.find().fetch(), [{foo: 1, _id: davidId}]);\n\n          if (! Meteor.isClient && useDirectCollection) {\n            // test that bad modifier fails\n            // The stub throws an exception about the invalid modifier, which\n            // livedata logs (so we suppress it).\n            Meteor._suppress_log(1);\n            upsert(coll, useUpdate, {_id: 'David'}, {$blah: {foo: 2}}, function (err) {\n              if (! (Meteor.isClient && useDirectCollection))\n                test.isTrue(err);\n              upsert(coll, useUpdate, {_id: 'David'}, {$set: {foo: 2}}, next6);\n            });\n          } else {\n            // XXX skip this test for now for LocalCollection; the fact that\n            // we're in a nested sequence of callbacks means we're inside a\n            // Meteor.defer, which means the exception just gets\n            // logged. Something should be done about this at some point?  Maybe\n            // LocalCollection callbacks don't really have to be deferred.\n            upsert(coll, useUpdate, {_id: 'David'}, {$set: {foo: 2}}, next6);\n          }\n        };\n\n        var result6;\n        var next6 = function (err, result) {\n          result6 = result;\n          test.equal(result6.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result6.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: 'David', foo: 2}]);\n\n          var emilyId = coll.insert({_id: 'Emily', foo: 2});\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: 'David', foo: 2},\n                                                                {_id: 'Emily', foo: 2}]);\n\n          // multi update by upsert.\n          // We can't actually update multiple documents since we have to do it by\n          // id, but at least make sure the multi flag doesn't mess anything up.\n          upsert(coll, useUpdate, {_id: 'Emily'},\n                 {$set: {bar: 7},\n                  $setOnInsert: {name: 'Fred', foo: 2}},\n                 {multi: true}, next7);\n        };\n\n        var result7;\n        var next7 = function (err, result) {\n          result7 = result;\n          test.equal(result7.numberAffected, 1);\n          if (! useUpdate)\n            test.isFalse(result7.insertedId);\n          compareResults(test, useUpdate, coll.find().fetch(), [{_id: 'David', foo: 2},\n                                                                {_id: 'Emily', foo: 2, bar: 7}]);\n\n          // insert by multi upsert\n          upsert(coll, useUpdate, {_id: 'Fred'},\n                 {$set: {bar: 7},\n                  $setOnInsert: {name: 'Fred', foo: 2}},\n                 {multi: true}, next8);\n\n        };\n\n        var result8;\n        var next8 = function (err, result) {\n          result8 = result;\n\n          test.equal(result8.numberAffected, 1);\n          if (! useUpdate) {\n            test.isTrue(result8.insertedId);\n            test.equal(result8.insertedId, 'Fred');\n          }\n          var fredId = result8.insertedId;\n          compareResults(test, useUpdate,  coll.find().fetch(),\n                         [{_id: 'David', foo: 2},\n                          {_id: 'Emily', foo: 2, bar: 7},\n                          {name: 'Fred', foo: 2, bar: 7, _id: fredId}]);\n          onComplete();\n        };\n      });\n    });\n  });\n});\n\nif (Meteor.isClient) {\n  Tinytest.addAsync(\"mongo-livedata - async update/remove return values over network \" + idGeneration, function (test, onComplete) {\n    var coll;\n    var run = test.runId();\n    var collName = \"livedata_upsert_collection_\"+run;\n    Meteor.call(\"createInsecureCollection\", collName, collectionOptions);\n    coll = new Mongo.Collection(collName, collectionOptions);\n    Meteor.subscribe(\"c-\" + collName, function () {\n      coll.insert({ _id: \"foo\" });\n      coll.insert({ _id: \"bar\" });\n      coll.update({ _id: \"foo\" }, { $set: { foo: 1 } }, { multi: true }, function (err, result) {\n        test.isFalse(err);\n        test.equal(result, 1);\n        coll.update({ _id: \"foo\" }, { _id: \"foo\", foo: 2 }, function (err, result) {\n          test.isFalse(err);\n          test.equal(result, 1);\n          coll.update({ _id: \"baz\" }, { $set: { foo: 1 } }, function (err, result) {\n            test.isFalse(err);\n            test.equal(result, 0);\n            coll.remove({ _id: \"foo\" }, function (err, result) {\n              test.equal(result, 1);\n              coll.remove({ _id: \"baz\" }, function (err, result) {\n                test.equal(result, 0);\n                onComplete();\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\n// Runs a method and its stub which do some upserts. The method throws an error\n// if we don't get the right return values.\nif (Meteor.isClient) {\n  _.each([true, false], function (useUpdate) {\n    Tinytest.addAsync(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert in method, \" + idGeneration, function (test, onComplete) {\n      var run = test.runId();\n      upsertTestMethodColl = new Mongo.Collection(upsertTestMethod + \"_collection_\" + run, collectionOptions);\n      var m = {};\n      delete Meteor.connection._methodHandlers[upsertTestMethod];\n      m[upsertTestMethod] = function (run, useUpdate, options) {\n        upsertTestMethodImpl(upsertTestMethodColl, useUpdate, test);\n      };\n      Meteor.methods(m);\n      Meteor.call(upsertTestMethod, run, useUpdate, collectionOptions, function (err, result) {\n        test.isFalse(err);\n        onComplete();\n      });\n    });\n  });\n}\n\n_.each(Meteor.isServer ? [true, false] : [true], function (minimongo) {\n  _.each([true, false], function (useUpdate) {\n    Tinytest.add(\"mongo-livedata - \" + (useUpdate ? \"update \" : \"\") + \"upsert by id\" + (minimongo ? \" minimongo\" : \"\") + \", \" + idGeneration, function (test) {\n      var run = test.runId();\n      var options = collectionOptions;\n      if (minimongo)\n        options = _.extend({}, collectionOptions, { connection: null });\n      var coll = new Mongo.Collection(\"livedata_upsert_by_id_collection_\"+run, options);\n\n      var ret;\n      ret = upsert(coll, useUpdate, {_id: 'foo'}, {$set: {x: 1}});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.equal(ret.insertedId, 'foo');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{_id: 'foo', x: 1}]);\n\n      ret = upsert(coll, useUpdate, {_id: 'foo'}, {$set: {x: 2}});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.isFalse(ret.insertedId);\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{_id: 'foo', x: 2}]);\n\n      ret = upsert(coll, useUpdate, {_id: 'bar'}, {$set: {x: 1}});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.equal(ret.insertedId, 'bar');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{_id: 'foo', x: 2},\n                      {_id: 'bar', x: 1}]);\n\n      coll.remove({});\n      ret = upsert(coll, useUpdate, {_id: 'traq'}, {x: 1});\n\n      test.equal(ret.numberAffected, 1);\n      var myId = ret.insertedId;\n      if (useUpdate) {\n        myId = coll.findOne()._id;\n      }\n      // Starting with Mongo 2.6, upsert with entire document takes _id from the\n      // query, so the above upsert actually does an insert with _id traq\n      // instead of a random _id.  Whenever we are using our simulated upsert,\n      // we have this behavior (whether running against Mongo 2.4 or 2.6).\n      // https://jira.mongodb.org/browse/SERVER-5289\n      test.equal(myId, 'traq');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'}]);\n\n      // this time, insert as _id 'traz'\n      ret = upsert(coll, useUpdate, {_id: 'traz'}, {_id: 'traz', x: 2});\n      test.equal(ret.numberAffected, 1);\n      if (! useUpdate)\n        test.equal(ret.insertedId, 'traz');\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'},\n                      {x: 2, _id: 'traz'}]);\n\n      // now update _id 'traz'\n      ret = upsert(coll, useUpdate, {_id: 'traz'}, {x: 3});\n      test.equal(ret.numberAffected, 1);\n      test.isFalse(ret.insertedId);\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'},\n                      {x: 3, _id: 'traz'}]);\n\n      // now update, passing _id (which is ok as long as it's the same)\n      ret = upsert(coll, useUpdate, {_id: 'traz'}, {_id: 'traz', x: 4});\n      test.equal(ret.numberAffected, 1);\n      test.isFalse(ret.insertedId);\n      compareResults(test, useUpdate, coll.find().fetch(),\n                     [{x: 1, _id: 'traq'},\n                      {x: 4, _id: 'traz'}]);\n\n    });\n  });\n});\n\n});  // end idGeneration parametrization\n\nTinytest.add('mongo-livedata - rewrite selector', function (test) {\n  test.equal(Mongo.Collection._rewriteSelector({x: /^o+B/im}),\n             {x: {$regex: '^o+B', $options: 'im'}});\n  test.equal(Mongo.Collection._rewriteSelector({x: {$regex: /^o+B/im}}),\n             {x: {$regex: '^o+B', $options: 'im'}});\n  test.equal(Mongo.Collection._rewriteSelector({x: /^o+B/}),\n             {x: {$regex: '^o+B'}});\n  test.equal(Mongo.Collection._rewriteSelector({x: {$regex: /^o+B/}}),\n             {x: {$regex: '^o+B'}});\n  test.equal(Mongo.Collection._rewriteSelector('foo'),\n             {_id: 'foo'});\n\n  test.equal(\n    Mongo.Collection._rewriteSelector(\n      {'$or': [\n        {x: /^o/},\n        {y: /^p/},\n        {z: 'q'},\n        {w: {$regex: /^r/}}\n      ]}\n    ),\n    {'$or': [\n      {x: {$regex: '^o'}},\n      {y: {$regex: '^p'}},\n      {z: 'q'},\n      {w: {$regex: '^r'}}\n    ]}\n  );\n\n  test.equal(\n    Mongo.Collection._rewriteSelector(\n      {'$or': [\n        {'$and': [\n          {x: /^a/i},\n          {y: /^b/},\n          {z: {$regex: /^c/i}},\n          {w: {$regex: '^[abc]', $options: 'i'}}, // make sure we don't break vanilla selectors\n          {v: {$regex: /O/, $options: 'i'}}, // $options should override the ones on the RegExp object\n          {u: {$regex: /O/m, $options: 'i'}} // $options should override the ones on the RegExp object\n        ]},\n        {'$nor': [\n          {s: /^d/},\n          {t: /^e/i},\n          {u: {$regex: /^f/i}},\n          // even empty string overrides built-in flags\n          {v: {$regex: /^g/i, $options: ''}}\n        ]}\n      ]}\n    ),\n    {'$or': [\n      {'$and': [\n        {x: {$regex: '^a', $options: 'i'}},\n        {y: {$regex: '^b'}},\n        {z: {$regex: '^c', $options: 'i'}},\n        {w: {$regex: '^[abc]', $options: 'i'}},\n        {v: {$regex: 'O', $options: 'i'}},\n        {u: {$regex: 'O', $options: 'i'}}\n      ]},\n      {'$nor': [\n        {s: {$regex: '^d'}},\n        {t: {$regex: '^e', $options: 'i'}},\n        {u: {$regex: '^f', $options: 'i'}},\n        {v: {$regex: '^g', $options: ''}}\n      ]}\n    ]}\n  );\n\n  var oid = new Mongo.ObjectID();\n  test.equal(Mongo.Collection._rewriteSelector(oid),\n             {_id: oid});\n});\n\ntestAsyncMulti('mongo-livedata - specified _id', [\n  function (test, expect) {\n    this.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', this.collectionName);\n      Meteor.subscribe('c-' + this.collectionName, expect());\n    }\n  }, function (test, expect) {\n    var expectError = expect(function (err, result) {\n      test.isTrue(err);\n      var doc = coll.findOne();\n      test.equal(doc.name, \"foo\");\n    });\n    var coll = new Mongo.Collection(this.collectionName);\n    coll.insert({_id: \"foo\", name: \"foo\"}, expect(function (err1, id) {\n      test.equal(id, \"foo\");\n      var doc = coll.findOne();\n      test.equal(doc._id, \"foo\");\n      Meteor._suppress_log(1);\n      coll.insert({_id: \"foo\", name: \"bar\"}, expectError);\n    }));\n  }\n]);\n\n\n// Consistent id generation tests\nfunction collectionInsert (test, expect, coll, index) {\n  var clientSideId = coll.insert({name: \"foo\"}, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction collectionUpsert (test, expect, coll, index) {\n  var upsertId = '123456' + index;\n\n  coll.upsert(upsertId, {$set: {name: \"foo\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction collectionUpsertExisting (test, expect, coll, index) {\n  var clientSideId = coll.insert({name: \"foo\"}, expect(function (err1, id) {\n    test.equal(id, clientSideId);\n\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    // We're not testing sequencing/visibility rules here, so skip this check\n    // test.equal(o.name, 'foo');\n  }));\n\n  coll.upsert(clientSideId, {$set: {name: \"bar\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, clientSideId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(clientSideId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n};\n\nfunction functionCallsInsert (test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, {name: \"foo\"}, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionCallsUpsert (test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"upsertObject\", coll._name, upsertId, {$set:{name: \"foo\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionCallsUpsertExisting (test, expect, coll, index) {\n  var id = coll.insert({name: \"foo\"});\n\n  var o = coll.findOne(id);\n  test.notEqual(null, o);\n  test.equal(o.name, 'foo');\n\n  Meteor.call(\"upsertObject\", coll._name, id, {$set:{name: \"bar\"}}, expect(function (err1, result) {\n    test.equal(result.numberAffected, 1);\n    test.equal(result.insertedId, undefined);\n\n    var o = coll.findOne(id);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'bar');\n  }));\n};\n\nfunction functionCalls3Inserts (test, expect, coll, index) {\n  Meteor.call(\"insertObjects\", coll._name, {name: \"foo\"}, 3, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    test.equal(ids.length, 3);\n\n    for (var i = 0; i < 3; i++) {\n      var stubId = INSERTED_IDS[coll._name][(3 * index) + i];\n      test.equal(ids[i], stubId);\n\n      var o = coll.findOne(stubId);\n      test.isTrue(_.isObject(o));\n      test.equal(o.name, 'foo');\n    }\n  }));\n};\n\nfunction functionChainInsert (test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"insertObjects\", coll._name, {name: \"foo\"}, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionChain2Insert (test, expect, coll, index) {\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"insertObjects\", coll._name, {name: \"foo\"}, 1, expect(function (err1, ids) {\n    test.notEqual((INSERTED_IDS[coll._name] || []).length, 0);\n    var stubId = INSERTED_IDS[coll._name][index];\n\n    test.equal(ids.length, 1);\n    test.equal(ids[0], stubId);\n\n    var o = coll.findOne(stubId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\nfunction functionChain2Upsert (test, expect, coll, index) {\n  var upsertId = '123456' + index;\n  Meteor.call(\"doMeteorCall\", \"doMeteorCall\", \"upsertObject\", coll._name, upsertId, {$set:{name: \"foo\"}}, expect(function (err1, result) {\n    test.equal(result.insertedId, upsertId);\n    test.equal(result.numberAffected, 1);\n\n    var o = coll.findOne(upsertId);\n    test.isTrue(_.isObject(o));\n    test.equal(o.name, 'foo');\n  }));\n};\n\n_.each( {collectionInsert: collectionInsert,\n         collectionUpsert: collectionUpsert,\n         functionCallsInsert: functionCallsInsert,\n         functionCallsUpsert: functionCallsUpsert,\n         functionCallsUpsertExisting: functionCallsUpsertExisting,\n         functionCalls3Insert: functionCalls3Inserts,\n         functionChainInsert: functionChainInsert,\n         functionChain2Insert: functionChain2Insert,\n         functionChain2Upsert: functionChain2Upsert}, function (fn, name) {\n_.each( [1, 3], function (repetitions) {\n_.each( [1, 3], function (collectionCount) {\n_.each( ['STRING', 'MONGO'], function (idGeneration) {\n\n  testAsyncMulti('mongo-livedata - consistent _id generation ' + name + ', ' + repetitions + ' repetitions on ' + collectionCount + ' collections, idGeneration=' + idGeneration, [ function (test, expect) {\n    var collectionOptions = { idGeneration: idGeneration };\n\n    var cleanups = this.cleanups = [];\n    this.collections = _.times(collectionCount, function () {\n      var collectionName = \"consistentid_\" + Random.id();\n      if (Meteor.isClient) {\n        Meteor.call('createInsecureCollection', collectionName, collectionOptions);\n        Meteor.subscribe('c-' + collectionName, expect());\n        cleanups.push(function (expect) { Meteor.call('dropInsecureCollection', collectionName, expect(function () {})); });\n      }\n\n      var collection = new Mongo.Collection(collectionName, collectionOptions);\n      if (Meteor.isServer) {\n        cleanups.push(function () { collection._dropCollection(); });\n      }\n      COLLECTIONS[collectionName] = collection;\n      return collection;\n    });\n  }, function (test, expect) {\n    // now run the actual test\n    for (var i = 0; i < repetitions; i++) {\n      for (var j = 0; j < collectionCount; j++) {\n        fn(test, expect, this.collections[j], i);\n      }\n    }\n  }, function (test, expect) {\n    // Run any registered cleanup functions (e.g. to drop collections)\n    _.each(this.cleanups, function(cleanup) {\n      cleanup(expect);\n    });\n  }]);\n\n});\n});\n});\n});\n\n\n\ntestAsyncMulti('mongo-livedata - empty string _id', [\n  function (test, expect) {\n    var self = this;\n    self.collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', self.collectionName);\n      Meteor.subscribe('c-' + self.collectionName, expect());\n    }\n    self.coll = new Mongo.Collection(self.collectionName);\n    try {\n      self.coll.insert({_id: \"\", f: \"foo\"});\n      test.fail(\"Insert with an empty _id should fail\");\n    } catch (e) {\n      // ok\n    }\n    self.coll.insert({_id: \"realid\", f: \"bar\"}, expect(function (err, res) {\n      test.equal(res, \"realid\");\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    var docs = self.coll.find().fetch();\n    test.equal(docs, [{_id: \"realid\", f: \"bar\"}]);\n  },\n  function (test, expect) {\n    var self = this;\n    if (Meteor.isServer) {\n      self.coll._collection.insert({_id: \"\", f: \"baz\"});\n      test.equal(self.coll.find().fetch().length, 2);\n    }\n  }\n]);\n\n\nif (Meteor.isServer) {\n\n  testAsyncMulti(\"mongo-livedata - minimongo on server to server connection\", [\n    function (test, expect) {\n      var self = this;\n      Meteor._debug(\"connection setup\");\n      self.id = Random.id();\n      var C = self.C = new Mongo.Collection(\"ServerMinimongo_\" + self.id);\n      C.allow({\n        insert: function () {return true;},\n        update: function () {return true;},\n        remove: function () {return true;}\n      });\n      C.insert({a: 0, b: 1});\n      C.insert({a: 0, b: 2});\n      C.insert({a: 1, b: 3});\n      Meteor.publish(self.id, function () {\n        return C.find({a: 0});\n      });\n\n      self.conn = DDP.connect(Meteor.absoluteUrl());\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.conn.status().connected) {\n        self.miniC = new Mongo.Collection(\"ServerMinimongo_\" + self.id, {\n          connection: self.conn\n        });\n        var exp = expect(function (err) {\n          test.isFalse(err);\n        });\n        self.conn.subscribe(self.id, {\n          onError: exp,\n          onReady: exp\n        });\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.miniC) {\n        var contents = self.miniC.find().fetch();\n        test.equal(contents.length, 2);\n        test.equal(contents[0].a, 0);\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (!self.miniC)\n        return;\n      self.miniC.insert({a:0, b:3});\n      var contents = self.miniC.find({b:3}).fetch();\n      test.equal(contents.length, 1);\n      test.equal(contents[0].a, 0);\n    }\n  ]);\n\n  testAsyncMulti(\"mongo-livedata - minimongo observe on server\", [\n    function (test, expect) {\n      var self = this;\n      self.id = Random.id();\n      self.C = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id);\n      self.events = [];\n\n      Meteor.publish(self.id, function () {\n        return self.C.find();\n      });\n\n      self.conn = DDP.connect(Meteor.absoluteUrl());\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.conn.status().connected) {\n        self.miniC = new Mongo.Collection(\"ServerMinimongoObserve_\" + self.id, {\n          connection: self.conn\n        });\n        var exp = expect(function (err) {\n          test.isFalse(err);\n        });\n        self.conn.subscribe(self.id, {\n          onError: exp,\n          onReady: exp\n        });\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.miniC) {\n        self.obs = self.miniC.find().observeChanges({\n          added: function (id, fields) {\n            self.events.push({evt: \"a\", id: id});\n            Meteor._sleepForMs(200);\n            self.events.push({evt: \"b\", id: id});\n          }\n        });\n        self.one = self.C.insert({});\n        self.two = self.C.insert({});\n        pollUntil(expect, function () {\n          return self.events.length === 4;\n        }, 10000);\n      }\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.miniC) {\n        test.equal(self.events, [\n          {evt: \"a\", id: self.one},\n          {evt: \"b\", id: self.one},\n          {evt: \"a\", id: self.two},\n          {evt: \"b\", id: self.two}\n        ]);\n      }\n      self.obs && self.obs.stop();\n    }\n  ]);\n}\n\nTinytest.addAsync(\"mongo-livedata - local collections with different connections\", function (test, onComplete) {\n  var cname = Random.id();\n  var cname2 = Random.id();\n  var coll1 = new Mongo.Collection(cname);\n  var doc = { foo: \"bar\" };\n  var coll2 = new Mongo.Collection(cname2, { connection: null });\n  coll2.insert(doc, function (err, id) {\n    test.equal(coll1.find(doc).count(), 0);\n    test.equal(coll2.find(doc).count(), 1);\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/ callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, { connection: null });\n  var doc = { foo: \"bar\" };\n  var docId = coll1.insert(doc, function (err, id) {\n    test.equal(docId, id);\n    test.equal(coll1.findOne(doc)._id, id);\n    onComplete();\n  });\n});\n\nTinytest.addAsync(\"mongo-livedata - local collection with null connection, w/o callback\", function (test, onComplete) {\n  var cname = Random.id();\n  var coll1 = new Mongo.Collection(cname, { connection: null });\n  var doc = { foo: \"bar\" };\n  var docId = coll1.insert(doc);\n  test.equal(coll1.findOne(doc)._id, docId);\n  onComplete();\n});\n\ntestAsyncMulti(\"mongo-livedata - update handles $push with $each correctly\", [\n  function (test, expect) {\n    var self = this;\n    var collectionName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', collectionName);\n      Meteor.subscribe('c-' + collectionName, expect());\n    }\n\n    self.collection = new Mongo.Collection(collectionName);\n\n    self.id = self.collection.insert(\n      {name: 'jens', elements: ['X', 'Y']}, expect(function (err, res) {\n        test.isFalse(err);\n        test.equal(self.id, res);\n        }));\n  },\n  function (test, expect) {\n    var self = this;\n    self.collection.update(self.id, {\n      $push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }}}, expect(function (err, res) {\n          test.isFalse(err);\n          test.equal(\n            self.collection.findOne(self.id),\n            {_id: self.id, name: 'jens', elements: ['Y', 'A', 'B', 'C']});\n        }));\n  }\n]);\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - upsert handles $push with $each correctly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    var result = collection.upsert(\n      {name: 'jens'},\n      {$push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }}});\n\n    test.equal(collection.findOne(result.insertedId),\n               {_id: result.insertedId,\n                name: 'jens',\n                elements: ['A', 'B', 'C']});\n\n    var id = collection.insert({name: \"david\", elements: ['X', 'Y']});\n    result = collection.upsert(\n      {name: 'david'},\n      {$push: {\n        elements: {\n          $each: ['A', 'B', 'C'],\n          $slice: -4\n        }}});\n\n    test.equal(collection.findOne(id),\n               {_id: id,\n                name: 'david',\n                elements: ['Y', 'A', 'B', 'C']});\n  });\n\n  Tinytest.add(\"mongo-livedata - upsert handles dotted selectors corrrectly\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    var result1 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: {message: \"upsert 1\"}\n    });\n\n    test.equal(collection.findOne(result1.insertedId),{\n      _id: result1.insertedId,\n      subdocument: {a: 1},\n      message: \"upsert 1\"\n    });\n\n    var result2 = collection.upsert({\n      \"subdocument.a\": 1\n    }, {\n      $set: {message: \"upsert 2\"}\n    });\n\n    test.equal(result2, {numberAffected: 1});\n\n    test.equal(collection.findOne(result1.insertedId),{\n      _id: result1.insertedId,\n      subdocument: {a: 1},\n      message: \"upsert 2\"\n    });\n\n    var result3 = collection.upsert({\n      \"subdocument.a.b\": 1,\n      \"subdocument.c\": 2\n    }, {\n      $set: {message: \"upsert3\"}\n    });\n\n    test.equal(collection.findOne(result3.insertedId),{\n      _id: result3.insertedId,\n      subdocument: {a: {b: 1}, c: 2},\n      message: \"upsert3\"\n    });\n\n    var result4 = collection.upsert({\n      \"subdocument.a\": 4\n    }, {\n      $set: {\"subdocument.a\": \"upsert 4\"}\n    });\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: {a: \"upsert 4\"}\n    });\n\n    var result5 = collection.upsert({\n      \"subdocument.a\": \"upsert 4\"\n    }, {\n      $set: {\"subdocument.a\": \"upsert 5\"}\n    });\n\n    test.equal(result5, {numberAffected: 1});\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: {a: \"upsert 5\"}\n    });\n\n    var result6 = collection.upsert({\n      \"subdocument.a\": \"upsert 5\"\n    }, {\n      $set: {\"subdocument\": \"upsert 6\"}\n    });\n\n    test.equal(result6, {numberAffected: 1});\n\n    test.equal(collection.findOne(result4.insertedId), {\n      _id: result4.insertedId,\n      subdocument: \"upsert 6\"\n    });\n\n    var result7 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert7\"\n      }\n    });\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {b: 7, c: \"upsert7\"}\n      }\n    });\n\n    var result8 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.c\": \"upsert8\"\n      }\n    });\n\n    test.equal(result8, {numberAffected: 1});\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {b: 7, c: \"upsert8\"}\n      }\n    });\n\n    var result9 = collection.upsert({\n      \"subdocument.a.b\": 7\n    }, {\n      $set: {\n        \"subdocument.a.b\": \"upsert9\"\n      }\n    });\n\n    test.equal(result9, {numberAffected: 1});\n\n    test.equal(collection.findOne(result7.insertedId), {\n      _id: result7.insertedId,\n      subdocument: {\n        a: {b: \"upsert9\", c: \"upsert8\"}\n      }\n    });\n\n  });\n}\n\n// This is a VERY white-box test.\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - _disableOplog\", function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection(collName);\n  if (MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle) {\n    var observeWithOplog = coll.find({x: 5})\n          .observeChanges({added: function () {}});\n    test.isTrue(observeWithOplog._multiplexer._observeDriver._usesOplog);\n    observeWithOplog.stop();\n  }\n  var observeWithoutOplog = coll.find({x: 6}, {_disableOplog: true})\n        .observeChanges({added: function () {}});\n  test.isFalse(observeWithoutOplog._multiplexer._observeDriver._usesOplog);\n  observeWithoutOplog.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - include selector fields\", function (test) {\n  var collName = \"includeSelector\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  var docId = coll.insert({a: 1, b: [3, 2], c: 'foo'});\n  test.isTrue(docId);\n\n  // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n  waitUntilOplogCaughtUp();\n\n  var output = [];\n  var handle = coll.find({a: 1, b: 2}, {fields: {c: 1}}).observeChanges({\n    added: function (id, fields) {\n      output.push(['added', id, fields]);\n    },\n    changed: function (id, fields) {\n      output.push(['changed', id, fields]);\n    },\n    removed: function (id) {\n      output.push(['removed', id]);\n    }\n  });\n  // Initially should match the document.\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', docId, {c: 'foo'}]);\n\n  // Update in such a way that, if we only knew about the published field 'c'\n  // and the changed field 'b' (but not the field 'a'), we would think it didn't\n  // match any more.  (This is a regression test for a bug that existed because\n  // we used to not use the shared projection in the initial query.)\n  runInFence(function () {\n    coll.update(docId, {$set: {'b.0': 2, c: 'bar'}});\n  });\n  test.length(output, 1);\n  test.equal(output.shift(), ['changed', docId, {c: 'bar'}]);\n\n  handle.stop();\n});\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - transform\", function (test) {\n  var collName = \"oplogTransform\" + Random.id();\n  var coll = new Mongo.Collection(collName);\n\n  var docId = coll.insert({a: 25, x: {x: 5, y: 9}});\n  test.isTrue(docId);\n\n  // Wait until we've processed the insert oplog entry. (If the insert shows up\n  // during the observeChanges, the bug in question is not consistently\n  // reproduced.) We don't have to do this for polling observe (eg\n  // --disable-oplog).\n  waitUntilOplogCaughtUp();\n\n  var cursor = coll.find({}, {transform: function (doc) {\n    return doc.x;\n  }});\n\n  var changesOutput = [];\n  var changesHandle = cursor.observeChanges({\n    added: function (id, fields) {\n      changesOutput.push(['added', fields]);\n    }\n  });\n  // We should get untransformed fields via observeChanges.\n  test.length(changesOutput, 1);\n  test.equal(changesOutput.shift(), ['added', {a: 25, x: {x: 5, y: 9}}]);\n  changesHandle.stop();\n\n  var transformedOutput = [];\n  var transformedHandle = cursor.observe({\n    added: function (doc) {\n      transformedOutput.push(['added', doc]);\n    }\n  });\n  test.length(transformedOutput, 1);\n  test.equal(transformedOutput.shift(), ['added', {x: 5, y: 9}]);\n  transformedHandle.stop();\n});\n\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - oplog - drop collection/db\", function (test) {\n  // This test uses a random database, so it can be dropped without affecting\n  // anything else.\n  var mongodbUri = Npm.require('mongodb-uri');\n  var parsedUri = mongodbUri.parse(process.env.MONGO_URL);\n  parsedUri.database = 'dropDB' + Random.id();\n  var driver = new MongoInternals.RemoteCollectionDriver(\n    mongodbUri.format(parsedUri), {\n      oplogUrl: process.env.MONGO_OPLOG_URL\n    }\n  );\n\n  var collName = \"dropCollection\" + Random.id();\n  var coll = new Mongo.Collection(collName, { _driver: driver });\n\n  var doc1Id = coll.insert({a: 'foo', c: 1});\n  var doc2Id = coll.insert({b: 'bar'});\n  var doc3Id = coll.insert({a: 'foo', c: 2});\n  var tmp;\n\n  var output = [];\n  var handle = coll.find({a: 'foo'}).observeChanges({\n    added: function (id, fields) {\n      output.push(['added', id, fields]);\n    },\n    changed: function (id) {\n      output.push(['changed']);\n    },\n    removed: function (id) {\n      output.push(['removed', id]);\n    }\n  });\n  test.length(output, 2);\n  // make order consistent\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n  test.equal(output.shift(), ['added', doc1Id, {a: 'foo', c: 1}]);\n  test.equal(output.shift(), ['added', doc3Id, {a: 'foo', c: 2}]);\n\n  // Wait until we've processed the insert oplog entry, so that we are in a\n  // steady state (and we don't see the dropped docs because we are FETCHING).\n  waitUntilOplogCaughtUp();\n\n  // Drop the collection. Should remove all docs.\n  runInFence(function () {\n    coll._dropCollection();\n  });\n\n  test.length(output, 2);\n  // make order consistent\n  if (output.length === 2 && output[0][1] === doc3Id) {\n    tmp = output[0];\n    output[0] = output[1];\n    output[1] = tmp;\n  }\n  test.equal(output.shift(), ['removed', doc1Id]);\n  test.equal(output.shift(), ['removed', doc3Id]);\n\n  // Put something back in.\n  var doc4Id;\n  runInFence(function () {\n    doc4Id = coll.insert({a: 'foo', c: 3});\n  });\n\n  test.length(output, 1);\n  test.equal(output.shift(), ['added', doc4Id, {a: 'foo', c: 3}]);\n\n  // XXX: this was intermittently failing for unknown reasons.\n  // Now drop the database. Should remove all docs again.\n  // runInFence(function () {\n  //   driver.mongo.dropDatabase();\n  // });\n  //\n  // test.length(output, 1);\n  // test.equal(output.shift(), ['removed', doc4Id]);\n\n  handle.stop();\n  driver.mongo.close();\n});\n\nvar TestCustomType = function (head, tail) {\n  // use different field names on the object than in JSON, to ensure we are\n  // actually treating this as an opaque object.\n  this.myHead = head;\n  this.myTail = tail;\n};\n_.extend(TestCustomType.prototype, {\n  clone: function () {\n    return new TestCustomType(this.myHead, this.myTail);\n  },\n  equals: function (other) {\n    return other instanceof TestCustomType\n      && EJSON.equals(this.myHead, other.myHead)\n      && EJSON.equals(this.myTail, other.myTail);\n  },\n  typeName: function () {\n    return 'someCustomType';\n  },\n  toJSONValue: function () {\n    return {head: this.myHead, tail: this.myTail};\n  }\n});\n\nEJSON.addType('someCustomType', function (json) {\n  return new TestCustomType(json.head, json.tail);\n});\n\ntestAsyncMulti(\"mongo-livedata - oplog - update EJSON\", [\n  function (test, expect) {\n    var self = this;\n    var collectionName = \"ejson\" + Random.id();\n    if (Meteor.isClient) {\n      Meteor.call('createInsecureCollection', collectionName);\n      Meteor.subscribe('c-' + collectionName, expect());\n    }\n\n    self.collection = new Mongo.Collection(collectionName);\n    self.date = new Date;\n    self.objId = new Mongo.ObjectID;\n\n    self.id = self.collection.insert(\n      {d: self.date, oi: self.objId,\n       custom: new TestCustomType('a', 'b')},\n      expect(function (err, res) {\n        test.isFalse(err);\n        test.equal(self.id, res);\n      }));\n  },\n  function (test, expect) {\n    var self = this;\n    self.changes = [];\n    self.handle = self.collection.find({}).observeChanges({\n      added: function (id, fields) {\n        self.changes.push(['a', id, fields]);\n      },\n      changed: function (id, fields) {\n        self.changes.push(['c', id, fields]);\n      },\n      removed: function (id) {\n        self.changes.push(['r', id]);\n      }\n    });\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['a', self.id,\n                {d: self.date, oi: self.objId,\n                 custom: new TestCustomType('a', 'b')}]);\n\n    // First, replace the entire custom object.\n    // (runInFence is useful for the server, using expect() is useful for the\n    // client)\n    runInFence(function () {\n      self.collection.update(\n        self.id, {$set: {custom: new TestCustomType('a', 'c')}},\n        expect(function (err) {\n          test.isFalse(err);\n        }));\n    });\n  },\n  function (test, expect) {\n    var self = this;\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['c', self.id, {custom: new TestCustomType('a', 'c')}]);\n\n    // Now, sneakily replace just a piece of it. Meteor won't do this, but\n    // perhaps you are accessing Mongo directly.\n    runInFence(function () {\n      self.collection.update(\n        self.id, {$set: {'custom.EJSON$value.EJSONtail': 'd'}},\n      expect(function (err) {\n        test.isFalse(err);\n      }));\n    });\n  },\n  function (test, expect) {\n    var self = this;\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['c', self.id, {custom: new TestCustomType('a', 'd')}]);\n\n    // Update a date and an ObjectID too.\n    self.date2 = new Date(self.date.valueOf() + 1000);\n    self.objId2 = new Mongo.ObjectID;\n    runInFence(function () {\n      self.collection.update(\n        self.id, {$set: {d: self.date2, oi: self.objId2}},\n      expect(function (err) {\n        test.isFalse(err);\n      }));\n    });\n  },\n  function (test, expect) {\n    var self = this;\n    test.length(self.changes, 1);\n    test.equal(self.changes.shift(),\n               ['c', self.id, {d: self.date2, oi: self.objId2}]);\n\n    self.handle.stop();\n  }\n]);\n\n\nvar waitUntilOplogCaughtUp = function () {\n  var oplogHandle =\n        MongoInternals.defaultRemoteCollectionDriver().mongo._oplogHandle;\n  if (oplogHandle)\n    oplogHandle.waitUntilCaughtUp();\n};\n\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - cursor dedup stop\", function (test) {\n  var coll = new Mongo.Collection(Random.id());\n  _.times(100, function () {\n    coll.insert({foo: 'baz'});\n  });\n  var handler = coll.find({}).observeChanges({\n    added: function (id) {\n      coll.update(id, {$set: {foo: 'bar'}});\n    }\n  });\n  handler.stop();\n  // Previously, this would print\n  //    Exception in queued task: TypeError: Object.keys called on non-object\n  // Unfortunately, this test didn't fail before the bugfix, but it at least\n  // would print the error and no longer does.\n  // See https://github.com/meteor/meteor/issues/2070\n});\n\ntestAsyncMulti(\"mongo-livedata - undefined find options\", [\n  function (test, expect) {\n    var self = this;\n    self.collName = Random.id();\n    if (Meteor.isClient) {\n      Meteor.call(\"createInsecureCollection\", self.collName);\n      Meteor.subscribe(\"c-\" + self.collName, expect());\n    }\n  },\n  function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(self.collName);\n    self.doc = { foo: 1, bar: 2, _id: \"foobar\" };\n    self.coll.insert(self.doc, expect(function (err, id) {\n      test.isFalse(err);\n    }));\n  },\n  function (test, expect) {\n    var self = this;\n    var result = self.coll.findOne({ foo: 1 }, {\n      fields: undefined,\n      sort: undefined,\n      limit: undefined,\n      skip: undefined\n    });\n    test.equal(result, self.doc);\n  }\n]);\n\n// Regression test for #2274.\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - observe limit bug\", [\n  function (test, expect) {\n    var self = this;\n    self.coll = new Mongo.Collection(Random.id());\n    var state = {};\n    var callbacks = {\n      changed: function (newDoc) {\n        state[newDoc._id] = newDoc;\n      },\n      added: function (newDoc) {\n        state[newDoc._id] = newDoc;\n      },\n      removed: function (oldDoc) {\n        delete state[oldDoc._id];\n      }\n    };\n    self.observe = self.coll.find(\n      {}, {limit: 1, sort: {sortField: -1}}).observe(callbacks);\n\n    // Insert some documents.\n    runInFence(function () {\n      self.id0 = self.coll.insert({sortField: 0, toDelete: true});\n      self.id1 = self.coll.insert({sortField: 1, toDelete: true});\n      self.id2 = self.coll.insert({sortField: 2, toDelete: true});\n    });\n    test.equal(_.keys(state), [self.id2]);\n\n    // Mutate the one in the unpublished buffer and the one below the\n    // buffer. Before the fix for #2274, this left the observe state machine in\n    // a broken state where the buffer was empty but it wasn't try to re-fill\n    // it.\n    runInFence(function () {\n      self.coll.update({_id: {$ne: self.id2}},\n                       {$set: {toDelete: false}},\n                       {multi: 1});\n    });\n    test.equal(_.keys(state), [self.id2]);\n\n    // Now remove the one published document. This should slide up id1 from the\n    // buffer, but this didn't work before the #2274 fix.\n    runInFence(function () {\n      self.coll.remove({toDelete: true});\n    });\n    test.equal(_.keys(state), [self.id1]);\n  }\n]);\n\nMeteor.isServer && testAsyncMulti(\"mongo-livedata - update with replace forbidden\", [\n  function (test, expect) {\n    var c = new Mongo.Collection(Random.id());\n\n    var id = c.insert({ foo: \"bar\" });\n\n    c.update(id, { foo2: \"bar2\" });\n    test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n\n    test.throws(function () {\n      c.update(id, { foo3: \"bar3\" }, { _forbidReplace: true });\n    }, \"Replacements are forbidden\");\n    test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n\n    test.throws(function () {\n      c.update(id, { foo3: \"bar3\", $set: { blah: 1 } });\n    }, \"cannot have both modifier and non-modifier fields\");\n    test.equal(c.findOne(id), { _id: id, foo2: \"bar2\" });\n  }\n]);\n\nMeteor.isServer && Tinytest.add(\n  \"mongo-livedata - connection failure throws\",\n  function (test) {\n    test.throws(function () {\n      new MongoInternals.Connection('mongodb://this-does-not-exist.test/asdf');\n    });\n  }\n);\n\nMeteor.isServer && Tinytest.add(\"mongo-livedata - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(MongoInternals.NpmModules.mongodb.version, /^1\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(MongoInternals.NpmModules.mongodb.module), 'function');\n  test.equal(typeof(MongoInternals.NpmModules.mongodb.module.connect),\n             'function');\n  test.equal(typeof(MongoInternals.NpmModules.mongodb.module.ObjectID),\n             'function');\n\n  var c = new Mongo.Collection(Random.id());\n  var rawCollection = c.rawCollection();\n  test.isTrue(rawCollection);\n  test.isTrue(rawCollection.findAndModify);\n  var rawDb = c.rawDatabase();\n  test.isTrue(rawDb);\n  test.isTrue(rawDb.admin);\n});\n\nif (Meteor.isServer) {\n  Tinytest.add(\"mongo-livedata - update/remove don't accept an array as a selector #4804\", function (test) {\n    var collection = new Mongo.Collection(Random.id());\n\n    _.times(10, function () {\n      collection.insert({ data: \"Hello\" });\n    });\n\n    test.equal(collection.find().count(), 10);\n\n    // Test several array-related selectors\n    _.each([[], [1, 2, 3], [{}]], function (selector) {\n      test.throws(function () {\n        collection.remove(selector);\n      });\n\n      test.throws(function () {\n        collection.update(selector, {$set: 5});\n      });\n    });\n\n    test.equal(collection.find().count(), 10);\n  });\n}\n\n// This is a regression test for https://github.com/meteor/meteor/issues/4839.\n// Prior to fixing the issue (but after applying\n// https://github.com/meteor/meteor/pull/4694), doing a Mongo write from a\n// timeout that ran after a method body (invoked via the client) would throw an\n// error \"fence has already activated -- too late to add a callback\" and not\n// properly call the Mongo write's callback.  In this test:\n//  - The client invokes a method (fenceOnBeforeFireError1) which\n//    - Starts an observe on a query\n//    - Creates a timeout (which shares a write fence with the method)\n//    - Lets the method return (firing the write fence)\n//  - The timeout runs and does a Mongo write. This write is inside a write\n//    fence (because timeouts preserve the fence, see dcd26415) but the write\n//    fence already fired.\n//  - The Mongo write's callback confirms that there is no error. This was\n//    not the case before fixing the bug!  (Note that the observe was necessary\n//    for the error to occur, because the error was thrown from the observe's\n//    crossbar listener callback).  It puts the confirmation into a Future.\n//  - The client invokes another method which reads the confirmation from\n//    the future. (Well, the invocation happened earlier but the use of the\n//    Future sequences it so that the confirmation only gets read at this point.)\nif (Meteor.isClient) {\n  testAsyncMulti(\"mongo-livedata - fence onBeforeFire error\", [\n    function (test, expect) {\n      var self = this;\n      self.nonce = Random.id();\n      Meteor.call('fenceOnBeforeFireError1', self.nonce, expect(function (err) {\n        test.isFalse(err);\n      }));\n    },\n    function (test, expect) {\n      var self = this;\n      Meteor.call('fenceOnBeforeFireError2', self.nonce, expect(\n        function (err, success) {\n          test.isFalse(err);\n          test.isTrue(success);\n        }\n      ));\n    }\n  ]);\n} else {\n  var fenceOnBeforeFireErrorCollection = new Mongo.Collection(\"FOBFE\");\n  var Future = Npm.require('fibers/future');\n  var futuresByNonce = {};\n  Meteor.methods({\n    fenceOnBeforeFireError1: function (nonce) {\n      futuresByNonce[nonce] = new Future;\n      var observe = fenceOnBeforeFireErrorCollection.find({nonce: nonce})\n            .observeChanges({added: function (){}});\n      Meteor.setTimeout(function () {\n        fenceOnBeforeFireErrorCollection.insert(\n          {nonce: nonce},\n          function (err, result) {\n            var success = !err && result;\n            futuresByNonce[nonce].return(success);\n            observe.stop();\n          }\n        );\n      }, 10);\n    },\n    fenceOnBeforeFireError2: function (nonce) {\n      try {\n        return futuresByNonce[nonce].wait();\n      } finally {\n        delete futuresByNonce[nonce];\n      }\n    }\n  });\n}\n"]},"hash":"4b4c61cbd944b232dca899ef84561cba15721e35"}
