{"version":3,"sources":["meteor://ðŸ’»app/packages/yuukan_streamy/packages/yuukan_streamy.js"],"names":[],"mappingsfile":"/packages/yuukan_streamy.js","sourcesContent":["(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/namespaces.js                                                    //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nStreamy = {};                                                                                   // 1\nStreamy.BroadCasts = {};                                                                        // 2\nStreamy.DirectMessages = {};                                                                    // 3\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/core/core.js                                                     //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\nvar handlers = {};                                                                              // 1\nvar connect_handlers = [];                                                                      // 2\nvar disconnect_handlers = [];                                                                   // 3\n                                                                                                // 4\n// -------------------------------------------------------------------------- //                // 5\n// --------------------- Overriden by client/server ------------------------- //                // 6\n// -------------------------------------------------------------------------- //                // 7\n                                                                                                // 8\n/**                                                                                             // 9\n * Init streamy, attach base handlers in client/server                                          // 10\n */                                                                                             // 11\nStreamy.init = function() { };                                                                  // 12\n                                                                                                // 13\n/**                                                                                             // 14\n * Write the message on the socket                                                              // 15\n * @param {String} data Data stringified                                                        // 16\n * @param {Object} to (Server side) Which socket should we use                                  // 17\n */                                                                                             // 18\nStreamy._write = function(data, to) { };                                                        // 19\n                                                                                                // 20\n// -------------------------------------------------------------------------- //                // 21\n// ------------------------------ Accessors --------------------------------- //                // 22\n// -------------------------------------------------------------------------- //                // 23\n                                                                                                // 24\n/**                                                                                             // 25\n * Retrieve connect handlers                                                                    // 26\n */                                                                                             // 27\nStreamy.connectHandlers = function() {                                                          // 28\n  return connect_handlers;                                                                      // 29\n};                                                                                              // 30\n                                                                                                // 31\n/**                                                                                             // 32\n * Retrieve disconnect handlers                                                                 // 33\n */                                                                                             // 34\nStreamy.disconnectHandlers = function() {                                                       // 35\n  return disconnect_handlers;                                                                   // 36\n};                                                                                              // 37\n                                                                                                // 38\n/**                                                                                             // 39\n * Retrieve all handlers or the one for the given message                                       // 40\n * @param {String} message Optional, if defined, returns the handler for this specific messsage // 41\n */                                                                                             // 42\nStreamy.handlers = function(message) {                                                          // 43\n  if(message) {                                                                                 // 44\n    var handler = handlers[message];                                                            // 45\n    if(!handler)                                                                                // 46\n      handler = function() {};                                                                  // 47\n                                                                                                // 48\n    return handler;                                                                             // 49\n  }                                                                                             // 50\n                                                                                                // 51\n  return handlers;                                                                              // 52\n};                                                                                              // 53\n                                                                                                // 54\n// -------------------------------------------------------------------------- //                // 55\n// -------------------------- Common interface ------------------------------ //                // 56\n// -------------------------------------------------------------------------- //                // 57\n                                                                                                // 58\n/**                                                                                             // 59\n * Apply a specific prefix to avoid name conflicts                                              // 60\n * @param {String} value Base value                                                             // 61\n * @return {String} The base value prefixed                                                     // 62\n */                                                                                             // 63\nStreamy._applyPrefix = function(value) {                                                        // 64\n  return 'streamy$' + value;                                                                    // 65\n};                                                                                              // 66\n                                                                                                // 67\n/**                                                                                             // 68\n * Register an handler for the given message type                                               // 69\n * @param {String} message Message name to handle                                               // 70\n * @param {Function} callback Callback to call when this message is received                    // 71\n */                                                                                             // 72\nStreamy.on = function(message, callback) {                                                      // 73\n  message = Streamy._applyPrefix(message);                                                      // 74\n  handlers[message] = Meteor.bindEnvironment(callback);                                         // 75\n};                                                                                              // 76\n                                                                                                // 77\n/**                                                                                             // 78\n * Adds an handler for the connection success                                                   // 79\n * @param {Function} callback Callback to call upon connection                                  // 80\n */                                                                                             // 81\nStreamy.onConnect = function(callback) {                                                        // 82\n  connect_handlers.push(Meteor.bindEnvironment(callback));                                      // 83\n};                                                                                              // 84\n                                                                                                // 85\n/**                                                                                             // 86\n * Adds an handler for the disconnection                                                        // 87\n * @param {Function} callback Callback to call upon disconnect                                  // 88\n */                                                                                             // 89\nStreamy.onDisconnect = function(callback) {                                                     // 90\n  disconnect_handlers.push(Meteor.bindEnvironment(callback));                                   // 91\n};                                                                                              // 92\n                                                                                                // 93\n/**                                                                                             // 94\n * Emits a message with the given name and associated data                                      // 95\n * @param {String} message Message name to emit                                                 // 96\n * @param {Object} data Data to send                                                            // 97\n * @param {Socket} to (Server side only) which socket we should use                             // 98\n */                                                                                             // 99\nStreamy.emit = function(message, data, to) {                                                    // 100\n  data = data || {};                                                                            // 101\n  message = Streamy._applyPrefix(message);                                                      // 102\n                                                                                                // 103\n  check(message, String);                                                                       // 104\n  check(data, Object);                                                                          // 105\n                                                                                                // 106\n  data.msg = message;                                                                           // 107\n                                                                                                // 108\n  Streamy._write(JSON.stringify(data), to);                                                     // 109\n};                                                                                              // 110\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/direct_messages/direct_messages.js                               //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// --------------------- Overriden by client/server ------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\n/**                                                                                             // 5\n * Gets the wrapper for the emit returned by Streamy.sessions(sid)                              // 6\n * @param {String|Array} sid Session id(s)                                                      // 7\n * @return  {Function}  Function which will be called by emit on the session                    // 8\n */                                                                                             // 9\nStreamy._sessionsEmit = function(sid) { };                                                      // 10\n                                                                                                // 11\n/**                                                                                             // 12\n * Gets the wrapper for the emit returned by Streamy.sessionsForUsers(sid)                      // 13\n * @param {String|Array} uid User id(s)                                                         // 14\n * @return  {Function}  Function which will be called by emit on the session                    // 15\n */                                                                                             // 16\nStreamy._sessionsForUsersEmit = function(uid) { };                                              // 17\n                                                                                                // 18\n// -------------------------------------------------------------------------- //                // 19\n// -------------------------- Common interface ------------------------------ //                // 20\n// -------------------------------------------------------------------------- //                // 21\n                                                                                                // 22\n/**                                                                                             // 23\n * Returns an object for the targetted session id(s) which contains an emit method              // 24\n * @param {String|Array} sid Session id(s)                                                      // 25\n * @return  {Object}  Object with an emit function                                              // 26\n */                                                                                             // 27\nStreamy.sessions = function(sid) {                                                              // 28\n  return {                                                                                      // 29\n    emit: Streamy._sessionsEmit(sid)                                                            // 30\n  };                                                                                            // 31\n};                                                                                              // 32\n                                                                                                // 33\n/**                                                                                             // 34\n * Returns an object for the targetted user id(s) which contains an emit method                 // 35\n * @param {String|Array} uid User id(s)                                                         // 36\n * @return  {Object}  Object with an emit function                                              // 37\n */                                                                                             // 38\nStreamy.sessionsForUsers = function(uid) {                                                      // 39\n  return {                                                                                      // 40\n    emit: Streamy._sessionsForUsersEmit(uid)                                                    // 41\n  }                                                                                             // 42\n};                                                                                              // 43\n                                                                                                // 44\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/broadcasts/broadcasts.js                                         //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// --------------------- Overriden by client/server ------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\n/**                                                                                             // 5\n * Returns an object for the targetted session id which contains an emit method                 // 6\n * @param {String} message Message to emit                                                      // 7\n * @param {Object} data Data to send                                                            // 8\n * @param {Array|String} except Which sid should we exclude from the broadcast message          // 9\n */                                                                                             // 10\nStreamy.broadcast = function(message, data, except) { };                                        // 11\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/utils/utils.js                                                   //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// --------------------- Overriden by client/server ------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\n/**                                                                                             // 5\n * Retrieve the connection id                                                                   // 6\n * @param  {Socket} socket On server, should be given to determine the concerned connection     // 7\n * @return {String}        The connection id                                                    // 8\n */                                                                                             // 9\nStreamy.id = function(socket) {};                                                               // 10\n                                                                                                // 11\n/**                                                                                             // 12\n * Retrieve the user id                                                                         // 13\n * @param {Socket} socket On server, should be given to determine the concerned user            // 14\n */                                                                                             // 15\nStreamy.userId = function(socket) {};                                                           // 16\n                                                                                                // 17\n/**                                                                                             // 18\n * Retrieve the user                                                                            // 19\n * @param {Socket} socket On server, should be given to determine the concerned user            // 20\n */                                                                                             // 21\nStreamy.user = function(socket) {};                                                             // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/core/core_client.js                                              //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// ------------------------------- Overrides -------------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\nStreamy.init = function() {                                                                     // 5\n                                                                                                // 6\n  var self = this;                                                                              // 7\n                                                                                                // 8\n  // Uppon close                                                                                // 9\n  Meteor.default_connection._stream.on('disconnect', function onClose() {                       // 10\n    // If it was previously connected, call disconnect handlers                                 // 11\n    if(Meteor.default_connection._stream.status().connected) {                                  // 12\n      _.each(self.disconnectHandlers(), function forEachDisconnectHandler(cb) {                 // 13\n        cb.call(self);                                                                          // 14\n      });                                                                                       // 15\n    }                                                                                           // 16\n  });                                                                                           // 17\n                                                                                                // 18\n  // Attach message handlers                                                                    // 19\n  Meteor.default_connection._stream.on('message', function onMessage(data) {                    // 20\n                                                                                                // 21\n    // Parse the message                                                                        // 22\n    var parsed_data = JSON.parse(data);                                                         // 23\n                                                                                                // 24\n    // Retrieve the msg value                                                                   // 25\n    var msg = parsed_data.msg;                                                                  // 26\n                                                                                                // 27\n    // And dismiss it                                                                           // 28\n    delete parsed_data.msg;                                                                     // 29\n                                                                                                // 30\n    // If its the connected message                                                             // 31\n    if(msg === 'connected') {                                                                   // 32\n      // Call each handlers                                                                     // 33\n      _.each(self.connectHandlers(), function forEachConnectHandler(cb) {                       // 34\n        cb.call(self);                                                                          // 35\n      });                                                                                       // 36\n    }                                                                                           // 37\n    else if(msg) {                                                                              // 38\n      // Else, call the appropriate handler                                                     // 39\n      self.handlers(msg).call(self, parsed_data);                                               // 40\n    }                                                                                           // 41\n  });                                                                                           // 42\n                                                                                                // 43\n                                                                                                // 44\n};                                                                                              // 45\n                                                                                                // 46\nStreamy._write = function(data) {                                                               // 47\n  Meteor.default_connection._stream.send(data);                                                 // 48\n};                                                                                              // 49\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/direct_messages/direct_messages_client.js                        //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// ------------------------------- Overrides -------------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\nStreamy._sessionsEmit = function(sid) {                                                         // 5\n  return function(msg, data) {                                                                  // 6\n    Streamy.emit('__direct__', {                                                                // 7\n      '__to': sid,                                                                              // 8\n      '__msg': msg,                                                                             // 9\n      '__data': data                                                                            // 10\n    });                                                                                         // 11\n  };                                                                                            // 12\n};                                                                                              // 13\n                                                                                                // 14\nStreamy._sessionsForUsersEmit = function(uid) {                                                 // 15\n  return function(msg, data) {                                                                  // 16\n    Streamy.emit('__direct__', {                                                                // 17\n      '__to_users': uid,                                                                        // 18\n      '__msg': msg,                                                                             // 19\n      '__data': data                                                                            // 20\n    });                                                                                         // 21\n  };                                                                                            // 22\n}                                                                                               // 23\n                                                                                                // 24\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/broadcasts/broadcasts_client.js                                  //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// ------------------------------- Overrides -------------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\nStreamy.broadcast = function(message, data, except) {                                           // 5\n  Streamy.emit('__broadcast__', {                                                               // 6\n    '__msg': message,                                                                           // 7\n    '__data': data,                                                                             // 8\n    '__except': except                                                                          // 9\n  });                                                                                           // 10\n};                                                                                              // 11\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/utils/utils_client.js                                            //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n// -------------------------------------------------------------------------- //                // 1\n// ------------------------------- Overrides -------------------------------- //                // 2\n// -------------------------------------------------------------------------- //                // 3\n                                                                                                // 4\nStreamy.id = function() {                                                                       // 5\n  return Meteor.connection._lastSessionId;                                                      // 6\n};                                                                                              // 7\n                                                                                                // 8\nStreamy.userId = function(socket) {                                                             // 9\n  if(!Meteor.userId)                                                                            // 10\n    throw new Meteor.Error(500, 'Could not retrieve user id, is accounts-base installed?');     // 11\n                                                                                                // 12\n  return Meteor.userId();                                                                       // 13\n};                                                                                              // 14\n                                                                                                // 15\nStreamy.user = function(socket) {                                                               // 16\n  if(!Meteor.user)                                                                              // 17\n    throw new Meteor.Error(500, 'Could not retrieve user, is accounts-base installed?');        // 18\n                                                                                                // 19\n  return Meteor.user();                                                                         // 20\n};                                                                                              // 21\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                              //\n// packages/yuukan:streamy/lib/startup.js                                                       //\n//                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                //\n/**                                                                                             // 1\n * When the application starts up, register handlers!                                           // 2\n */                                                                                             // 3\nMeteor.startup(function onStartup() {                                                           // 4\n  Streamy.init();                                                                               // 5\n});                                                                                             // 6\n//////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n"]}