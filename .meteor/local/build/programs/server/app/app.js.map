{"version":3,"sources":["meteor://ðŸ’»app/imports/api/Log.js","meteor://ðŸ’»app/server/main.js"],"names":[],"mappings":";;;;;;;;AAAA,SAAS,KAAT,QAAsB,cAAtB;;AAEA,OAAO,IAAM,MAAM,IAAI,MAAM,UAAV,CAAqB,KAArB,CAAZ,4E;;;;;;;;;;;ACFP,SAAS,MAAT,QAAuB,eAAvB;AACA,OAAO,UAAP,MAAuB,aAAvB;AACA,SAAS,GAAT,QAAoB,uBAApB;AACA,IAAM,QAAQ,QAAQ,QAAR,CAAd;;AAEA,IAAG,OAAO,QAAV,EAAoB;AACnB,QAAO,OAAP,CAAe,YAAM;;;AAGpB,QAAM,SAAN;AACA,MAAI,GAAJ,CAAQ,WAAW,IAAX,EAAR,E;AACA,MAAI,GAAJ,CAAQ,WAAW,UAAX,CAAsB,E;AAC5B,aAAU;AADkB,GAAtB,CAAR;;;;;AAOA,QAAM,YAAY;AACjB,OAAI,MAAJ,CAAW;AACV,cAAU,IAAI,IAAJ;AADA,IAAX,EAEG,UAAU,KAAV,EAAiB,QAAjB,EAA2B;AAC7B,YAAQ,GAAR,CAAY,kBAAkB,QAAlB,GAA6B,2BAAzC,EAAsE,IAAI,IAAJ,GAAW,KAAX,EAAtE;AACA,IAJD;AAKA,GAND,EAMG,GANH;;;AASA,MAAI,GAAJ,CAAQ,qBAAR,EAA+B,UAAU,GAAV,EAAe,GAAf,EAAoB;AAClD,WAAQ,GAAR,CAAY,qBAAZ;;AAEA,eAAY,YAAY;AACvB,QAAM,IAAI,KAAK,KAAL,CAAW,KAAK,MAAL,KAAgB,EAA3B,CAAV;AACA,YAAQ,SAAR,CAAkB,aAAlB,EAAiC,EAAC,KAAK,CAAN,EAAS,QAAQ,IAAI,IAAJ,GAAW,kBAAX,EAAjB,EAAjC;AACA,IAHD,EAGG,IAHH;AAIA,OAAI,IAAJ,CAAS,EAAC,MAAM,sCAAP,EAAT;AACA,GARD;AASA,EA9BD;AA+BA,yH","file":"/app.js","sourcesContent":["import { Mongo } from 'meteor/mongo'\n\nexport const Log = new Mongo.Collection('log')\n","import { Meteor } from 'meteor/meteor'\nimport bodyParser from 'body-parser'\nimport { Log } from '../imports/api/Log.js'\nconst Fiber = require('fibers')\n\nif(Meteor.isServer) {\n\tMeteor.startup(() => {\n\n\t\t// Express\n\t\tapp = Express()\n\t\tapp.use(bodyParser.json())       // to support JSON-encoded bodies\n\t\tapp.use(bodyParser.urlencoded({     // to support URL-encoded bodies\n\t\t  extended: true\n\t\t}))\n\n\t\t// Save server launch\n\t\t// Test DB connection\n\t\t// INSERT IN DB\n\t\tFiber(function () {\n\t\t\tLog.insert({\n\t\t\t\tdatetime: new Date()\n\t\t\t}, function (error, response) {\n\t\t\t\tconsole.log('new log (id: ' + response + ') in db, total logs ---> ', Log.find().count())\n\t\t\t})\n\t\t}).run()\n\n\t\t// ROUTE\n\t\tapp.get('/getScoreInRealTime', function (req, res) {\n\t\t\tconsole.log('/getScoreInRealTime')\n\t\t\t// Test sream\n\t\t\tsetInterval(function () {\n\t\t\t\tconst y = Math.floor(Math.random() * 10)\n\t\t\t\tStreamy.broadcast('scoreStream', {'y': y, 'date': new Date().toLocaleTimeString()})\n\t\t\t}, 3000)\n\t\t\tres.json({data: 'response from /getScoreInRealTime...'})\n\t\t})\n\t})\n}\n"]}